generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                     @id @default(cuid())
  email                 String                     @unique
  name                  String
  password              String
  role                  Role                       @default(DEVELOPER)
  avatar                String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  department            Department?
  roleId                String?
  departmentId          String?
  roleMaster            RoleMaster?                @relation(fields: [roleId], references: [id])
  departmentMaster      DepartmentMaster?          @relation(fields: [departmentId], references: [id])
  comments              Comment[]
  assignedCorrections   DepartmentCorrection[]     @relation("CorrectionAssignments")
  requestedCorrections  DepartmentCorrection[]     @relation("CorrectionRequests")
  departmentTransitions ProjectDepartmentHistory[] @relation("DepartmentTransitions")
  departmentPermissions ProjectDepartmentHistory[] @relation("DepartmentPermissions")
  ownedProjects         Project[]                  @relation("ProjectOwner")
  bugAssignments        QABug[]                    @relation("BugAssignments")
  qaTestingRounds       QATestingRound[]           @relation("QATesters")
  assignedTasks         Task[]
  approvalRequests      WorkflowApproval[]         @relation("ApprovalRequests")
  approvalReviews       WorkflowApproval[]         @relation("ApprovalReviews")

  @@map("users")
}

model Project {
  id                String                     @id @default(cuid())
  name              String
  office            String
  category          ProjectCategory
  pagesCount        Int?
  targetDate        DateTime
  status            ProjectStatus              @default(ACTIVE)
  ownerId           String
  clientName        String?
  observations      String?
  monthsPassed      Int                        @default(0)
  startDate         DateTime                   @default(now())
  deviationReason   String?
  dependency        Boolean                    @default(false)
  createdAt         DateTime                   @default(now())
  updatedAt         DateTime                   @updatedAt
  currentDepartment Department                 @default(PMO)
  nextDepartment    Department?
  projectCode       String                     @default("")
  comments          Comment[]
  customFields      CustomField[]
  departmentHistory ProjectDepartmentHistory[]
  owner             User                       @relation("ProjectOwner", fields: [ownerId], references: [id])
  tasks             Task[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  assigneeId  String?
  projectId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  assignee    User?      @relation(fields: [assigneeId], references: [id])
  project     Project    @relation(fields: [projectId], references: [id])

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  projectId String?
  taskId    String?
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  task      Task?    @relation(fields: [taskId], references: [id])

  @@map("comments")
}

model CustomField {
  id         String  @id @default(cuid())
  fieldName  String
  fieldValue String
  projectId  String
  project    Project @relation(fields: [projectId], references: [id])

  @@map("custom_fields")
}

model ProjectDepartmentHistory {
  id                    String                 @id @default(cuid())
  projectId             String
  fromDepartment        Department?
  toDepartment          Department
  movedById             String
  notes                 String?
  createdAt             DateTime               @default(now())
  workStatus            DepartmentWorkStatus   @default(NOT_STARTED)
  workStartDate         DateTime?
  workEndDate           DateTime?
  estimatedDays         Int?
  actualDays            Int?
  correctionCount       Int                    @default(0)
  permissionGrantedById String?
  updatedAt             DateTime               @updatedAt
  corrections           DepartmentCorrection[]
  movedBy               User                   @relation("DepartmentTransitions", fields: [movedById], references: [id])
  permissionGrantedBy   User?                  @relation("DepartmentPermissions", fields: [permissionGrantedById], references: [id])
  project               Project                @relation(fields: [projectId], references: [id])
  qaRounds              QATestingRound[]
  approvals             WorkflowApproval[]

  @@map("project_department_history")
}

model DepartmentCorrection {
  id                String                   @id @default(cuid())
  historyId         String
  correctionType    String
  description       String
  requestedById     String
  assignedToId      String?
  status            CorrectionStatus         @default(OPEN)
  priority          Priority                 @default(MEDIUM)
  requestedAt       DateTime                 @default(now())
  resolvedAt        DateTime?
  resolutionNotes   String?
  estimatedHours    Int?
  actualHours       Int?
  assignedTo        User?                    @relation("CorrectionAssignments", fields: [assignedToId], references: [id])
  departmentHistory ProjectDepartmentHistory @relation(fields: [historyId], references: [id])
  requestedBy       User                     @relation("CorrectionRequests", fields: [requestedById], references: [id])

  @@map("department_corrections")
}

model WorkflowApproval {
  id                String                   @id @default(cuid())
  historyId         String
  approvalType      ApprovalType
  status            ApprovalStatus           @default(PENDING)
  requestedById     String
  reviewedById      String?
  requestedAt       DateTime                 @default(now())
  reviewedAt        DateTime?
  comments          String?
  rejectionReason   String?
  attachments       String[]                 @default([])
  departmentHistory ProjectDepartmentHistory @relation(fields: [historyId], references: [id])
  requestedBy       User                     @relation("ApprovalRequests", fields: [requestedById], references: [id])
  reviewedBy        User?                    @relation("ApprovalReviews", fields: [reviewedById], references: [id])

  @@map("workflow_approvals")
}

model QATestingRound {
  id                String                   @id @default(cuid())
  historyId         String
  roundNumber       Int
  qaType            QAType
  status            QAStatus                 @default(IN_PROGRESS)
  startedAt         DateTime                 @default(now())
  completedAt       DateTime?
  testedById        String
  bugsFound         Int                      @default(0)
  criticalBugs      Int                      @default(0)
  testResults       String?
  rejectionReason   String?
  bugs              QABug[]
  departmentHistory ProjectDepartmentHistory @relation(fields: [historyId], references: [id])
  testedBy          User                     @relation("QATesters", fields: [testedById], references: [id])

  @@map("qa_testing_rounds")
}

model QABug {
  id           String         @id @default(cuid())
  qaRoundId    String
  title        String
  description  String
  severity     BugSeverity    @default(MEDIUM)
  status       BugStatus      @default(OPEN)
  foundAt      DateTime       @default(now())
  fixedAt      DateTime?
  assignedToId String?
  screenshot   String?
  steps        String?
  assignedTo   User?          @relation("BugAssignments", fields: [assignedToId], references: [id])
  qaRound      QATestingRound @relation(fields: [qaRoundId], references: [id])

  @@map("qa_bugs")
}

model DepartmentMaster {
  id        String             @id @default(cuid())
  name      String             @unique
  code      String             @unique
  parentId  String?
  isActive  Boolean            @default(true)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  parent    DepartmentMaster?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children  DepartmentMaster[] @relation("DepartmentHierarchy")
  roles     RoleMaster[]
  users     User[]

  @@map("department_master")
}

model RoleMaster {
  id           String           @id @default(cuid())
  name         String           @unique
  code         String           @unique
  description  String?
  departmentId String
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  department   DepartmentMaster @relation(fields: [departmentId], references: [id])
  users        User[]

  @@map("role_master")
}

enum ApprovalType {
  CLIENT_APPROVAL
  QA_APPROVAL
  BEFORE_LIVE_QA
  MANAGER_REVIEW
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum QAType {
  HTML_QA
  DEV_QA
  BEFORE_LIVE_QA
}

enum QAStatus {
  IN_PROGRESS
  PASSED
  FAILED
  CANCELLED
}

enum BugSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  FIXED
  VERIFIED
  CLOSED
}

enum CorrectionStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  PROJECT_COORDINATOR
  DEVELOPER
  DESIGNER
  HTML_DEVELOPER
  QA_TESTER
  CLIENT
  PC
  TESTER
  PHP_TL1
  PHP_TL2
  REACT_TL
  HTML_TL
  PC_TL1
  DESIGN_TL
}

enum ProjectCategory {
  MOBILE_APP
  REACT_NODEJS
  ADVANCED_PHP
  CUSTOM_PHP
  CUSTOM_WP
  NEXT_JS
  ECOMMERCE
  NORMAL_WEB_APP
  BUSINESS_COLLATERAL
  WOOCOMMERCE
}

enum ProjectStatus {
  ACTIVE
  HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Department {
  PMO
  DESIGN
  HTML
  PHP
  REACT
  WORDPRESS
  QA
  DELIVERY
  MANAGER
}

enum DepartmentWorkStatus {
  NOT_STARTED
  IN_PROGRESS
  CORRECTIONS_NEEDED
  COMPLETED
  ON_HOLD
  PENDING_CLIENT_APPROVAL
  CLIENT_REJECTED
  QA_TESTING
  QA_REJECTED
  BUGFIX_IN_PROGRESS
  BEFORE_LIVE_QA
  READY_FOR_DELIVERY
}
