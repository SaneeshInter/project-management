
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.22.0
 * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
 */
Prisma.prismaVersion = {
  client: "5.22.0",
  engine: "605197351a3c8bdd595af2d2a9bc3025bca48ea2"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  password: 'password',
  role: 'role',
  avatar: 'avatar',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  department: 'department',
  roleId: 'roleId',
  departmentId: 'departmentId'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  name: 'name',
  office: 'office',
  category: 'category',
  pagesCount: 'pagesCount',
  targetDate: 'targetDate',
  status: 'status',
  ownerId: 'ownerId',
  clientName: 'clientName',
  observations: 'observations',
  monthsPassed: 'monthsPassed',
  startDate: 'startDate',
  deviationReason: 'deviationReason',
  dependency: 'dependency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  currentDepartment: 'currentDepartment',
  nextDepartment: 'nextDepartment',
  projectCode: 'projectCode',
  projectCoordinatorId: 'projectCoordinatorId',
  pcTeamLeadId: 'pcTeamLeadId'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  status: 'status',
  priority: 'priority',
  dueDate: 'dueDate',
  assigneeId: 'assigneeId',
  projectId: 'projectId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  authorId: 'authorId',
  projectId: 'projectId',
  taskId: 'taskId',
  createdAt: 'createdAt'
};

exports.Prisma.CustomFieldScalarFieldEnum = {
  id: 'id',
  fieldName: 'fieldName',
  fieldValue: 'fieldValue',
  projectId: 'projectId'
};

exports.Prisma.ProjectDepartmentHistoryScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  fromDepartment: 'fromDepartment',
  toDepartment: 'toDepartment',
  movedById: 'movedById',
  notes: 'notes',
  createdAt: 'createdAt',
  workStatus: 'workStatus',
  workStartDate: 'workStartDate',
  workEndDate: 'workEndDate',
  estimatedDays: 'estimatedDays',
  actualDays: 'actualDays',
  correctionCount: 'correctionCount',
  permissionGrantedById: 'permissionGrantedById',
  updatedAt: 'updatedAt'
};

exports.Prisma.DepartmentCorrectionScalarFieldEnum = {
  id: 'id',
  historyId: 'historyId',
  correctionType: 'correctionType',
  description: 'description',
  requestedById: 'requestedById',
  assignedToId: 'assignedToId',
  status: 'status',
  priority: 'priority',
  requestedAt: 'requestedAt',
  resolvedAt: 'resolvedAt',
  resolutionNotes: 'resolutionNotes',
  estimatedHours: 'estimatedHours',
  actualHours: 'actualHours'
};

exports.Prisma.WorkflowApprovalScalarFieldEnum = {
  id: 'id',
  historyId: 'historyId',
  approvalType: 'approvalType',
  status: 'status',
  requestedById: 'requestedById',
  reviewedById: 'reviewedById',
  requestedAt: 'requestedAt',
  reviewedAt: 'reviewedAt',
  comments: 'comments',
  rejectionReason: 'rejectionReason',
  attachments: 'attachments'
};

exports.Prisma.QATestingRoundScalarFieldEnum = {
  id: 'id',
  historyId: 'historyId',
  roundNumber: 'roundNumber',
  qaType: 'qaType',
  status: 'status',
  startedAt: 'startedAt',
  completedAt: 'completedAt',
  testedById: 'testedById',
  bugsFound: 'bugsFound',
  criticalBugs: 'criticalBugs',
  testResults: 'testResults',
  rejectionReason: 'rejectionReason'
};

exports.Prisma.QABugScalarFieldEnum = {
  id: 'id',
  qaRoundId: 'qaRoundId',
  title: 'title',
  description: 'description',
  severity: 'severity',
  status: 'status',
  foundAt: 'foundAt',
  fixedAt: 'fixedAt',
  assignedToId: 'assignedToId',
  screenshot: 'screenshot',
  steps: 'steps'
};

exports.Prisma.DepartmentMasterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  parentId: 'parentId',
  order: 'order',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RoleMasterScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  description: 'description',
  departmentId: 'departmentId',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectAssignmentHistoryScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  assignmentType: 'assignmentType',
  previousUserId: 'previousUserId',
  newUserId: 'newUserId',
  assignedById: 'assignedById',
  assignedAt: 'assignedAt',
  reason: 'reason',
  notes: 'notes'
};

exports.Prisma.ChecklistTemplateScalarFieldEnum = {
  id: 'id',
  department: 'department',
  title: 'title',
  description: 'description',
  isRequired: 'isRequired',
  order: 'order',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectChecklistItemScalarFieldEnum = {
  id: 'id',
  projectId: 'projectId',
  templateId: 'templateId',
  department: 'department',
  title: 'title',
  description: 'description',
  isCompleted: 'isCompleted',
  completedById: 'completedById',
  completedAt: 'completedAt',
  completedDate: 'completedDate',
  notes: 'notes',
  isRequired: 'isRequired',
  order: 'order',
  lastUpdatedAt: 'lastUpdatedAt',
  lastUpdatedById: 'lastUpdatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ChecklistItemLinkScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  url: 'url',
  title: 'title',
  type: 'type',
  addedAt: 'addedAt',
  addedById: 'addedById'
};

exports.Prisma.ChecklistItemUpdateScalarFieldEnum = {
  id: 'id',
  itemId: 'itemId',
  date: 'date',
  notes: 'notes',
  updatedById: 'updatedById',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Role = exports.$Enums.Role = {
  ADMIN: 'ADMIN',
  PROJECT_MANAGER: 'PROJECT_MANAGER',
  PROJECT_COORDINATOR: 'PROJECT_COORDINATOR',
  DEVELOPER: 'DEVELOPER',
  DESIGNER: 'DESIGNER',
  HTML_DEVELOPER: 'HTML_DEVELOPER',
  QA_TESTER: 'QA_TESTER',
  CLIENT: 'CLIENT',
  PC: 'PC',
  TESTER: 'TESTER',
  PHP_TL1: 'PHP_TL1',
  PHP_TL2: 'PHP_TL2',
  REACT_TL: 'REACT_TL',
  HTML_TL: 'HTML_TL',
  PC_TL1: 'PC_TL1',
  PC_TL2: 'PC_TL2',
  DESIGN_TL: 'DESIGN_TL'
};

exports.Department = exports.$Enums.Department = {
  PMO: 'PMO',
  DESIGN: 'DESIGN',
  HTML: 'HTML',
  PHP: 'PHP',
  REACT: 'REACT',
  WORDPRESS: 'WORDPRESS',
  QA: 'QA',
  DELIVERY: 'DELIVERY',
  MANAGER: 'MANAGER'
};

exports.ProjectCategory = exports.$Enums.ProjectCategory = {
  MOBILE_APP: 'MOBILE_APP',
  REACT_NODEJS: 'REACT_NODEJS',
  ADVANCED_PHP: 'ADVANCED_PHP',
  CUSTOM_PHP: 'CUSTOM_PHP',
  CUSTOM_WP: 'CUSTOM_WP',
  NEXT_JS: 'NEXT_JS',
  ECOMMERCE: 'ECOMMERCE',
  NORMAL_WEB_APP: 'NORMAL_WEB_APP',
  BUSINESS_COLLATERAL: 'BUSINESS_COLLATERAL',
  WOOCOMMERCE: 'WOOCOMMERCE'
};

exports.ProjectStatus = exports.$Enums.ProjectStatus = {
  ACTIVE: 'ACTIVE',
  HOLD: 'HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

exports.TaskStatus = exports.$Enums.TaskStatus = {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  IN_REVIEW: 'IN_REVIEW',
  DONE: 'DONE'
};

exports.Priority = exports.$Enums.Priority = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

exports.DepartmentWorkStatus = exports.$Enums.DepartmentWorkStatus = {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  CORRECTIONS_NEEDED: 'CORRECTIONS_NEEDED',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD',
  PENDING_CLIENT_APPROVAL: 'PENDING_CLIENT_APPROVAL',
  CLIENT_REJECTED: 'CLIENT_REJECTED',
  QA_TESTING: 'QA_TESTING',
  QA_REJECTED: 'QA_REJECTED',
  BUGFIX_IN_PROGRESS: 'BUGFIX_IN_PROGRESS',
  BEFORE_LIVE_QA: 'BEFORE_LIVE_QA',
  READY_FOR_DELIVERY: 'READY_FOR_DELIVERY'
};

exports.CorrectionStatus = exports.$Enums.CorrectionStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  REJECTED: 'REJECTED'
};

exports.ApprovalType = exports.$Enums.ApprovalType = {
  CLIENT_APPROVAL: 'CLIENT_APPROVAL',
  QA_APPROVAL: 'QA_APPROVAL',
  BEFORE_LIVE_QA: 'BEFORE_LIVE_QA',
  MANAGER_REVIEW: 'MANAGER_REVIEW'
};

exports.ApprovalStatus = exports.$Enums.ApprovalStatus = {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

exports.QAType = exports.$Enums.QAType = {
  HTML_QA: 'HTML_QA',
  DEV_QA: 'DEV_QA',
  BEFORE_LIVE_QA: 'BEFORE_LIVE_QA'
};

exports.QAStatus = exports.$Enums.QAStatus = {
  IN_PROGRESS: 'IN_PROGRESS',
  PASSED: 'PASSED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.BugSeverity = exports.$Enums.BugSeverity = {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

exports.BugStatus = exports.$Enums.BugStatus = {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  FIXED: 'FIXED',
  VERIFIED: 'VERIFIED',
  CLOSED: 'CLOSED'
};

exports.ProjectAssignmentType = exports.$Enums.ProjectAssignmentType = {
  PROJECT_COORDINATOR: 'PROJECT_COORDINATOR',
  PC_TEAM_LEAD: 'PC_TEAM_LEAD'
};

exports.Prisma.ModelName = {
  User: 'User',
  Project: 'Project',
  Task: 'Task',
  Comment: 'Comment',
  CustomField: 'CustomField',
  ProjectDepartmentHistory: 'ProjectDepartmentHistory',
  DepartmentCorrection: 'DepartmentCorrection',
  WorkflowApproval: 'WorkflowApproval',
  QATestingRound: 'QATestingRound',
  QABug: 'QABug',
  DepartmentMaster: 'DepartmentMaster',
  RoleMaster: 'RoleMaster',
  ProjectAssignmentHistory: 'ProjectAssignmentHistory',
  ChecklistTemplate: 'ChecklistTemplate',
  ProjectChecklistItem: 'ProjectChecklistItem',
  ChecklistItemLink: 'ChecklistItemLink',
  ChecklistItemUpdate: 'ChecklistItemUpdate'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
