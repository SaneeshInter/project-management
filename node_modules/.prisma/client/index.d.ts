
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Project
 * 
 */
export type Project = $Result.DefaultSelection<Prisma.$ProjectPayload>
/**
 * Model Task
 * 
 */
export type Task = $Result.DefaultSelection<Prisma.$TaskPayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model CustomField
 * 
 */
export type CustomField = $Result.DefaultSelection<Prisma.$CustomFieldPayload>
/**
 * Model ProjectDepartmentHistory
 * 
 */
export type ProjectDepartmentHistory = $Result.DefaultSelection<Prisma.$ProjectDepartmentHistoryPayload>
/**
 * Model DepartmentCorrection
 * 
 */
export type DepartmentCorrection = $Result.DefaultSelection<Prisma.$DepartmentCorrectionPayload>
/**
 * Model WorkflowApproval
 * 
 */
export type WorkflowApproval = $Result.DefaultSelection<Prisma.$WorkflowApprovalPayload>
/**
 * Model QATestingRound
 * 
 */
export type QATestingRound = $Result.DefaultSelection<Prisma.$QATestingRoundPayload>
/**
 * Model QABug
 * 
 */
export type QABug = $Result.DefaultSelection<Prisma.$QABugPayload>
/**
 * Model DepartmentMaster
 * 
 */
export type DepartmentMaster = $Result.DefaultSelection<Prisma.$DepartmentMasterPayload>
/**
 * Model RoleMaster
 * 
 */
export type RoleMaster = $Result.DefaultSelection<Prisma.$RoleMasterPayload>
/**
 * Model ProjectAssignmentHistory
 * 
 */
export type ProjectAssignmentHistory = $Result.DefaultSelection<Prisma.$ProjectAssignmentHistoryPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  ADMIN: 'ADMIN',
  PROJECT_MANAGER: 'PROJECT_MANAGER',
  PROJECT_COORDINATOR: 'PROJECT_COORDINATOR',
  DEVELOPER: 'DEVELOPER',
  DESIGNER: 'DESIGNER',
  HTML_DEVELOPER: 'HTML_DEVELOPER',
  QA_TESTER: 'QA_TESTER',
  CLIENT: 'CLIENT',
  PC: 'PC',
  TESTER: 'TESTER',
  PHP_TL1: 'PHP_TL1',
  PHP_TL2: 'PHP_TL2',
  REACT_TL: 'REACT_TL',
  HTML_TL: 'HTML_TL',
  PC_TL1: 'PC_TL1',
  PC_TL2: 'PC_TL2',
  DESIGN_TL: 'DESIGN_TL'
};

export type Role = (typeof Role)[keyof typeof Role]


export const Department: {
  PMO: 'PMO',
  DESIGN: 'DESIGN',
  HTML: 'HTML',
  PHP: 'PHP',
  REACT: 'REACT',
  WORDPRESS: 'WORDPRESS',
  QA: 'QA',
  DELIVERY: 'DELIVERY',
  MANAGER: 'MANAGER'
};

export type Department = (typeof Department)[keyof typeof Department]


export const ProjectCategory: {
  MOBILE_APP: 'MOBILE_APP',
  REACT_NODEJS: 'REACT_NODEJS',
  ADVANCED_PHP: 'ADVANCED_PHP',
  CUSTOM_PHP: 'CUSTOM_PHP',
  CUSTOM_WP: 'CUSTOM_WP',
  NEXT_JS: 'NEXT_JS',
  ECOMMERCE: 'ECOMMERCE',
  NORMAL_WEB_APP: 'NORMAL_WEB_APP',
  BUSINESS_COLLATERAL: 'BUSINESS_COLLATERAL',
  WOOCOMMERCE: 'WOOCOMMERCE'
};

export type ProjectCategory = (typeof ProjectCategory)[keyof typeof ProjectCategory]


export const ProjectStatus: {
  ACTIVE: 'ACTIVE',
  HOLD: 'HOLD',
  COMPLETED: 'COMPLETED',
  CANCELLED: 'CANCELLED'
};

export type ProjectStatus = (typeof ProjectStatus)[keyof typeof ProjectStatus]


export const TaskStatus: {
  TODO: 'TODO',
  IN_PROGRESS: 'IN_PROGRESS',
  IN_REVIEW: 'IN_REVIEW',
  DONE: 'DONE'
};

export type TaskStatus = (typeof TaskStatus)[keyof typeof TaskStatus]


export const Priority: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  URGENT: 'URGENT'
};

export type Priority = (typeof Priority)[keyof typeof Priority]


export const DepartmentWorkStatus: {
  NOT_STARTED: 'NOT_STARTED',
  IN_PROGRESS: 'IN_PROGRESS',
  CORRECTIONS_NEEDED: 'CORRECTIONS_NEEDED',
  COMPLETED: 'COMPLETED',
  ON_HOLD: 'ON_HOLD',
  PENDING_CLIENT_APPROVAL: 'PENDING_CLIENT_APPROVAL',
  CLIENT_REJECTED: 'CLIENT_REJECTED',
  QA_TESTING: 'QA_TESTING',
  QA_REJECTED: 'QA_REJECTED',
  BUGFIX_IN_PROGRESS: 'BUGFIX_IN_PROGRESS',
  BEFORE_LIVE_QA: 'BEFORE_LIVE_QA',
  READY_FOR_DELIVERY: 'READY_FOR_DELIVERY'
};

export type DepartmentWorkStatus = (typeof DepartmentWorkStatus)[keyof typeof DepartmentWorkStatus]


export const CorrectionStatus: {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  RESOLVED: 'RESOLVED',
  REJECTED: 'REJECTED'
};

export type CorrectionStatus = (typeof CorrectionStatus)[keyof typeof CorrectionStatus]


export const ApprovalType: {
  CLIENT_APPROVAL: 'CLIENT_APPROVAL',
  QA_APPROVAL: 'QA_APPROVAL',
  BEFORE_LIVE_QA: 'BEFORE_LIVE_QA',
  MANAGER_REVIEW: 'MANAGER_REVIEW'
};

export type ApprovalType = (typeof ApprovalType)[keyof typeof ApprovalType]


export const ApprovalStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED'
};

export type ApprovalStatus = (typeof ApprovalStatus)[keyof typeof ApprovalStatus]


export const QAType: {
  HTML_QA: 'HTML_QA',
  DEV_QA: 'DEV_QA',
  BEFORE_LIVE_QA: 'BEFORE_LIVE_QA'
};

export type QAType = (typeof QAType)[keyof typeof QAType]


export const QAStatus: {
  IN_PROGRESS: 'IN_PROGRESS',
  PASSED: 'PASSED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

export type QAStatus = (typeof QAStatus)[keyof typeof QAStatus]


export const BugSeverity: {
  LOW: 'LOW',
  MEDIUM: 'MEDIUM',
  HIGH: 'HIGH',
  CRITICAL: 'CRITICAL'
};

export type BugSeverity = (typeof BugSeverity)[keyof typeof BugSeverity]


export const BugStatus: {
  OPEN: 'OPEN',
  IN_PROGRESS: 'IN_PROGRESS',
  FIXED: 'FIXED',
  VERIFIED: 'VERIFIED',
  CLOSED: 'CLOSED'
};

export type BugStatus = (typeof BugStatus)[keyof typeof BugStatus]


export const ProjectAssignmentType: {
  PROJECT_COORDINATOR: 'PROJECT_COORDINATOR',
  PC_TEAM_LEAD: 'PC_TEAM_LEAD'
};

export type ProjectAssignmentType = (typeof ProjectAssignmentType)[keyof typeof ProjectAssignmentType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type Department = $Enums.Department

export const Department: typeof $Enums.Department

export type ProjectCategory = $Enums.ProjectCategory

export const ProjectCategory: typeof $Enums.ProjectCategory

export type ProjectStatus = $Enums.ProjectStatus

export const ProjectStatus: typeof $Enums.ProjectStatus

export type TaskStatus = $Enums.TaskStatus

export const TaskStatus: typeof $Enums.TaskStatus

export type Priority = $Enums.Priority

export const Priority: typeof $Enums.Priority

export type DepartmentWorkStatus = $Enums.DepartmentWorkStatus

export const DepartmentWorkStatus: typeof $Enums.DepartmentWorkStatus

export type CorrectionStatus = $Enums.CorrectionStatus

export const CorrectionStatus: typeof $Enums.CorrectionStatus

export type ApprovalType = $Enums.ApprovalType

export const ApprovalType: typeof $Enums.ApprovalType

export type ApprovalStatus = $Enums.ApprovalStatus

export const ApprovalStatus: typeof $Enums.ApprovalStatus

export type QAType = $Enums.QAType

export const QAType: typeof $Enums.QAType

export type QAStatus = $Enums.QAStatus

export const QAStatus: typeof $Enums.QAStatus

export type BugSeverity = $Enums.BugSeverity

export const BugSeverity: typeof $Enums.BugSeverity

export type BugStatus = $Enums.BugStatus

export const BugStatus: typeof $Enums.BugStatus

export type ProjectAssignmentType = $Enums.ProjectAssignmentType

export const ProjectAssignmentType: typeof $Enums.ProjectAssignmentType

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.project`: Exposes CRUD operations for the **Project** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Projects
    * const projects = await prisma.project.findMany()
    * ```
    */
  get project(): Prisma.ProjectDelegate<ExtArgs>;

  /**
   * `prisma.task`: Exposes CRUD operations for the **Task** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tasks
    * const tasks = await prisma.task.findMany()
    * ```
    */
  get task(): Prisma.TaskDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.customField`: Exposes CRUD operations for the **CustomField** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomFields
    * const customFields = await prisma.customField.findMany()
    * ```
    */
  get customField(): Prisma.CustomFieldDelegate<ExtArgs>;

  /**
   * `prisma.projectDepartmentHistory`: Exposes CRUD operations for the **ProjectDepartmentHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectDepartmentHistories
    * const projectDepartmentHistories = await prisma.projectDepartmentHistory.findMany()
    * ```
    */
  get projectDepartmentHistory(): Prisma.ProjectDepartmentHistoryDelegate<ExtArgs>;

  /**
   * `prisma.departmentCorrection`: Exposes CRUD operations for the **DepartmentCorrection** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepartmentCorrections
    * const departmentCorrections = await prisma.departmentCorrection.findMany()
    * ```
    */
  get departmentCorrection(): Prisma.DepartmentCorrectionDelegate<ExtArgs>;

  /**
   * `prisma.workflowApproval`: Exposes CRUD operations for the **WorkflowApproval** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WorkflowApprovals
    * const workflowApprovals = await prisma.workflowApproval.findMany()
    * ```
    */
  get workflowApproval(): Prisma.WorkflowApprovalDelegate<ExtArgs>;

  /**
   * `prisma.qATestingRound`: Exposes CRUD operations for the **QATestingRound** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QATestingRounds
    * const qATestingRounds = await prisma.qATestingRound.findMany()
    * ```
    */
  get qATestingRound(): Prisma.QATestingRoundDelegate<ExtArgs>;

  /**
   * `prisma.qABug`: Exposes CRUD operations for the **QABug** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QABugs
    * const qABugs = await prisma.qABug.findMany()
    * ```
    */
  get qABug(): Prisma.QABugDelegate<ExtArgs>;

  /**
   * `prisma.departmentMaster`: Exposes CRUD operations for the **DepartmentMaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepartmentMasters
    * const departmentMasters = await prisma.departmentMaster.findMany()
    * ```
    */
  get departmentMaster(): Prisma.DepartmentMasterDelegate<ExtArgs>;

  /**
   * `prisma.roleMaster`: Exposes CRUD operations for the **RoleMaster** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more RoleMasters
    * const roleMasters = await prisma.roleMaster.findMany()
    * ```
    */
  get roleMaster(): Prisma.RoleMasterDelegate<ExtArgs>;

  /**
   * `prisma.projectAssignmentHistory`: Exposes CRUD operations for the **ProjectAssignmentHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProjectAssignmentHistories
    * const projectAssignmentHistories = await prisma.projectAssignmentHistory.findMany()
    * ```
    */
  get projectAssignmentHistory(): Prisma.ProjectAssignmentHistoryDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Project: 'Project',
    Task: 'Task',
    Comment: 'Comment',
    CustomField: 'CustomField',
    ProjectDepartmentHistory: 'ProjectDepartmentHistory',
    DepartmentCorrection: 'DepartmentCorrection',
    WorkflowApproval: 'WorkflowApproval',
    QATestingRound: 'QATestingRound',
    QABug: 'QABug',
    DepartmentMaster: 'DepartmentMaster',
    RoleMaster: 'RoleMaster',
    ProjectAssignmentHistory: 'ProjectAssignmentHistory'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "project" | "task" | "comment" | "customField" | "projectDepartmentHistory" | "departmentCorrection" | "workflowApproval" | "qATestingRound" | "qABug" | "departmentMaster" | "roleMaster" | "projectAssignmentHistory"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Project: {
        payload: Prisma.$ProjectPayload<ExtArgs>
        fields: Prisma.ProjectFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findFirst: {
            args: Prisma.ProjectFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          findMany: {
            args: Prisma.ProjectFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          create: {
            args: Prisma.ProjectCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          createMany: {
            args: Prisma.ProjectCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>[]
          }
          delete: {
            args: Prisma.ProjectDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          update: {
            args: Prisma.ProjectUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectPayload>
          }
          aggregate: {
            args: Prisma.ProjectAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProject>
          }
          groupBy: {
            args: Prisma.ProjectGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectCountAggregateOutputType> | number
          }
        }
      }
      Task: {
        payload: Prisma.$TaskPayload<ExtArgs>
        fields: Prisma.TaskFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TaskFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TaskFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findFirst: {
            args: Prisma.TaskFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TaskFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          findMany: {
            args: Prisma.TaskFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          create: {
            args: Prisma.TaskCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          createMany: {
            args: Prisma.TaskCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TaskCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>[]
          }
          delete: {
            args: Prisma.TaskDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          update: {
            args: Prisma.TaskUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          deleteMany: {
            args: Prisma.TaskDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TaskUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TaskUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TaskPayload>
          }
          aggregate: {
            args: Prisma.TaskAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTask>
          }
          groupBy: {
            args: Prisma.TaskGroupByArgs<ExtArgs>
            result: $Utils.Optional<TaskGroupByOutputType>[]
          }
          count: {
            args: Prisma.TaskCountArgs<ExtArgs>
            result: $Utils.Optional<TaskCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CommentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      CustomField: {
        payload: Prisma.$CustomFieldPayload<ExtArgs>
        fields: Prisma.CustomFieldFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomFieldFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomFieldFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload>
          }
          findFirst: {
            args: Prisma.CustomFieldFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomFieldFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload>
          }
          findMany: {
            args: Prisma.CustomFieldFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload>[]
          }
          create: {
            args: Prisma.CustomFieldCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload>
          }
          createMany: {
            args: Prisma.CustomFieldCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomFieldCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload>[]
          }
          delete: {
            args: Prisma.CustomFieldDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload>
          }
          update: {
            args: Prisma.CustomFieldUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload>
          }
          deleteMany: {
            args: Prisma.CustomFieldDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomFieldUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CustomFieldUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomFieldPayload>
          }
          aggregate: {
            args: Prisma.CustomFieldAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomField>
          }
          groupBy: {
            args: Prisma.CustomFieldGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomFieldGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomFieldCountArgs<ExtArgs>
            result: $Utils.Optional<CustomFieldCountAggregateOutputType> | number
          }
        }
      }
      ProjectDepartmentHistory: {
        payload: Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>
        fields: Prisma.ProjectDepartmentHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectDepartmentHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectDepartmentHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload>
          }
          findFirst: {
            args: Prisma.ProjectDepartmentHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectDepartmentHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload>
          }
          findMany: {
            args: Prisma.ProjectDepartmentHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload>[]
          }
          create: {
            args: Prisma.ProjectDepartmentHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload>
          }
          createMany: {
            args: Prisma.ProjectDepartmentHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectDepartmentHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload>[]
          }
          delete: {
            args: Prisma.ProjectDepartmentHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload>
          }
          update: {
            args: Prisma.ProjectDepartmentHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ProjectDepartmentHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectDepartmentHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectDepartmentHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectDepartmentHistoryPayload>
          }
          aggregate: {
            args: Prisma.ProjectDepartmentHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectDepartmentHistory>
          }
          groupBy: {
            args: Prisma.ProjectDepartmentHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectDepartmentHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectDepartmentHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectDepartmentHistoryCountAggregateOutputType> | number
          }
        }
      }
      DepartmentCorrection: {
        payload: Prisma.$DepartmentCorrectionPayload<ExtArgs>
        fields: Prisma.DepartmentCorrectionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentCorrectionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentCorrectionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload>
          }
          findFirst: {
            args: Prisma.DepartmentCorrectionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentCorrectionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload>
          }
          findMany: {
            args: Prisma.DepartmentCorrectionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload>[]
          }
          create: {
            args: Prisma.DepartmentCorrectionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload>
          }
          createMany: {
            args: Prisma.DepartmentCorrectionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCorrectionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload>[]
          }
          delete: {
            args: Prisma.DepartmentCorrectionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload>
          }
          update: {
            args: Prisma.DepartmentCorrectionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentCorrectionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentCorrectionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentCorrectionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentCorrectionPayload>
          }
          aggregate: {
            args: Prisma.DepartmentCorrectionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartmentCorrection>
          }
          groupBy: {
            args: Prisma.DepartmentCorrectionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCorrectionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCorrectionCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCorrectionCountAggregateOutputType> | number
          }
        }
      }
      WorkflowApproval: {
        payload: Prisma.$WorkflowApprovalPayload<ExtArgs>
        fields: Prisma.WorkflowApprovalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WorkflowApprovalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WorkflowApprovalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload>
          }
          findFirst: {
            args: Prisma.WorkflowApprovalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WorkflowApprovalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload>
          }
          findMany: {
            args: Prisma.WorkflowApprovalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload>[]
          }
          create: {
            args: Prisma.WorkflowApprovalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload>
          }
          createMany: {
            args: Prisma.WorkflowApprovalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WorkflowApprovalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload>[]
          }
          delete: {
            args: Prisma.WorkflowApprovalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload>
          }
          update: {
            args: Prisma.WorkflowApprovalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload>
          }
          deleteMany: {
            args: Prisma.WorkflowApprovalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WorkflowApprovalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.WorkflowApprovalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WorkflowApprovalPayload>
          }
          aggregate: {
            args: Prisma.WorkflowApprovalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWorkflowApproval>
          }
          groupBy: {
            args: Prisma.WorkflowApprovalGroupByArgs<ExtArgs>
            result: $Utils.Optional<WorkflowApprovalGroupByOutputType>[]
          }
          count: {
            args: Prisma.WorkflowApprovalCountArgs<ExtArgs>
            result: $Utils.Optional<WorkflowApprovalCountAggregateOutputType> | number
          }
        }
      }
      QATestingRound: {
        payload: Prisma.$QATestingRoundPayload<ExtArgs>
        fields: Prisma.QATestingRoundFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QATestingRoundFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QATestingRoundFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload>
          }
          findFirst: {
            args: Prisma.QATestingRoundFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QATestingRoundFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload>
          }
          findMany: {
            args: Prisma.QATestingRoundFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload>[]
          }
          create: {
            args: Prisma.QATestingRoundCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload>
          }
          createMany: {
            args: Prisma.QATestingRoundCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QATestingRoundCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload>[]
          }
          delete: {
            args: Prisma.QATestingRoundDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload>
          }
          update: {
            args: Prisma.QATestingRoundUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload>
          }
          deleteMany: {
            args: Prisma.QATestingRoundDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QATestingRoundUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QATestingRoundUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QATestingRoundPayload>
          }
          aggregate: {
            args: Prisma.QATestingRoundAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQATestingRound>
          }
          groupBy: {
            args: Prisma.QATestingRoundGroupByArgs<ExtArgs>
            result: $Utils.Optional<QATestingRoundGroupByOutputType>[]
          }
          count: {
            args: Prisma.QATestingRoundCountArgs<ExtArgs>
            result: $Utils.Optional<QATestingRoundCountAggregateOutputType> | number
          }
        }
      }
      QABug: {
        payload: Prisma.$QABugPayload<ExtArgs>
        fields: Prisma.QABugFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QABugFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QABugFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload>
          }
          findFirst: {
            args: Prisma.QABugFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QABugFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload>
          }
          findMany: {
            args: Prisma.QABugFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload>[]
          }
          create: {
            args: Prisma.QABugCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload>
          }
          createMany: {
            args: Prisma.QABugCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QABugCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload>[]
          }
          delete: {
            args: Prisma.QABugDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload>
          }
          update: {
            args: Prisma.QABugUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload>
          }
          deleteMany: {
            args: Prisma.QABugDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QABugUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QABugUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QABugPayload>
          }
          aggregate: {
            args: Prisma.QABugAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQABug>
          }
          groupBy: {
            args: Prisma.QABugGroupByArgs<ExtArgs>
            result: $Utils.Optional<QABugGroupByOutputType>[]
          }
          count: {
            args: Prisma.QABugCountArgs<ExtArgs>
            result: $Utils.Optional<QABugCountAggregateOutputType> | number
          }
        }
      }
      DepartmentMaster: {
        payload: Prisma.$DepartmentMasterPayload<ExtArgs>
        fields: Prisma.DepartmentMasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentMasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentMasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload>
          }
          findFirst: {
            args: Prisma.DepartmentMasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentMasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload>
          }
          findMany: {
            args: Prisma.DepartmentMasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload>[]
          }
          create: {
            args: Prisma.DepartmentMasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload>
          }
          createMany: {
            args: Prisma.DepartmentMasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentMasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload>[]
          }
          delete: {
            args: Prisma.DepartmentMasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload>
          }
          update: {
            args: Prisma.DepartmentMasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentMasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentMasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.DepartmentMasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentMasterPayload>
          }
          aggregate: {
            args: Prisma.DepartmentMasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartmentMaster>
          }
          groupBy: {
            args: Prisma.DepartmentMasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentMasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentMasterCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentMasterCountAggregateOutputType> | number
          }
        }
      }
      RoleMaster: {
        payload: Prisma.$RoleMasterPayload<ExtArgs>
        fields: Prisma.RoleMasterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleMasterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleMasterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload>
          }
          findFirst: {
            args: Prisma.RoleMasterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleMasterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload>
          }
          findMany: {
            args: Prisma.RoleMasterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload>[]
          }
          create: {
            args: Prisma.RoleMasterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload>
          }
          createMany: {
            args: Prisma.RoleMasterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleMasterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload>[]
          }
          delete: {
            args: Prisma.RoleMasterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload>
          }
          update: {
            args: Prisma.RoleMasterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload>
          }
          deleteMany: {
            args: Prisma.RoleMasterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleMasterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.RoleMasterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RoleMasterPayload>
          }
          aggregate: {
            args: Prisma.RoleMasterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRoleMaster>
          }
          groupBy: {
            args: Prisma.RoleMasterGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleMasterGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleMasterCountArgs<ExtArgs>
            result: $Utils.Optional<RoleMasterCountAggregateOutputType> | number
          }
        }
      }
      ProjectAssignmentHistory: {
        payload: Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>
        fields: Prisma.ProjectAssignmentHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProjectAssignmentHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProjectAssignmentHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload>
          }
          findFirst: {
            args: Prisma.ProjectAssignmentHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProjectAssignmentHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload>
          }
          findMany: {
            args: Prisma.ProjectAssignmentHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload>[]
          }
          create: {
            args: Prisma.ProjectAssignmentHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload>
          }
          createMany: {
            args: Prisma.ProjectAssignmentHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProjectAssignmentHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload>[]
          }
          delete: {
            args: Prisma.ProjectAssignmentHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload>
          }
          update: {
            args: Prisma.ProjectAssignmentHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ProjectAssignmentHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProjectAssignmentHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProjectAssignmentHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProjectAssignmentHistoryPayload>
          }
          aggregate: {
            args: Prisma.ProjectAssignmentHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProjectAssignmentHistory>
          }
          groupBy: {
            args: Prisma.ProjectAssignmentHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProjectAssignmentHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProjectAssignmentHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ProjectAssignmentHistoryCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    comments: number
    assignedCorrections: number
    requestedCorrections: number
    departmentTransitions: number
    departmentPermissions: number
    ownedProjects: number
    coordinatedProjects: number
    pcTeamLeadProjects: number
    bugAssignments: number
    qaTestingRounds: number
    assignedTasks: number
    approvalRequests: number
    approvalReviews: number
    assignmentHistory: number
    assignmentsMade: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    assignedCorrections?: boolean | UserCountOutputTypeCountAssignedCorrectionsArgs
    requestedCorrections?: boolean | UserCountOutputTypeCountRequestedCorrectionsArgs
    departmentTransitions?: boolean | UserCountOutputTypeCountDepartmentTransitionsArgs
    departmentPermissions?: boolean | UserCountOutputTypeCountDepartmentPermissionsArgs
    ownedProjects?: boolean | UserCountOutputTypeCountOwnedProjectsArgs
    coordinatedProjects?: boolean | UserCountOutputTypeCountCoordinatedProjectsArgs
    pcTeamLeadProjects?: boolean | UserCountOutputTypeCountPcTeamLeadProjectsArgs
    bugAssignments?: boolean | UserCountOutputTypeCountBugAssignmentsArgs
    qaTestingRounds?: boolean | UserCountOutputTypeCountQaTestingRoundsArgs
    assignedTasks?: boolean | UserCountOutputTypeCountAssignedTasksArgs
    approvalRequests?: boolean | UserCountOutputTypeCountApprovalRequestsArgs
    approvalReviews?: boolean | UserCountOutputTypeCountApprovalReviewsArgs
    assignmentHistory?: boolean | UserCountOutputTypeCountAssignmentHistoryArgs
    assignmentsMade?: boolean | UserCountOutputTypeCountAssignmentsMadeArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedCorrectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentCorrectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRequestedCorrectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentCorrectionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDepartmentTransitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectDepartmentHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDepartmentPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectDepartmentHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOwnedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCoordinatedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPcTeamLeadProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBugAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QABugWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQaTestingRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QATestingRoundWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovalRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowApprovalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountApprovalReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowApprovalWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectAssignmentHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAssignmentsMadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectAssignmentHistoryWhereInput
  }


  /**
   * Count Type ProjectCountOutputType
   */

  export type ProjectCountOutputType = {
    comments: number
    customFields: number
    departmentHistory: number
    tasks: number
    assignmentHistory: number
  }

  export type ProjectCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | ProjectCountOutputTypeCountCommentsArgs
    customFields?: boolean | ProjectCountOutputTypeCountCustomFieldsArgs
    departmentHistory?: boolean | ProjectCountOutputTypeCountDepartmentHistoryArgs
    tasks?: boolean | ProjectCountOutputTypeCountTasksArgs
    assignmentHistory?: boolean | ProjectCountOutputTypeCountAssignmentHistoryArgs
  }

  // Custom InputTypes
  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectCountOutputType
     */
    select?: ProjectCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountCustomFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomFieldWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountDepartmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectDepartmentHistoryWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
  }

  /**
   * ProjectCountOutputType without action
   */
  export type ProjectCountOutputTypeCountAssignmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectAssignmentHistoryWhereInput
  }


  /**
   * Count Type TaskCountOutputType
   */

  export type TaskCountOutputType = {
    comments: number
  }

  export type TaskCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | TaskCountOutputTypeCountCommentsArgs
  }

  // Custom InputTypes
  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TaskCountOutputType
     */
    select?: TaskCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TaskCountOutputType without action
   */
  export type TaskCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }


  /**
   * Count Type ProjectDepartmentHistoryCountOutputType
   */

  export type ProjectDepartmentHistoryCountOutputType = {
    corrections: number
    qaRounds: number
    approvals: number
  }

  export type ProjectDepartmentHistoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corrections?: boolean | ProjectDepartmentHistoryCountOutputTypeCountCorrectionsArgs
    qaRounds?: boolean | ProjectDepartmentHistoryCountOutputTypeCountQaRoundsArgs
    approvals?: boolean | ProjectDepartmentHistoryCountOutputTypeCountApprovalsArgs
  }

  // Custom InputTypes
  /**
   * ProjectDepartmentHistoryCountOutputType without action
   */
  export type ProjectDepartmentHistoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistoryCountOutputType
     */
    select?: ProjectDepartmentHistoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProjectDepartmentHistoryCountOutputType without action
   */
  export type ProjectDepartmentHistoryCountOutputTypeCountCorrectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentCorrectionWhereInput
  }

  /**
   * ProjectDepartmentHistoryCountOutputType without action
   */
  export type ProjectDepartmentHistoryCountOutputTypeCountQaRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QATestingRoundWhereInput
  }

  /**
   * ProjectDepartmentHistoryCountOutputType without action
   */
  export type ProjectDepartmentHistoryCountOutputTypeCountApprovalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowApprovalWhereInput
  }


  /**
   * Count Type QATestingRoundCountOutputType
   */

  export type QATestingRoundCountOutputType = {
    bugs: number
  }

  export type QATestingRoundCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bugs?: boolean | QATestingRoundCountOutputTypeCountBugsArgs
  }

  // Custom InputTypes
  /**
   * QATestingRoundCountOutputType without action
   */
  export type QATestingRoundCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRoundCountOutputType
     */
    select?: QATestingRoundCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * QATestingRoundCountOutputType without action
   */
  export type QATestingRoundCountOutputTypeCountBugsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QABugWhereInput
  }


  /**
   * Count Type DepartmentMasterCountOutputType
   */

  export type DepartmentMasterCountOutputType = {
    children: number
    roles: number
    users: number
  }

  export type DepartmentMasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | DepartmentMasterCountOutputTypeCountChildrenArgs
    roles?: boolean | DepartmentMasterCountOutputTypeCountRolesArgs
    users?: boolean | DepartmentMasterCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * DepartmentMasterCountOutputType without action
   */
  export type DepartmentMasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMasterCountOutputType
     */
    select?: DepartmentMasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentMasterCountOutputType without action
   */
  export type DepartmentMasterCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentMasterWhereInput
  }

  /**
   * DepartmentMasterCountOutputType without action
   */
  export type DepartmentMasterCountOutputTypeCountRolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleMasterWhereInput
  }

  /**
   * DepartmentMasterCountOutputType without action
   */
  export type DepartmentMasterCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type RoleMasterCountOutputType
   */

  export type RoleMasterCountOutputType = {
    users: number
  }

  export type RoleMasterCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleMasterCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleMasterCountOutputType without action
   */
  export type RoleMasterCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMasterCountOutputType
     */
    select?: RoleMasterCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleMasterCountOutputType without action
   */
  export type RoleMasterCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    department: $Enums.Department | null
    roleId: string | null
    departmentId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    password: string | null
    role: $Enums.Role | null
    avatar: string | null
    createdAt: Date | null
    updatedAt: Date | null
    department: $Enums.Department | null
    roleId: string | null
    departmentId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    password: number
    role: number
    avatar: number
    createdAt: number
    updatedAt: number
    department: number
    roleId: number
    departmentId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    department?: true
    roleId?: true
    departmentId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    department?: true
    roleId?: true
    departmentId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    password?: true
    role?: true
    avatar?: true
    createdAt?: true
    updatedAt?: true
    department?: true
    roleId?: true
    departmentId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    password: string
    role: $Enums.Role
    avatar: string | null
    createdAt: Date
    updatedAt: Date
    department: $Enums.Department | null
    roleId: string | null
    departmentId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean
    roleId?: boolean
    departmentId?: boolean
    roleMaster?: boolean | User$roleMasterArgs<ExtArgs>
    departmentMaster?: boolean | User$departmentMasterArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    assignedCorrections?: boolean | User$assignedCorrectionsArgs<ExtArgs>
    requestedCorrections?: boolean | User$requestedCorrectionsArgs<ExtArgs>
    departmentTransitions?: boolean | User$departmentTransitionsArgs<ExtArgs>
    departmentPermissions?: boolean | User$departmentPermissionsArgs<ExtArgs>
    ownedProjects?: boolean | User$ownedProjectsArgs<ExtArgs>
    coordinatedProjects?: boolean | User$coordinatedProjectsArgs<ExtArgs>
    pcTeamLeadProjects?: boolean | User$pcTeamLeadProjectsArgs<ExtArgs>
    bugAssignments?: boolean | User$bugAssignmentsArgs<ExtArgs>
    qaTestingRounds?: boolean | User$qaTestingRoundsArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    approvalRequests?: boolean | User$approvalRequestsArgs<ExtArgs>
    approvalReviews?: boolean | User$approvalReviewsArgs<ExtArgs>
    assignmentHistory?: boolean | User$assignmentHistoryArgs<ExtArgs>
    assignmentsMade?: boolean | User$assignmentsMadeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean
    roleId?: boolean
    departmentId?: boolean
    roleMaster?: boolean | User$roleMasterArgs<ExtArgs>
    departmentMaster?: boolean | User$departmentMasterArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    role?: boolean
    avatar?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean
    roleId?: boolean
    departmentId?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roleMaster?: boolean | User$roleMasterArgs<ExtArgs>
    departmentMaster?: boolean | User$departmentMasterArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    assignedCorrections?: boolean | User$assignedCorrectionsArgs<ExtArgs>
    requestedCorrections?: boolean | User$requestedCorrectionsArgs<ExtArgs>
    departmentTransitions?: boolean | User$departmentTransitionsArgs<ExtArgs>
    departmentPermissions?: boolean | User$departmentPermissionsArgs<ExtArgs>
    ownedProjects?: boolean | User$ownedProjectsArgs<ExtArgs>
    coordinatedProjects?: boolean | User$coordinatedProjectsArgs<ExtArgs>
    pcTeamLeadProjects?: boolean | User$pcTeamLeadProjectsArgs<ExtArgs>
    bugAssignments?: boolean | User$bugAssignmentsArgs<ExtArgs>
    qaTestingRounds?: boolean | User$qaTestingRoundsArgs<ExtArgs>
    assignedTasks?: boolean | User$assignedTasksArgs<ExtArgs>
    approvalRequests?: boolean | User$approvalRequestsArgs<ExtArgs>
    approvalReviews?: boolean | User$approvalReviewsArgs<ExtArgs>
    assignmentHistory?: boolean | User$assignmentHistoryArgs<ExtArgs>
    assignmentsMade?: boolean | User$assignmentsMadeArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    roleMaster?: boolean | User$roleMasterArgs<ExtArgs>
    departmentMaster?: boolean | User$departmentMasterArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      roleMaster: Prisma.$RoleMasterPayload<ExtArgs> | null
      departmentMaster: Prisma.$DepartmentMasterPayload<ExtArgs> | null
      comments: Prisma.$CommentPayload<ExtArgs>[]
      assignedCorrections: Prisma.$DepartmentCorrectionPayload<ExtArgs>[]
      requestedCorrections: Prisma.$DepartmentCorrectionPayload<ExtArgs>[]
      departmentTransitions: Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>[]
      departmentPermissions: Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>[]
      ownedProjects: Prisma.$ProjectPayload<ExtArgs>[]
      coordinatedProjects: Prisma.$ProjectPayload<ExtArgs>[]
      pcTeamLeadProjects: Prisma.$ProjectPayload<ExtArgs>[]
      bugAssignments: Prisma.$QABugPayload<ExtArgs>[]
      qaTestingRounds: Prisma.$QATestingRoundPayload<ExtArgs>[]
      assignedTasks: Prisma.$TaskPayload<ExtArgs>[]
      approvalRequests: Prisma.$WorkflowApprovalPayload<ExtArgs>[]
      approvalReviews: Prisma.$WorkflowApprovalPayload<ExtArgs>[]
      assignmentHistory: Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>[]
      assignmentsMade: Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      password: string
      role: $Enums.Role
      avatar: string | null
      createdAt: Date
      updatedAt: Date
      department: $Enums.Department | null
      roleId: string | null
      departmentId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    roleMaster<T extends User$roleMasterArgs<ExtArgs> = {}>(args?: Subset<T, User$roleMasterArgs<ExtArgs>>): Prisma__RoleMasterClient<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    departmentMaster<T extends User$departmentMasterArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentMasterArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    assignedCorrections<T extends User$assignedCorrectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedCorrectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "findMany"> | Null>
    requestedCorrections<T extends User$requestedCorrectionsArgs<ExtArgs> = {}>(args?: Subset<T, User$requestedCorrectionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "findMany"> | Null>
    departmentTransitions<T extends User$departmentTransitionsArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentTransitionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    departmentPermissions<T extends User$departmentPermissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentPermissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    ownedProjects<T extends User$ownedProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$ownedProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    coordinatedProjects<T extends User$coordinatedProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$coordinatedProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    pcTeamLeadProjects<T extends User$pcTeamLeadProjectsArgs<ExtArgs> = {}>(args?: Subset<T, User$pcTeamLeadProjectsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany"> | Null>
    bugAssignments<T extends User$bugAssignmentsArgs<ExtArgs> = {}>(args?: Subset<T, User$bugAssignmentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "findMany"> | Null>
    qaTestingRounds<T extends User$qaTestingRoundsArgs<ExtArgs> = {}>(args?: Subset<T, User$qaTestingRoundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "findMany"> | Null>
    assignedTasks<T extends User$assignedTasksArgs<ExtArgs> = {}>(args?: Subset<T, User$assignedTasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    approvalRequests<T extends User$approvalRequestsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvalRequestsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "findMany"> | Null>
    approvalReviews<T extends User$approvalReviewsArgs<ExtArgs> = {}>(args?: Subset<T, User$approvalReviewsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "findMany"> | Null>
    assignmentHistory<T extends User$assignmentHistoryArgs<ExtArgs> = {}>(args?: Subset<T, User$assignmentHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    assignmentsMade<T extends User$assignmentsMadeArgs<ExtArgs> = {}>(args?: Subset<T, User$assignmentsMadeArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly department: FieldRef<"User", 'Department'>
    readonly roleId: FieldRef<"User", 'String'>
    readonly departmentId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.roleMaster
   */
  export type User$roleMasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    where?: RoleMasterWhereInput
  }

  /**
   * User.departmentMaster
   */
  export type User$departmentMasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    where?: DepartmentMasterWhereInput
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.assignedCorrections
   */
  export type User$assignedCorrectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    where?: DepartmentCorrectionWhereInput
    orderBy?: DepartmentCorrectionOrderByWithRelationInput | DepartmentCorrectionOrderByWithRelationInput[]
    cursor?: DepartmentCorrectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentCorrectionScalarFieldEnum | DepartmentCorrectionScalarFieldEnum[]
  }

  /**
   * User.requestedCorrections
   */
  export type User$requestedCorrectionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    where?: DepartmentCorrectionWhereInput
    orderBy?: DepartmentCorrectionOrderByWithRelationInput | DepartmentCorrectionOrderByWithRelationInput[]
    cursor?: DepartmentCorrectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentCorrectionScalarFieldEnum | DepartmentCorrectionScalarFieldEnum[]
  }

  /**
   * User.departmentTransitions
   */
  export type User$departmentTransitionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    where?: ProjectDepartmentHistoryWhereInput
    orderBy?: ProjectDepartmentHistoryOrderByWithRelationInput | ProjectDepartmentHistoryOrderByWithRelationInput[]
    cursor?: ProjectDepartmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectDepartmentHistoryScalarFieldEnum | ProjectDepartmentHistoryScalarFieldEnum[]
  }

  /**
   * User.departmentPermissions
   */
  export type User$departmentPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    where?: ProjectDepartmentHistoryWhereInput
    orderBy?: ProjectDepartmentHistoryOrderByWithRelationInput | ProjectDepartmentHistoryOrderByWithRelationInput[]
    cursor?: ProjectDepartmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectDepartmentHistoryScalarFieldEnum | ProjectDepartmentHistoryScalarFieldEnum[]
  }

  /**
   * User.ownedProjects
   */
  export type User$ownedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.coordinatedProjects
   */
  export type User$coordinatedProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.pcTeamLeadProjects
   */
  export type User$pcTeamLeadProjectsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    cursor?: ProjectWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * User.bugAssignments
   */
  export type User$bugAssignmentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    where?: QABugWhereInput
    orderBy?: QABugOrderByWithRelationInput | QABugOrderByWithRelationInput[]
    cursor?: QABugWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QABugScalarFieldEnum | QABugScalarFieldEnum[]
  }

  /**
   * User.qaTestingRounds
   */
  export type User$qaTestingRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    where?: QATestingRoundWhereInput
    orderBy?: QATestingRoundOrderByWithRelationInput | QATestingRoundOrderByWithRelationInput[]
    cursor?: QATestingRoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QATestingRoundScalarFieldEnum | QATestingRoundScalarFieldEnum[]
  }

  /**
   * User.assignedTasks
   */
  export type User$assignedTasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * User.approvalRequests
   */
  export type User$approvalRequestsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    where?: WorkflowApprovalWhereInput
    orderBy?: WorkflowApprovalOrderByWithRelationInput | WorkflowApprovalOrderByWithRelationInput[]
    cursor?: WorkflowApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowApprovalScalarFieldEnum | WorkflowApprovalScalarFieldEnum[]
  }

  /**
   * User.approvalReviews
   */
  export type User$approvalReviewsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    where?: WorkflowApprovalWhereInput
    orderBy?: WorkflowApprovalOrderByWithRelationInput | WorkflowApprovalOrderByWithRelationInput[]
    cursor?: WorkflowApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowApprovalScalarFieldEnum | WorkflowApprovalScalarFieldEnum[]
  }

  /**
   * User.assignmentHistory
   */
  export type User$assignmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    where?: ProjectAssignmentHistoryWhereInput
    orderBy?: ProjectAssignmentHistoryOrderByWithRelationInput | ProjectAssignmentHistoryOrderByWithRelationInput[]
    cursor?: ProjectAssignmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectAssignmentHistoryScalarFieldEnum | ProjectAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * User.assignmentsMade
   */
  export type User$assignmentsMadeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    where?: ProjectAssignmentHistoryWhereInput
    orderBy?: ProjectAssignmentHistoryOrderByWithRelationInput | ProjectAssignmentHistoryOrderByWithRelationInput[]
    cursor?: ProjectAssignmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectAssignmentHistoryScalarFieldEnum | ProjectAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Project
   */

  export type AggregateProject = {
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  export type ProjectAvgAggregateOutputType = {
    pagesCount: number | null
    monthsPassed: number | null
  }

  export type ProjectSumAggregateOutputType = {
    pagesCount: number | null
    monthsPassed: number | null
  }

  export type ProjectMinAggregateOutputType = {
    id: string | null
    name: string | null
    office: string | null
    category: $Enums.ProjectCategory | null
    pagesCount: number | null
    targetDate: Date | null
    status: $Enums.ProjectStatus | null
    ownerId: string | null
    clientName: string | null
    observations: string | null
    monthsPassed: number | null
    startDate: Date | null
    deviationReason: string | null
    dependency: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    currentDepartment: $Enums.Department | null
    nextDepartment: $Enums.Department | null
    projectCode: string | null
    projectCoordinatorId: string | null
    pcTeamLeadId: string | null
  }

  export type ProjectMaxAggregateOutputType = {
    id: string | null
    name: string | null
    office: string | null
    category: $Enums.ProjectCategory | null
    pagesCount: number | null
    targetDate: Date | null
    status: $Enums.ProjectStatus | null
    ownerId: string | null
    clientName: string | null
    observations: string | null
    monthsPassed: number | null
    startDate: Date | null
    deviationReason: string | null
    dependency: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    currentDepartment: $Enums.Department | null
    nextDepartment: $Enums.Department | null
    projectCode: string | null
    projectCoordinatorId: string | null
    pcTeamLeadId: string | null
  }

  export type ProjectCountAggregateOutputType = {
    id: number
    name: number
    office: number
    category: number
    pagesCount: number
    targetDate: number
    status: number
    ownerId: number
    clientName: number
    observations: number
    monthsPassed: number
    startDate: number
    deviationReason: number
    dependency: number
    createdAt: number
    updatedAt: number
    currentDepartment: number
    nextDepartment: number
    projectCode: number
    projectCoordinatorId: number
    pcTeamLeadId: number
    _all: number
  }


  export type ProjectAvgAggregateInputType = {
    pagesCount?: true
    monthsPassed?: true
  }

  export type ProjectSumAggregateInputType = {
    pagesCount?: true
    monthsPassed?: true
  }

  export type ProjectMinAggregateInputType = {
    id?: true
    name?: true
    office?: true
    category?: true
    pagesCount?: true
    targetDate?: true
    status?: true
    ownerId?: true
    clientName?: true
    observations?: true
    monthsPassed?: true
    startDate?: true
    deviationReason?: true
    dependency?: true
    createdAt?: true
    updatedAt?: true
    currentDepartment?: true
    nextDepartment?: true
    projectCode?: true
    projectCoordinatorId?: true
    pcTeamLeadId?: true
  }

  export type ProjectMaxAggregateInputType = {
    id?: true
    name?: true
    office?: true
    category?: true
    pagesCount?: true
    targetDate?: true
    status?: true
    ownerId?: true
    clientName?: true
    observations?: true
    monthsPassed?: true
    startDate?: true
    deviationReason?: true
    dependency?: true
    createdAt?: true
    updatedAt?: true
    currentDepartment?: true
    nextDepartment?: true
    projectCode?: true
    projectCoordinatorId?: true
    pcTeamLeadId?: true
  }

  export type ProjectCountAggregateInputType = {
    id?: true
    name?: true
    office?: true
    category?: true
    pagesCount?: true
    targetDate?: true
    status?: true
    ownerId?: true
    clientName?: true
    observations?: true
    monthsPassed?: true
    startDate?: true
    deviationReason?: true
    dependency?: true
    createdAt?: true
    updatedAt?: true
    currentDepartment?: true
    nextDepartment?: true
    projectCode?: true
    projectCoordinatorId?: true
    pcTeamLeadId?: true
    _all?: true
  }

  export type ProjectAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Project to aggregate.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Projects
    **/
    _count?: true | ProjectCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectMaxAggregateInputType
  }

  export type GetProjectAggregateType<T extends ProjectAggregateArgs> = {
        [P in keyof T & keyof AggregateProject]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProject[P]>
      : GetScalarType<T[P], AggregateProject[P]>
  }




  export type ProjectGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectWhereInput
    orderBy?: ProjectOrderByWithAggregationInput | ProjectOrderByWithAggregationInput[]
    by: ProjectScalarFieldEnum[] | ProjectScalarFieldEnum
    having?: ProjectScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectCountAggregateInputType | true
    _avg?: ProjectAvgAggregateInputType
    _sum?: ProjectSumAggregateInputType
    _min?: ProjectMinAggregateInputType
    _max?: ProjectMaxAggregateInputType
  }

  export type ProjectGroupByOutputType = {
    id: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount: number | null
    targetDate: Date
    status: $Enums.ProjectStatus
    ownerId: string
    clientName: string | null
    observations: string | null
    monthsPassed: number
    startDate: Date
    deviationReason: string | null
    dependency: boolean
    createdAt: Date
    updatedAt: Date
    currentDepartment: $Enums.Department
    nextDepartment: $Enums.Department | null
    projectCode: string
    projectCoordinatorId: string | null
    pcTeamLeadId: string | null
    _count: ProjectCountAggregateOutputType | null
    _avg: ProjectAvgAggregateOutputType | null
    _sum: ProjectSumAggregateOutputType | null
    _min: ProjectMinAggregateOutputType | null
    _max: ProjectMaxAggregateOutputType | null
  }

  type GetProjectGroupByPayload<T extends ProjectGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectGroupByOutputType[P]>
        }
      >
    >


  export type ProjectSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    office?: boolean
    category?: boolean
    pagesCount?: boolean
    targetDate?: boolean
    status?: boolean
    ownerId?: boolean
    clientName?: boolean
    observations?: boolean
    monthsPassed?: boolean
    startDate?: boolean
    deviationReason?: boolean
    dependency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentDepartment?: boolean
    nextDepartment?: boolean
    projectCode?: boolean
    projectCoordinatorId?: boolean
    pcTeamLeadId?: boolean
    comments?: boolean | Project$commentsArgs<ExtArgs>
    customFields?: boolean | Project$customFieldsArgs<ExtArgs>
    departmentHistory?: boolean | Project$departmentHistoryArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    projectCoordinator?: boolean | Project$projectCoordinatorArgs<ExtArgs>
    pcTeamLead?: boolean | Project$pcTeamLeadArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    assignmentHistory?: boolean | Project$assignmentHistoryArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    office?: boolean
    category?: boolean
    pagesCount?: boolean
    targetDate?: boolean
    status?: boolean
    ownerId?: boolean
    clientName?: boolean
    observations?: boolean
    monthsPassed?: boolean
    startDate?: boolean
    deviationReason?: boolean
    dependency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentDepartment?: boolean
    nextDepartment?: boolean
    projectCode?: boolean
    projectCoordinatorId?: boolean
    pcTeamLeadId?: boolean
    owner?: boolean | UserDefaultArgs<ExtArgs>
    projectCoordinator?: boolean | Project$projectCoordinatorArgs<ExtArgs>
    pcTeamLead?: boolean | Project$pcTeamLeadArgs<ExtArgs>
  }, ExtArgs["result"]["project"]>

  export type ProjectSelectScalar = {
    id?: boolean
    name?: boolean
    office?: boolean
    category?: boolean
    pagesCount?: boolean
    targetDate?: boolean
    status?: boolean
    ownerId?: boolean
    clientName?: boolean
    observations?: boolean
    monthsPassed?: boolean
    startDate?: boolean
    deviationReason?: boolean
    dependency?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    currentDepartment?: boolean
    nextDepartment?: boolean
    projectCode?: boolean
    projectCoordinatorId?: boolean
    pcTeamLeadId?: boolean
  }

  export type ProjectInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | Project$commentsArgs<ExtArgs>
    customFields?: boolean | Project$customFieldsArgs<ExtArgs>
    departmentHistory?: boolean | Project$departmentHistoryArgs<ExtArgs>
    owner?: boolean | UserDefaultArgs<ExtArgs>
    projectCoordinator?: boolean | Project$projectCoordinatorArgs<ExtArgs>
    pcTeamLead?: boolean | Project$pcTeamLeadArgs<ExtArgs>
    tasks?: boolean | Project$tasksArgs<ExtArgs>
    assignmentHistory?: boolean | Project$assignmentHistoryArgs<ExtArgs>
    _count?: boolean | ProjectCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    owner?: boolean | UserDefaultArgs<ExtArgs>
    projectCoordinator?: boolean | Project$projectCoordinatorArgs<ExtArgs>
    pcTeamLead?: boolean | Project$pcTeamLeadArgs<ExtArgs>
  }

  export type $ProjectPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Project"
    objects: {
      comments: Prisma.$CommentPayload<ExtArgs>[]
      customFields: Prisma.$CustomFieldPayload<ExtArgs>[]
      departmentHistory: Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>[]
      owner: Prisma.$UserPayload<ExtArgs>
      projectCoordinator: Prisma.$UserPayload<ExtArgs> | null
      pcTeamLead: Prisma.$UserPayload<ExtArgs> | null
      tasks: Prisma.$TaskPayload<ExtArgs>[]
      assignmentHistory: Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      office: string
      category: $Enums.ProjectCategory
      pagesCount: number | null
      targetDate: Date
      status: $Enums.ProjectStatus
      ownerId: string
      clientName: string | null
      observations: string | null
      monthsPassed: number
      startDate: Date
      deviationReason: string | null
      dependency: boolean
      createdAt: Date
      updatedAt: Date
      currentDepartment: $Enums.Department
      nextDepartment: $Enums.Department | null
      projectCode: string
      projectCoordinatorId: string | null
      pcTeamLeadId: string | null
    }, ExtArgs["result"]["project"]>
    composites: {}
  }

  type ProjectGetPayload<S extends boolean | null | undefined | ProjectDefaultArgs> = $Result.GetResult<Prisma.$ProjectPayload, S>

  type ProjectCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectCountAggregateInputType | true
    }

  export interface ProjectDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Project'], meta: { name: 'Project' } }
    /**
     * Find zero or one Project that matches the filter.
     * @param {ProjectFindUniqueArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectFindUniqueArgs>(args: SelectSubset<T, ProjectFindUniqueArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Project that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectFindUniqueOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Project that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectFindFirstArgs>(args?: SelectSubset<T, ProjectFindFirstArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Project that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindFirstOrThrowArgs} args - Arguments to find a Project
     * @example
     * // Get one Project
     * const project = await prisma.project.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Projects that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Projects
     * const projects = await prisma.project.findMany()
     * 
     * // Get first 10 Projects
     * const projects = await prisma.project.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectWithIdOnly = await prisma.project.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectFindManyArgs>(args?: SelectSubset<T, ProjectFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Project.
     * @param {ProjectCreateArgs} args - Arguments to create a Project.
     * @example
     * // Create one Project
     * const Project = await prisma.project.create({
     *   data: {
     *     // ... data to create a Project
     *   }
     * })
     * 
     */
    create<T extends ProjectCreateArgs>(args: SelectSubset<T, ProjectCreateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Projects.
     * @param {ProjectCreateManyArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectCreateManyArgs>(args?: SelectSubset<T, ProjectCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Projects and returns the data saved in the database.
     * @param {ProjectCreateManyAndReturnArgs} args - Arguments to create many Projects.
     * @example
     * // Create many Projects
     * const project = await prisma.project.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Projects and only return the `id`
     * const projectWithIdOnly = await prisma.project.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Project.
     * @param {ProjectDeleteArgs} args - Arguments to delete one Project.
     * @example
     * // Delete one Project
     * const Project = await prisma.project.delete({
     *   where: {
     *     // ... filter to delete one Project
     *   }
     * })
     * 
     */
    delete<T extends ProjectDeleteArgs>(args: SelectSubset<T, ProjectDeleteArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Project.
     * @param {ProjectUpdateArgs} args - Arguments to update one Project.
     * @example
     * // Update one Project
     * const project = await prisma.project.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectUpdateArgs>(args: SelectSubset<T, ProjectUpdateArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Projects.
     * @param {ProjectDeleteManyArgs} args - Arguments to filter Projects to delete.
     * @example
     * // Delete a few Projects
     * const { count } = await prisma.project.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDeleteManyArgs>(args?: SelectSubset<T, ProjectDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Projects
     * const project = await prisma.project.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectUpdateManyArgs>(args: SelectSubset<T, ProjectUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Project.
     * @param {ProjectUpsertArgs} args - Arguments to update or create a Project.
     * @example
     * // Update or create a Project
     * const project = await prisma.project.upsert({
     *   create: {
     *     // ... data to create a Project
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Project we want to update
     *   }
     * })
     */
    upsert<T extends ProjectUpsertArgs>(args: SelectSubset<T, ProjectUpsertArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Projects.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectCountArgs} args - Arguments to filter Projects to count.
     * @example
     * // Count the number of Projects
     * const count = await prisma.project.count({
     *   where: {
     *     // ... the filter for the Projects we want to count
     *   }
     * })
    **/
    count<T extends ProjectCountArgs>(
      args?: Subset<T, ProjectCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAggregateArgs>(args: Subset<T, ProjectAggregateArgs>): Prisma.PrismaPromise<GetProjectAggregateType<T>>

    /**
     * Group by Project.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectGroupByArgs['orderBy'] }
        : { orderBy?: ProjectGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Project model
   */
  readonly fields: ProjectFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Project.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comments<T extends Project$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Project$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    customFields<T extends Project$customFieldsArgs<ExtArgs> = {}>(args?: Subset<T, Project$customFieldsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "findMany"> | Null>
    departmentHistory<T extends Project$departmentHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Project$departmentHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    owner<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    projectCoordinator<T extends Project$projectCoordinatorArgs<ExtArgs> = {}>(args?: Subset<T, Project$projectCoordinatorArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    pcTeamLead<T extends Project$pcTeamLeadArgs<ExtArgs> = {}>(args?: Subset<T, Project$pcTeamLeadArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    tasks<T extends Project$tasksArgs<ExtArgs> = {}>(args?: Subset<T, Project$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany"> | Null>
    assignmentHistory<T extends Project$assignmentHistoryArgs<ExtArgs> = {}>(args?: Subset<T, Project$assignmentHistoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Project model
   */ 
  interface ProjectFieldRefs {
    readonly id: FieldRef<"Project", 'String'>
    readonly name: FieldRef<"Project", 'String'>
    readonly office: FieldRef<"Project", 'String'>
    readonly category: FieldRef<"Project", 'ProjectCategory'>
    readonly pagesCount: FieldRef<"Project", 'Int'>
    readonly targetDate: FieldRef<"Project", 'DateTime'>
    readonly status: FieldRef<"Project", 'ProjectStatus'>
    readonly ownerId: FieldRef<"Project", 'String'>
    readonly clientName: FieldRef<"Project", 'String'>
    readonly observations: FieldRef<"Project", 'String'>
    readonly monthsPassed: FieldRef<"Project", 'Int'>
    readonly startDate: FieldRef<"Project", 'DateTime'>
    readonly deviationReason: FieldRef<"Project", 'String'>
    readonly dependency: FieldRef<"Project", 'Boolean'>
    readonly createdAt: FieldRef<"Project", 'DateTime'>
    readonly updatedAt: FieldRef<"Project", 'DateTime'>
    readonly currentDepartment: FieldRef<"Project", 'Department'>
    readonly nextDepartment: FieldRef<"Project", 'Department'>
    readonly projectCode: FieldRef<"Project", 'String'>
    readonly projectCoordinatorId: FieldRef<"Project", 'String'>
    readonly pcTeamLeadId: FieldRef<"Project", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Project findUnique
   */
  export type ProjectFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findUniqueOrThrow
   */
  export type ProjectFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project findFirst
   */
  export type ProjectFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findFirstOrThrow
   */
  export type ProjectFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Project to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Projects.
     */
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project findMany
   */
  export type ProjectFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter, which Projects to fetch.
     */
    where?: ProjectWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Projects to fetch.
     */
    orderBy?: ProjectOrderByWithRelationInput | ProjectOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Projects.
     */
    cursor?: ProjectWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Projects from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Projects.
     */
    skip?: number
    distinct?: ProjectScalarFieldEnum | ProjectScalarFieldEnum[]
  }

  /**
   * Project create
   */
  export type ProjectCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to create a Project.
     */
    data: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
  }

  /**
   * Project createMany
   */
  export type ProjectCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Project createManyAndReturn
   */
  export type ProjectCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Projects.
     */
    data: ProjectCreateManyInput | ProjectCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Project update
   */
  export type ProjectUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The data needed to update a Project.
     */
    data: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
    /**
     * Choose, which Project to update.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project updateMany
   */
  export type ProjectUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Projects.
     */
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyInput>
    /**
     * Filter which Projects to update
     */
    where?: ProjectWhereInput
  }

  /**
   * Project upsert
   */
  export type ProjectUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * The filter to search for the Project to update in case it exists.
     */
    where: ProjectWhereUniqueInput
    /**
     * In case the Project found by the `where` argument doesn't exist, create a new Project with this data.
     */
    create: XOR<ProjectCreateInput, ProjectUncheckedCreateInput>
    /**
     * In case the Project was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectUpdateInput, ProjectUncheckedUpdateInput>
  }

  /**
   * Project delete
   */
  export type ProjectDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    /**
     * Filter which Project to delete.
     */
    where: ProjectWhereUniqueInput
  }

  /**
   * Project deleteMany
   */
  export type ProjectDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Projects to delete
     */
    where?: ProjectWhereInput
  }

  /**
   * Project.comments
   */
  export type Project$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Project.customFields
   */
  export type Project$customFieldsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    where?: CustomFieldWhereInput
    orderBy?: CustomFieldOrderByWithRelationInput | CustomFieldOrderByWithRelationInput[]
    cursor?: CustomFieldWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomFieldScalarFieldEnum | CustomFieldScalarFieldEnum[]
  }

  /**
   * Project.departmentHistory
   */
  export type Project$departmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    where?: ProjectDepartmentHistoryWhereInput
    orderBy?: ProjectDepartmentHistoryOrderByWithRelationInput | ProjectDepartmentHistoryOrderByWithRelationInput[]
    cursor?: ProjectDepartmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectDepartmentHistoryScalarFieldEnum | ProjectDepartmentHistoryScalarFieldEnum[]
  }

  /**
   * Project.projectCoordinator
   */
  export type Project$projectCoordinatorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Project.pcTeamLead
   */
  export type Project$pcTeamLeadArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Project.tasks
   */
  export type Project$tasksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    cursor?: TaskWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Project.assignmentHistory
   */
  export type Project$assignmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    where?: ProjectAssignmentHistoryWhereInput
    orderBy?: ProjectAssignmentHistoryOrderByWithRelationInput | ProjectAssignmentHistoryOrderByWithRelationInput[]
    cursor?: ProjectAssignmentHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProjectAssignmentHistoryScalarFieldEnum | ProjectAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * Project without action
   */
  export type ProjectDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
  }


  /**
   * Model Task
   */

  export type AggregateTask = {
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  export type TaskMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    priority: $Enums.Priority | null
    dueDate: Date | null
    assigneeId: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    status: $Enums.TaskStatus | null
    priority: $Enums.Priority | null
    dueDate: Date | null
    assigneeId: string | null
    projectId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TaskCountAggregateOutputType = {
    id: number
    title: number
    description: number
    status: number
    priority: number
    dueDate: number
    assigneeId: number
    projectId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TaskMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    assigneeId?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    assigneeId?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TaskCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    status?: true
    priority?: true
    dueDate?: true
    assigneeId?: true
    projectId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TaskAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Task to aggregate.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tasks
    **/
    _count?: true | TaskCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TaskMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TaskMaxAggregateInputType
  }

  export type GetTaskAggregateType<T extends TaskAggregateArgs> = {
        [P in keyof T & keyof AggregateTask]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTask[P]>
      : GetScalarType<T[P], AggregateTask[P]>
  }




  export type TaskGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TaskWhereInput
    orderBy?: TaskOrderByWithAggregationInput | TaskOrderByWithAggregationInput[]
    by: TaskScalarFieldEnum[] | TaskScalarFieldEnum
    having?: TaskScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TaskCountAggregateInputType | true
    _min?: TaskMinAggregateInputType
    _max?: TaskMaxAggregateInputType
  }

  export type TaskGroupByOutputType = {
    id: string
    title: string
    description: string | null
    status: $Enums.TaskStatus
    priority: $Enums.Priority
    dueDate: Date | null
    assigneeId: string | null
    projectId: string
    createdAt: Date
    updatedAt: Date
    _count: TaskCountAggregateOutputType | null
    _min: TaskMinAggregateOutputType | null
    _max: TaskMaxAggregateOutputType | null
  }

  type GetTaskGroupByPayload<T extends TaskGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TaskGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TaskGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TaskGroupByOutputType[P]>
            : GetScalarType<T[P], TaskGroupByOutputType[P]>
        }
      >
    >


  export type TaskSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    assigneeId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    comments?: boolean | Task$commentsArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    assigneeId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["task"]>

  export type TaskSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    status?: boolean
    priority?: boolean
    dueDate?: boolean
    assigneeId?: boolean
    projectId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TaskInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | Task$commentsArgs<ExtArgs>
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    _count?: boolean | TaskCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TaskIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignee?: boolean | Task$assigneeArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $TaskPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Task"
    objects: {
      comments: Prisma.$CommentPayload<ExtArgs>[]
      assignee: Prisma.$UserPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string | null
      status: $Enums.TaskStatus
      priority: $Enums.Priority
      dueDate: Date | null
      assigneeId: string | null
      projectId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["task"]>
    composites: {}
  }

  type TaskGetPayload<S extends boolean | null | undefined | TaskDefaultArgs> = $Result.GetResult<Prisma.$TaskPayload, S>

  type TaskCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TaskFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TaskCountAggregateInputType | true
    }

  export interface TaskDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Task'], meta: { name: 'Task' } }
    /**
     * Find zero or one Task that matches the filter.
     * @param {TaskFindUniqueArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TaskFindUniqueArgs>(args: SelectSubset<T, TaskFindUniqueArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Task that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TaskFindUniqueOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TaskFindUniqueOrThrowArgs>(args: SelectSubset<T, TaskFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Task that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TaskFindFirstArgs>(args?: SelectSubset<T, TaskFindFirstArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Task that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindFirstOrThrowArgs} args - Arguments to find a Task
     * @example
     * // Get one Task
     * const task = await prisma.task.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TaskFindFirstOrThrowArgs>(args?: SelectSubset<T, TaskFindFirstOrThrowArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Tasks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tasks
     * const tasks = await prisma.task.findMany()
     * 
     * // Get first 10 Tasks
     * const tasks = await prisma.task.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const taskWithIdOnly = await prisma.task.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TaskFindManyArgs>(args?: SelectSubset<T, TaskFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Task.
     * @param {TaskCreateArgs} args - Arguments to create a Task.
     * @example
     * // Create one Task
     * const Task = await prisma.task.create({
     *   data: {
     *     // ... data to create a Task
     *   }
     * })
     * 
     */
    create<T extends TaskCreateArgs>(args: SelectSubset<T, TaskCreateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Tasks.
     * @param {TaskCreateManyArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TaskCreateManyArgs>(args?: SelectSubset<T, TaskCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Tasks and returns the data saved in the database.
     * @param {TaskCreateManyAndReturnArgs} args - Arguments to create many Tasks.
     * @example
     * // Create many Tasks
     * const task = await prisma.task.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Tasks and only return the `id`
     * const taskWithIdOnly = await prisma.task.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TaskCreateManyAndReturnArgs>(args?: SelectSubset<T, TaskCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Task.
     * @param {TaskDeleteArgs} args - Arguments to delete one Task.
     * @example
     * // Delete one Task
     * const Task = await prisma.task.delete({
     *   where: {
     *     // ... filter to delete one Task
     *   }
     * })
     * 
     */
    delete<T extends TaskDeleteArgs>(args: SelectSubset<T, TaskDeleteArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Task.
     * @param {TaskUpdateArgs} args - Arguments to update one Task.
     * @example
     * // Update one Task
     * const task = await prisma.task.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TaskUpdateArgs>(args: SelectSubset<T, TaskUpdateArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Tasks.
     * @param {TaskDeleteManyArgs} args - Arguments to filter Tasks to delete.
     * @example
     * // Delete a few Tasks
     * const { count } = await prisma.task.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TaskDeleteManyArgs>(args?: SelectSubset<T, TaskDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tasks
     * const task = await prisma.task.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TaskUpdateManyArgs>(args: SelectSubset<T, TaskUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Task.
     * @param {TaskUpsertArgs} args - Arguments to update or create a Task.
     * @example
     * // Update or create a Task
     * const task = await prisma.task.upsert({
     *   create: {
     *     // ... data to create a Task
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Task we want to update
     *   }
     * })
     */
    upsert<T extends TaskUpsertArgs>(args: SelectSubset<T, TaskUpsertArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Tasks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskCountArgs} args - Arguments to filter Tasks to count.
     * @example
     * // Count the number of Tasks
     * const count = await prisma.task.count({
     *   where: {
     *     // ... the filter for the Tasks we want to count
     *   }
     * })
    **/
    count<T extends TaskCountArgs>(
      args?: Subset<T, TaskCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TaskCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TaskAggregateArgs>(args: Subset<T, TaskAggregateArgs>): Prisma.PrismaPromise<GetTaskAggregateType<T>>

    /**
     * Group by Task.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TaskGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TaskGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TaskGroupByArgs['orderBy'] }
        : { orderBy?: TaskGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TaskGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTaskGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Task model
   */
  readonly fields: TaskFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Task.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TaskClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    comments<T extends Task$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Task$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany"> | Null>
    assignee<T extends Task$assigneeArgs<ExtArgs> = {}>(args?: Subset<T, Task$assigneeArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Task model
   */ 
  interface TaskFieldRefs {
    readonly id: FieldRef<"Task", 'String'>
    readonly title: FieldRef<"Task", 'String'>
    readonly description: FieldRef<"Task", 'String'>
    readonly status: FieldRef<"Task", 'TaskStatus'>
    readonly priority: FieldRef<"Task", 'Priority'>
    readonly dueDate: FieldRef<"Task", 'DateTime'>
    readonly assigneeId: FieldRef<"Task", 'String'>
    readonly projectId: FieldRef<"Task", 'String'>
    readonly createdAt: FieldRef<"Task", 'DateTime'>
    readonly updatedAt: FieldRef<"Task", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Task findUnique
   */
  export type TaskFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findUniqueOrThrow
   */
  export type TaskFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task findFirst
   */
  export type TaskFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findFirstOrThrow
   */
  export type TaskFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Task to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tasks.
     */
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task findMany
   */
  export type TaskFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter, which Tasks to fetch.
     */
    where?: TaskWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tasks to fetch.
     */
    orderBy?: TaskOrderByWithRelationInput | TaskOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tasks.
     */
    cursor?: TaskWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tasks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tasks.
     */
    skip?: number
    distinct?: TaskScalarFieldEnum | TaskScalarFieldEnum[]
  }

  /**
   * Task create
   */
  export type TaskCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to create a Task.
     */
    data: XOR<TaskCreateInput, TaskUncheckedCreateInput>
  }

  /**
   * Task createMany
   */
  export type TaskCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Task createManyAndReturn
   */
  export type TaskCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Tasks.
     */
    data: TaskCreateManyInput | TaskCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Task update
   */
  export type TaskUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The data needed to update a Task.
     */
    data: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
    /**
     * Choose, which Task to update.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task updateMany
   */
  export type TaskUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tasks.
     */
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyInput>
    /**
     * Filter which Tasks to update
     */
    where?: TaskWhereInput
  }

  /**
   * Task upsert
   */
  export type TaskUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * The filter to search for the Task to update in case it exists.
     */
    where: TaskWhereUniqueInput
    /**
     * In case the Task found by the `where` argument doesn't exist, create a new Task with this data.
     */
    create: XOR<TaskCreateInput, TaskUncheckedCreateInput>
    /**
     * In case the Task was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TaskUpdateInput, TaskUncheckedUpdateInput>
  }

  /**
   * Task delete
   */
  export type TaskDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    /**
     * Filter which Task to delete.
     */
    where: TaskWhereUniqueInput
  }

  /**
   * Task deleteMany
   */
  export type TaskDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tasks to delete
     */
    where?: TaskWhereInput
  }

  /**
   * Task.comments
   */
  export type Task$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Task.assignee
   */
  export type Task$assigneeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Task without action
   */
  export type TaskDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    content: string | null
    authorId: string | null
    projectId: string | null
    taskId: string | null
    createdAt: Date | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    content: string | null
    authorId: string | null
    projectId: string | null
    taskId: string | null
    createdAt: Date | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    content: number
    authorId: number
    projectId: number
    taskId: number
    createdAt: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    content?: true
    authorId?: true
    projectId?: true
    taskId?: true
    createdAt?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    content?: true
    authorId?: true
    projectId?: true
    taskId?: true
    createdAt?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    content?: true
    authorId?: true
    projectId?: true
    taskId?: true
    createdAt?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    content: string
    authorId: string
    projectId: string | null
    taskId: string | null
    createdAt: Date
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    authorId?: boolean
    projectId?: boolean
    taskId?: boolean
    createdAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    authorId?: boolean
    projectId?: boolean
    taskId?: boolean
    createdAt?: boolean
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    content?: boolean
    authorId?: boolean
    projectId?: boolean
    taskId?: boolean
    createdAt?: boolean
  }

  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }
  export type CommentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    author?: boolean | UserDefaultArgs<ExtArgs>
    project?: boolean | Comment$projectArgs<ExtArgs>
    task?: boolean | Comment$taskArgs<ExtArgs>
  }

  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      author: Prisma.$UserPayload<ExtArgs>
      project: Prisma.$ProjectPayload<ExtArgs> | null
      task: Prisma.$TaskPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string
      authorId: string
      projectId: string | null
      taskId: string | null
      createdAt: Date
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }

  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CommentFindUniqueArgs>(args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs>(args: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CommentFindFirstArgs>(args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs>(args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CommentFindManyArgs>(args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
     */
    create<T extends CommentCreateArgs>(args: SelectSubset<T, CommentCreateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Comments.
     * @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CommentCreateManyArgs>(args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Comments and returns the data saved in the database.
     * @param {CommentCreateManyAndReturnArgs} args - Arguments to create many Comments.
     * @example
     * // Create many Comments
     * const comment = await prisma.comment.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Comments and only return the `id`
     * const commentWithIdOnly = await prisma.comment.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CommentCreateManyAndReturnArgs>(args?: SelectSubset<T, CommentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
     */
    delete<T extends CommentDeleteArgs>(args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CommentUpdateArgs>(args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CommentDeleteManyArgs>(args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CommentUpdateManyArgs>(args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
     */
    upsert<T extends CommentUpsertArgs>(args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    author<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    project<T extends Comment$projectArgs<ExtArgs> = {}>(args?: Subset<T, Comment$projectArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    task<T extends Comment$taskArgs<ExtArgs> = {}>(args?: Subset<T, Comment$taskArgs<ExtArgs>>): Prisma__TaskClient<$Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly content: FieldRef<"Comment", 'String'>
    readonly authorId: FieldRef<"Comment", 'String'>
    readonly projectId: FieldRef<"Comment", 'String'>
    readonly taskId: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment createManyAndReturn
   */
  export type CommentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.project
   */
  export type Comment$projectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Project
     */
    select?: ProjectSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectInclude<ExtArgs> | null
    where?: ProjectWhereInput
  }

  /**
   * Comment.task
   */
  export type Comment$taskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Task
     */
    select?: TaskSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TaskInclude<ExtArgs> | null
    where?: TaskWhereInput
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model CustomField
   */

  export type AggregateCustomField = {
    _count: CustomFieldCountAggregateOutputType | null
    _min: CustomFieldMinAggregateOutputType | null
    _max: CustomFieldMaxAggregateOutputType | null
  }

  export type CustomFieldMinAggregateOutputType = {
    id: string | null
    fieldName: string | null
    fieldValue: string | null
    projectId: string | null
  }

  export type CustomFieldMaxAggregateOutputType = {
    id: string | null
    fieldName: string | null
    fieldValue: string | null
    projectId: string | null
  }

  export type CustomFieldCountAggregateOutputType = {
    id: number
    fieldName: number
    fieldValue: number
    projectId: number
    _all: number
  }


  export type CustomFieldMinAggregateInputType = {
    id?: true
    fieldName?: true
    fieldValue?: true
    projectId?: true
  }

  export type CustomFieldMaxAggregateInputType = {
    id?: true
    fieldName?: true
    fieldValue?: true
    projectId?: true
  }

  export type CustomFieldCountAggregateInputType = {
    id?: true
    fieldName?: true
    fieldValue?: true
    projectId?: true
    _all?: true
  }

  export type CustomFieldAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomField to aggregate.
     */
    where?: CustomFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomFields to fetch.
     */
    orderBy?: CustomFieldOrderByWithRelationInput | CustomFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomFields
    **/
    _count?: true | CustomFieldCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomFieldMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomFieldMaxAggregateInputType
  }

  export type GetCustomFieldAggregateType<T extends CustomFieldAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomField]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomField[P]>
      : GetScalarType<T[P], AggregateCustomField[P]>
  }




  export type CustomFieldGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomFieldWhereInput
    orderBy?: CustomFieldOrderByWithAggregationInput | CustomFieldOrderByWithAggregationInput[]
    by: CustomFieldScalarFieldEnum[] | CustomFieldScalarFieldEnum
    having?: CustomFieldScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomFieldCountAggregateInputType | true
    _min?: CustomFieldMinAggregateInputType
    _max?: CustomFieldMaxAggregateInputType
  }

  export type CustomFieldGroupByOutputType = {
    id: string
    fieldName: string
    fieldValue: string
    projectId: string
    _count: CustomFieldCountAggregateOutputType | null
    _min: CustomFieldMinAggregateOutputType | null
    _max: CustomFieldMaxAggregateOutputType | null
  }

  type GetCustomFieldGroupByPayload<T extends CustomFieldGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomFieldGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomFieldGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomFieldGroupByOutputType[P]>
            : GetScalarType<T[P], CustomFieldGroupByOutputType[P]>
        }
      >
    >


  export type CustomFieldSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fieldName?: boolean
    fieldValue?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customField"]>

  export type CustomFieldSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fieldName?: boolean
    fieldValue?: boolean
    projectId?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customField"]>

  export type CustomFieldSelectScalar = {
    id?: boolean
    fieldName?: boolean
    fieldValue?: boolean
    projectId?: boolean
  }

  export type CustomFieldInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }
  export type CustomFieldIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $CustomFieldPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomField"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fieldName: string
      fieldValue: string
      projectId: string
    }, ExtArgs["result"]["customField"]>
    composites: {}
  }

  type CustomFieldGetPayload<S extends boolean | null | undefined | CustomFieldDefaultArgs> = $Result.GetResult<Prisma.$CustomFieldPayload, S>

  type CustomFieldCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CustomFieldFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomFieldCountAggregateInputType | true
    }

  export interface CustomFieldDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomField'], meta: { name: 'CustomField' } }
    /**
     * Find zero or one CustomField that matches the filter.
     * @param {CustomFieldFindUniqueArgs} args - Arguments to find a CustomField
     * @example
     * // Get one CustomField
     * const customField = await prisma.customField.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomFieldFindUniqueArgs>(args: SelectSubset<T, CustomFieldFindUniqueArgs<ExtArgs>>): Prisma__CustomFieldClient<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one CustomField that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CustomFieldFindUniqueOrThrowArgs} args - Arguments to find a CustomField
     * @example
     * // Get one CustomField
     * const customField = await prisma.customField.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomFieldFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomFieldFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomFieldClient<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first CustomField that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomFieldFindFirstArgs} args - Arguments to find a CustomField
     * @example
     * // Get one CustomField
     * const customField = await prisma.customField.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomFieldFindFirstArgs>(args?: SelectSubset<T, CustomFieldFindFirstArgs<ExtArgs>>): Prisma__CustomFieldClient<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first CustomField that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomFieldFindFirstOrThrowArgs} args - Arguments to find a CustomField
     * @example
     * // Get one CustomField
     * const customField = await prisma.customField.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomFieldFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomFieldFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomFieldClient<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more CustomFields that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomFieldFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomFields
     * const customFields = await prisma.customField.findMany()
     * 
     * // Get first 10 CustomFields
     * const customFields = await prisma.customField.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customFieldWithIdOnly = await prisma.customField.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomFieldFindManyArgs>(args?: SelectSubset<T, CustomFieldFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a CustomField.
     * @param {CustomFieldCreateArgs} args - Arguments to create a CustomField.
     * @example
     * // Create one CustomField
     * const CustomField = await prisma.customField.create({
     *   data: {
     *     // ... data to create a CustomField
     *   }
     * })
     * 
     */
    create<T extends CustomFieldCreateArgs>(args: SelectSubset<T, CustomFieldCreateArgs<ExtArgs>>): Prisma__CustomFieldClient<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many CustomFields.
     * @param {CustomFieldCreateManyArgs} args - Arguments to create many CustomFields.
     * @example
     * // Create many CustomFields
     * const customField = await prisma.customField.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomFieldCreateManyArgs>(args?: SelectSubset<T, CustomFieldCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomFields and returns the data saved in the database.
     * @param {CustomFieldCreateManyAndReturnArgs} args - Arguments to create many CustomFields.
     * @example
     * // Create many CustomFields
     * const customField = await prisma.customField.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomFields and only return the `id`
     * const customFieldWithIdOnly = await prisma.customField.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomFieldCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomFieldCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a CustomField.
     * @param {CustomFieldDeleteArgs} args - Arguments to delete one CustomField.
     * @example
     * // Delete one CustomField
     * const CustomField = await prisma.customField.delete({
     *   where: {
     *     // ... filter to delete one CustomField
     *   }
     * })
     * 
     */
    delete<T extends CustomFieldDeleteArgs>(args: SelectSubset<T, CustomFieldDeleteArgs<ExtArgs>>): Prisma__CustomFieldClient<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one CustomField.
     * @param {CustomFieldUpdateArgs} args - Arguments to update one CustomField.
     * @example
     * // Update one CustomField
     * const customField = await prisma.customField.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomFieldUpdateArgs>(args: SelectSubset<T, CustomFieldUpdateArgs<ExtArgs>>): Prisma__CustomFieldClient<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more CustomFields.
     * @param {CustomFieldDeleteManyArgs} args - Arguments to filter CustomFields to delete.
     * @example
     * // Delete a few CustomFields
     * const { count } = await prisma.customField.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomFieldDeleteManyArgs>(args?: SelectSubset<T, CustomFieldDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomFieldUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomFields
     * const customField = await prisma.customField.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomFieldUpdateManyArgs>(args: SelectSubset<T, CustomFieldUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CustomField.
     * @param {CustomFieldUpsertArgs} args - Arguments to update or create a CustomField.
     * @example
     * // Update or create a CustomField
     * const customField = await prisma.customField.upsert({
     *   create: {
     *     // ... data to create a CustomField
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomField we want to update
     *   }
     * })
     */
    upsert<T extends CustomFieldUpsertArgs>(args: SelectSubset<T, CustomFieldUpsertArgs<ExtArgs>>): Prisma__CustomFieldClient<$Result.GetResult<Prisma.$CustomFieldPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of CustomFields.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomFieldCountArgs} args - Arguments to filter CustomFields to count.
     * @example
     * // Count the number of CustomFields
     * const count = await prisma.customField.count({
     *   where: {
     *     // ... the filter for the CustomFields we want to count
     *   }
     * })
    **/
    count<T extends CustomFieldCountArgs>(
      args?: Subset<T, CustomFieldCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomFieldCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomFieldAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomFieldAggregateArgs>(args: Subset<T, CustomFieldAggregateArgs>): Prisma.PrismaPromise<GetCustomFieldAggregateType<T>>

    /**
     * Group by CustomField.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomFieldGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomFieldGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomFieldGroupByArgs['orderBy'] }
        : { orderBy?: CustomFieldGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomFieldGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomFieldGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomField model
   */
  readonly fields: CustomFieldFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomField.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomFieldClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomField model
   */ 
  interface CustomFieldFieldRefs {
    readonly id: FieldRef<"CustomField", 'String'>
    readonly fieldName: FieldRef<"CustomField", 'String'>
    readonly fieldValue: FieldRef<"CustomField", 'String'>
    readonly projectId: FieldRef<"CustomField", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CustomField findUnique
   */
  export type CustomFieldFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    /**
     * Filter, which CustomField to fetch.
     */
    where: CustomFieldWhereUniqueInput
  }

  /**
   * CustomField findUniqueOrThrow
   */
  export type CustomFieldFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    /**
     * Filter, which CustomField to fetch.
     */
    where: CustomFieldWhereUniqueInput
  }

  /**
   * CustomField findFirst
   */
  export type CustomFieldFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    /**
     * Filter, which CustomField to fetch.
     */
    where?: CustomFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomFields to fetch.
     */
    orderBy?: CustomFieldOrderByWithRelationInput | CustomFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomFields.
     */
    cursor?: CustomFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomFields.
     */
    distinct?: CustomFieldScalarFieldEnum | CustomFieldScalarFieldEnum[]
  }

  /**
   * CustomField findFirstOrThrow
   */
  export type CustomFieldFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    /**
     * Filter, which CustomField to fetch.
     */
    where?: CustomFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomFields to fetch.
     */
    orderBy?: CustomFieldOrderByWithRelationInput | CustomFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomFields.
     */
    cursor?: CustomFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomFields.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomFields.
     */
    distinct?: CustomFieldScalarFieldEnum | CustomFieldScalarFieldEnum[]
  }

  /**
   * CustomField findMany
   */
  export type CustomFieldFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    /**
     * Filter, which CustomFields to fetch.
     */
    where?: CustomFieldWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomFields to fetch.
     */
    orderBy?: CustomFieldOrderByWithRelationInput | CustomFieldOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomFields.
     */
    cursor?: CustomFieldWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomFields from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomFields.
     */
    skip?: number
    distinct?: CustomFieldScalarFieldEnum | CustomFieldScalarFieldEnum[]
  }

  /**
   * CustomField create
   */
  export type CustomFieldCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomField.
     */
    data: XOR<CustomFieldCreateInput, CustomFieldUncheckedCreateInput>
  }

  /**
   * CustomField createMany
   */
  export type CustomFieldCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomFields.
     */
    data: CustomFieldCreateManyInput | CustomFieldCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CustomField createManyAndReturn
   */
  export type CustomFieldCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many CustomFields.
     */
    data: CustomFieldCreateManyInput | CustomFieldCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomField update
   */
  export type CustomFieldUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomField.
     */
    data: XOR<CustomFieldUpdateInput, CustomFieldUncheckedUpdateInput>
    /**
     * Choose, which CustomField to update.
     */
    where: CustomFieldWhereUniqueInput
  }

  /**
   * CustomField updateMany
   */
  export type CustomFieldUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomFields.
     */
    data: XOR<CustomFieldUpdateManyMutationInput, CustomFieldUncheckedUpdateManyInput>
    /**
     * Filter which CustomFields to update
     */
    where?: CustomFieldWhereInput
  }

  /**
   * CustomField upsert
   */
  export type CustomFieldUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomField to update in case it exists.
     */
    where: CustomFieldWhereUniqueInput
    /**
     * In case the CustomField found by the `where` argument doesn't exist, create a new CustomField with this data.
     */
    create: XOR<CustomFieldCreateInput, CustomFieldUncheckedCreateInput>
    /**
     * In case the CustomField was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomFieldUpdateInput, CustomFieldUncheckedUpdateInput>
  }

  /**
   * CustomField delete
   */
  export type CustomFieldDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
    /**
     * Filter which CustomField to delete.
     */
    where: CustomFieldWhereUniqueInput
  }

  /**
   * CustomField deleteMany
   */
  export type CustomFieldDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomFields to delete
     */
    where?: CustomFieldWhereInput
  }

  /**
   * CustomField without action
   */
  export type CustomFieldDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomField
     */
    select?: CustomFieldSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomFieldInclude<ExtArgs> | null
  }


  /**
   * Model ProjectDepartmentHistory
   */

  export type AggregateProjectDepartmentHistory = {
    _count: ProjectDepartmentHistoryCountAggregateOutputType | null
    _avg: ProjectDepartmentHistoryAvgAggregateOutputType | null
    _sum: ProjectDepartmentHistorySumAggregateOutputType | null
    _min: ProjectDepartmentHistoryMinAggregateOutputType | null
    _max: ProjectDepartmentHistoryMaxAggregateOutputType | null
  }

  export type ProjectDepartmentHistoryAvgAggregateOutputType = {
    estimatedDays: number | null
    actualDays: number | null
    correctionCount: number | null
  }

  export type ProjectDepartmentHistorySumAggregateOutputType = {
    estimatedDays: number | null
    actualDays: number | null
    correctionCount: number | null
  }

  export type ProjectDepartmentHistoryMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    fromDepartment: $Enums.Department | null
    toDepartment: $Enums.Department | null
    movedById: string | null
    notes: string | null
    createdAt: Date | null
    workStatus: $Enums.DepartmentWorkStatus | null
    workStartDate: Date | null
    workEndDate: Date | null
    estimatedDays: number | null
    actualDays: number | null
    correctionCount: number | null
    permissionGrantedById: string | null
    updatedAt: Date | null
  }

  export type ProjectDepartmentHistoryMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    fromDepartment: $Enums.Department | null
    toDepartment: $Enums.Department | null
    movedById: string | null
    notes: string | null
    createdAt: Date | null
    workStatus: $Enums.DepartmentWorkStatus | null
    workStartDate: Date | null
    workEndDate: Date | null
    estimatedDays: number | null
    actualDays: number | null
    correctionCount: number | null
    permissionGrantedById: string | null
    updatedAt: Date | null
  }

  export type ProjectDepartmentHistoryCountAggregateOutputType = {
    id: number
    projectId: number
    fromDepartment: number
    toDepartment: number
    movedById: number
    notes: number
    createdAt: number
    workStatus: number
    workStartDate: number
    workEndDate: number
    estimatedDays: number
    actualDays: number
    correctionCount: number
    permissionGrantedById: number
    updatedAt: number
    _all: number
  }


  export type ProjectDepartmentHistoryAvgAggregateInputType = {
    estimatedDays?: true
    actualDays?: true
    correctionCount?: true
  }

  export type ProjectDepartmentHistorySumAggregateInputType = {
    estimatedDays?: true
    actualDays?: true
    correctionCount?: true
  }

  export type ProjectDepartmentHistoryMinAggregateInputType = {
    id?: true
    projectId?: true
    fromDepartment?: true
    toDepartment?: true
    movedById?: true
    notes?: true
    createdAt?: true
    workStatus?: true
    workStartDate?: true
    workEndDate?: true
    estimatedDays?: true
    actualDays?: true
    correctionCount?: true
    permissionGrantedById?: true
    updatedAt?: true
  }

  export type ProjectDepartmentHistoryMaxAggregateInputType = {
    id?: true
    projectId?: true
    fromDepartment?: true
    toDepartment?: true
    movedById?: true
    notes?: true
    createdAt?: true
    workStatus?: true
    workStartDate?: true
    workEndDate?: true
    estimatedDays?: true
    actualDays?: true
    correctionCount?: true
    permissionGrantedById?: true
    updatedAt?: true
  }

  export type ProjectDepartmentHistoryCountAggregateInputType = {
    id?: true
    projectId?: true
    fromDepartment?: true
    toDepartment?: true
    movedById?: true
    notes?: true
    createdAt?: true
    workStatus?: true
    workStartDate?: true
    workEndDate?: true
    estimatedDays?: true
    actualDays?: true
    correctionCount?: true
    permissionGrantedById?: true
    updatedAt?: true
    _all?: true
  }

  export type ProjectDepartmentHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectDepartmentHistory to aggregate.
     */
    where?: ProjectDepartmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectDepartmentHistories to fetch.
     */
    orderBy?: ProjectDepartmentHistoryOrderByWithRelationInput | ProjectDepartmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectDepartmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectDepartmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectDepartmentHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectDepartmentHistories
    **/
    _count?: true | ProjectDepartmentHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProjectDepartmentHistoryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProjectDepartmentHistorySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectDepartmentHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectDepartmentHistoryMaxAggregateInputType
  }

  export type GetProjectDepartmentHistoryAggregateType<T extends ProjectDepartmentHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectDepartmentHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectDepartmentHistory[P]>
      : GetScalarType<T[P], AggregateProjectDepartmentHistory[P]>
  }




  export type ProjectDepartmentHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectDepartmentHistoryWhereInput
    orderBy?: ProjectDepartmentHistoryOrderByWithAggregationInput | ProjectDepartmentHistoryOrderByWithAggregationInput[]
    by: ProjectDepartmentHistoryScalarFieldEnum[] | ProjectDepartmentHistoryScalarFieldEnum
    having?: ProjectDepartmentHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectDepartmentHistoryCountAggregateInputType | true
    _avg?: ProjectDepartmentHistoryAvgAggregateInputType
    _sum?: ProjectDepartmentHistorySumAggregateInputType
    _min?: ProjectDepartmentHistoryMinAggregateInputType
    _max?: ProjectDepartmentHistoryMaxAggregateInputType
  }

  export type ProjectDepartmentHistoryGroupByOutputType = {
    id: string
    projectId: string
    fromDepartment: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes: string | null
    createdAt: Date
    workStatus: $Enums.DepartmentWorkStatus
    workStartDate: Date | null
    workEndDate: Date | null
    estimatedDays: number | null
    actualDays: number | null
    correctionCount: number
    permissionGrantedById: string | null
    updatedAt: Date
    _count: ProjectDepartmentHistoryCountAggregateOutputType | null
    _avg: ProjectDepartmentHistoryAvgAggregateOutputType | null
    _sum: ProjectDepartmentHistorySumAggregateOutputType | null
    _min: ProjectDepartmentHistoryMinAggregateOutputType | null
    _max: ProjectDepartmentHistoryMaxAggregateOutputType | null
  }

  type GetProjectDepartmentHistoryGroupByPayload<T extends ProjectDepartmentHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectDepartmentHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectDepartmentHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectDepartmentHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectDepartmentHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ProjectDepartmentHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    fromDepartment?: boolean
    toDepartment?: boolean
    movedById?: boolean
    notes?: boolean
    createdAt?: boolean
    workStatus?: boolean
    workStartDate?: boolean
    workEndDate?: boolean
    estimatedDays?: boolean
    actualDays?: boolean
    correctionCount?: boolean
    permissionGrantedById?: boolean
    updatedAt?: boolean
    corrections?: boolean | ProjectDepartmentHistory$correctionsArgs<ExtArgs>
    movedBy?: boolean | UserDefaultArgs<ExtArgs>
    permissionGrantedBy?: boolean | ProjectDepartmentHistory$permissionGrantedByArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    qaRounds?: boolean | ProjectDepartmentHistory$qaRoundsArgs<ExtArgs>
    approvals?: boolean | ProjectDepartmentHistory$approvalsArgs<ExtArgs>
    _count?: boolean | ProjectDepartmentHistoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectDepartmentHistory"]>

  export type ProjectDepartmentHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    fromDepartment?: boolean
    toDepartment?: boolean
    movedById?: boolean
    notes?: boolean
    createdAt?: boolean
    workStatus?: boolean
    workStartDate?: boolean
    workEndDate?: boolean
    estimatedDays?: boolean
    actualDays?: boolean
    correctionCount?: boolean
    permissionGrantedById?: boolean
    updatedAt?: boolean
    movedBy?: boolean | UserDefaultArgs<ExtArgs>
    permissionGrantedBy?: boolean | ProjectDepartmentHistory$permissionGrantedByArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectDepartmentHistory"]>

  export type ProjectDepartmentHistorySelectScalar = {
    id?: boolean
    projectId?: boolean
    fromDepartment?: boolean
    toDepartment?: boolean
    movedById?: boolean
    notes?: boolean
    createdAt?: boolean
    workStatus?: boolean
    workStartDate?: boolean
    workEndDate?: boolean
    estimatedDays?: boolean
    actualDays?: boolean
    correctionCount?: boolean
    permissionGrantedById?: boolean
    updatedAt?: boolean
  }

  export type ProjectDepartmentHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    corrections?: boolean | ProjectDepartmentHistory$correctionsArgs<ExtArgs>
    movedBy?: boolean | UserDefaultArgs<ExtArgs>
    permissionGrantedBy?: boolean | ProjectDepartmentHistory$permissionGrantedByArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    qaRounds?: boolean | ProjectDepartmentHistory$qaRoundsArgs<ExtArgs>
    approvals?: boolean | ProjectDepartmentHistory$approvalsArgs<ExtArgs>
    _count?: boolean | ProjectDepartmentHistoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProjectDepartmentHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    movedBy?: boolean | UserDefaultArgs<ExtArgs>
    permissionGrantedBy?: boolean | ProjectDepartmentHistory$permissionGrantedByArgs<ExtArgs>
    project?: boolean | ProjectDefaultArgs<ExtArgs>
  }

  export type $ProjectDepartmentHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectDepartmentHistory"
    objects: {
      corrections: Prisma.$DepartmentCorrectionPayload<ExtArgs>[]
      movedBy: Prisma.$UserPayload<ExtArgs>
      permissionGrantedBy: Prisma.$UserPayload<ExtArgs> | null
      project: Prisma.$ProjectPayload<ExtArgs>
      qaRounds: Prisma.$QATestingRoundPayload<ExtArgs>[]
      approvals: Prisma.$WorkflowApprovalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      fromDepartment: $Enums.Department | null
      toDepartment: $Enums.Department
      movedById: string
      notes: string | null
      createdAt: Date
      workStatus: $Enums.DepartmentWorkStatus
      workStartDate: Date | null
      workEndDate: Date | null
      estimatedDays: number | null
      actualDays: number | null
      correctionCount: number
      permissionGrantedById: string | null
      updatedAt: Date
    }, ExtArgs["result"]["projectDepartmentHistory"]>
    composites: {}
  }

  type ProjectDepartmentHistoryGetPayload<S extends boolean | null | undefined | ProjectDepartmentHistoryDefaultArgs> = $Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload, S>

  type ProjectDepartmentHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectDepartmentHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectDepartmentHistoryCountAggregateInputType | true
    }

  export interface ProjectDepartmentHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectDepartmentHistory'], meta: { name: 'ProjectDepartmentHistory' } }
    /**
     * Find zero or one ProjectDepartmentHistory that matches the filter.
     * @param {ProjectDepartmentHistoryFindUniqueArgs} args - Arguments to find a ProjectDepartmentHistory
     * @example
     * // Get one ProjectDepartmentHistory
     * const projectDepartmentHistory = await prisma.projectDepartmentHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectDepartmentHistoryFindUniqueArgs>(args: SelectSubset<T, ProjectDepartmentHistoryFindUniqueArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectDepartmentHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectDepartmentHistoryFindUniqueOrThrowArgs} args - Arguments to find a ProjectDepartmentHistory
     * @example
     * // Get one ProjectDepartmentHistory
     * const projectDepartmentHistory = await prisma.projectDepartmentHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectDepartmentHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectDepartmentHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectDepartmentHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDepartmentHistoryFindFirstArgs} args - Arguments to find a ProjectDepartmentHistory
     * @example
     * // Get one ProjectDepartmentHistory
     * const projectDepartmentHistory = await prisma.projectDepartmentHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectDepartmentHistoryFindFirstArgs>(args?: SelectSubset<T, ProjectDepartmentHistoryFindFirstArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectDepartmentHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDepartmentHistoryFindFirstOrThrowArgs} args - Arguments to find a ProjectDepartmentHistory
     * @example
     * // Get one ProjectDepartmentHistory
     * const projectDepartmentHistory = await prisma.projectDepartmentHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectDepartmentHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectDepartmentHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectDepartmentHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDepartmentHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectDepartmentHistories
     * const projectDepartmentHistories = await prisma.projectDepartmentHistory.findMany()
     * 
     * // Get first 10 ProjectDepartmentHistories
     * const projectDepartmentHistories = await prisma.projectDepartmentHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectDepartmentHistoryWithIdOnly = await prisma.projectDepartmentHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectDepartmentHistoryFindManyArgs>(args?: SelectSubset<T, ProjectDepartmentHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectDepartmentHistory.
     * @param {ProjectDepartmentHistoryCreateArgs} args - Arguments to create a ProjectDepartmentHistory.
     * @example
     * // Create one ProjectDepartmentHistory
     * const ProjectDepartmentHistory = await prisma.projectDepartmentHistory.create({
     *   data: {
     *     // ... data to create a ProjectDepartmentHistory
     *   }
     * })
     * 
     */
    create<T extends ProjectDepartmentHistoryCreateArgs>(args: SelectSubset<T, ProjectDepartmentHistoryCreateArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectDepartmentHistories.
     * @param {ProjectDepartmentHistoryCreateManyArgs} args - Arguments to create many ProjectDepartmentHistories.
     * @example
     * // Create many ProjectDepartmentHistories
     * const projectDepartmentHistory = await prisma.projectDepartmentHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectDepartmentHistoryCreateManyArgs>(args?: SelectSubset<T, ProjectDepartmentHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectDepartmentHistories and returns the data saved in the database.
     * @param {ProjectDepartmentHistoryCreateManyAndReturnArgs} args - Arguments to create many ProjectDepartmentHistories.
     * @example
     * // Create many ProjectDepartmentHistories
     * const projectDepartmentHistory = await prisma.projectDepartmentHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectDepartmentHistories and only return the `id`
     * const projectDepartmentHistoryWithIdOnly = await prisma.projectDepartmentHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectDepartmentHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectDepartmentHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectDepartmentHistory.
     * @param {ProjectDepartmentHistoryDeleteArgs} args - Arguments to delete one ProjectDepartmentHistory.
     * @example
     * // Delete one ProjectDepartmentHistory
     * const ProjectDepartmentHistory = await prisma.projectDepartmentHistory.delete({
     *   where: {
     *     // ... filter to delete one ProjectDepartmentHistory
     *   }
     * })
     * 
     */
    delete<T extends ProjectDepartmentHistoryDeleteArgs>(args: SelectSubset<T, ProjectDepartmentHistoryDeleteArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectDepartmentHistory.
     * @param {ProjectDepartmentHistoryUpdateArgs} args - Arguments to update one ProjectDepartmentHistory.
     * @example
     * // Update one ProjectDepartmentHistory
     * const projectDepartmentHistory = await prisma.projectDepartmentHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectDepartmentHistoryUpdateArgs>(args: SelectSubset<T, ProjectDepartmentHistoryUpdateArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectDepartmentHistories.
     * @param {ProjectDepartmentHistoryDeleteManyArgs} args - Arguments to filter ProjectDepartmentHistories to delete.
     * @example
     * // Delete a few ProjectDepartmentHistories
     * const { count } = await prisma.projectDepartmentHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectDepartmentHistoryDeleteManyArgs>(args?: SelectSubset<T, ProjectDepartmentHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectDepartmentHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDepartmentHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectDepartmentHistories
     * const projectDepartmentHistory = await prisma.projectDepartmentHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectDepartmentHistoryUpdateManyArgs>(args: SelectSubset<T, ProjectDepartmentHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectDepartmentHistory.
     * @param {ProjectDepartmentHistoryUpsertArgs} args - Arguments to update or create a ProjectDepartmentHistory.
     * @example
     * // Update or create a ProjectDepartmentHistory
     * const projectDepartmentHistory = await prisma.projectDepartmentHistory.upsert({
     *   create: {
     *     // ... data to create a ProjectDepartmentHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectDepartmentHistory we want to update
     *   }
     * })
     */
    upsert<T extends ProjectDepartmentHistoryUpsertArgs>(args: SelectSubset<T, ProjectDepartmentHistoryUpsertArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectDepartmentHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDepartmentHistoryCountArgs} args - Arguments to filter ProjectDepartmentHistories to count.
     * @example
     * // Count the number of ProjectDepartmentHistories
     * const count = await prisma.projectDepartmentHistory.count({
     *   where: {
     *     // ... the filter for the ProjectDepartmentHistories we want to count
     *   }
     * })
    **/
    count<T extends ProjectDepartmentHistoryCountArgs>(
      args?: Subset<T, ProjectDepartmentHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectDepartmentHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectDepartmentHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDepartmentHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectDepartmentHistoryAggregateArgs>(args: Subset<T, ProjectDepartmentHistoryAggregateArgs>): Prisma.PrismaPromise<GetProjectDepartmentHistoryAggregateType<T>>

    /**
     * Group by ProjectDepartmentHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectDepartmentHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectDepartmentHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectDepartmentHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ProjectDepartmentHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectDepartmentHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectDepartmentHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectDepartmentHistory model
   */
  readonly fields: ProjectDepartmentHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectDepartmentHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectDepartmentHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    corrections<T extends ProjectDepartmentHistory$correctionsArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDepartmentHistory$correctionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "findMany"> | Null>
    movedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    permissionGrantedBy<T extends ProjectDepartmentHistory$permissionGrantedByArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDepartmentHistory$permissionGrantedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    qaRounds<T extends ProjectDepartmentHistory$qaRoundsArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDepartmentHistory$qaRoundsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "findMany"> | Null>
    approvals<T extends ProjectDepartmentHistory$approvalsArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDepartmentHistory$approvalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectDepartmentHistory model
   */ 
  interface ProjectDepartmentHistoryFieldRefs {
    readonly id: FieldRef<"ProjectDepartmentHistory", 'String'>
    readonly projectId: FieldRef<"ProjectDepartmentHistory", 'String'>
    readonly fromDepartment: FieldRef<"ProjectDepartmentHistory", 'Department'>
    readonly toDepartment: FieldRef<"ProjectDepartmentHistory", 'Department'>
    readonly movedById: FieldRef<"ProjectDepartmentHistory", 'String'>
    readonly notes: FieldRef<"ProjectDepartmentHistory", 'String'>
    readonly createdAt: FieldRef<"ProjectDepartmentHistory", 'DateTime'>
    readonly workStatus: FieldRef<"ProjectDepartmentHistory", 'DepartmentWorkStatus'>
    readonly workStartDate: FieldRef<"ProjectDepartmentHistory", 'DateTime'>
    readonly workEndDate: FieldRef<"ProjectDepartmentHistory", 'DateTime'>
    readonly estimatedDays: FieldRef<"ProjectDepartmentHistory", 'Int'>
    readonly actualDays: FieldRef<"ProjectDepartmentHistory", 'Int'>
    readonly correctionCount: FieldRef<"ProjectDepartmentHistory", 'Int'>
    readonly permissionGrantedById: FieldRef<"ProjectDepartmentHistory", 'String'>
    readonly updatedAt: FieldRef<"ProjectDepartmentHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProjectDepartmentHistory findUnique
   */
  export type ProjectDepartmentHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectDepartmentHistory to fetch.
     */
    where: ProjectDepartmentHistoryWhereUniqueInput
  }

  /**
   * ProjectDepartmentHistory findUniqueOrThrow
   */
  export type ProjectDepartmentHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectDepartmentHistory to fetch.
     */
    where: ProjectDepartmentHistoryWhereUniqueInput
  }

  /**
   * ProjectDepartmentHistory findFirst
   */
  export type ProjectDepartmentHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectDepartmentHistory to fetch.
     */
    where?: ProjectDepartmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectDepartmentHistories to fetch.
     */
    orderBy?: ProjectDepartmentHistoryOrderByWithRelationInput | ProjectDepartmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectDepartmentHistories.
     */
    cursor?: ProjectDepartmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectDepartmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectDepartmentHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectDepartmentHistories.
     */
    distinct?: ProjectDepartmentHistoryScalarFieldEnum | ProjectDepartmentHistoryScalarFieldEnum[]
  }

  /**
   * ProjectDepartmentHistory findFirstOrThrow
   */
  export type ProjectDepartmentHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectDepartmentHistory to fetch.
     */
    where?: ProjectDepartmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectDepartmentHistories to fetch.
     */
    orderBy?: ProjectDepartmentHistoryOrderByWithRelationInput | ProjectDepartmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectDepartmentHistories.
     */
    cursor?: ProjectDepartmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectDepartmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectDepartmentHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectDepartmentHistories.
     */
    distinct?: ProjectDepartmentHistoryScalarFieldEnum | ProjectDepartmentHistoryScalarFieldEnum[]
  }

  /**
   * ProjectDepartmentHistory findMany
   */
  export type ProjectDepartmentHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectDepartmentHistories to fetch.
     */
    where?: ProjectDepartmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectDepartmentHistories to fetch.
     */
    orderBy?: ProjectDepartmentHistoryOrderByWithRelationInput | ProjectDepartmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectDepartmentHistories.
     */
    cursor?: ProjectDepartmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectDepartmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectDepartmentHistories.
     */
    skip?: number
    distinct?: ProjectDepartmentHistoryScalarFieldEnum | ProjectDepartmentHistoryScalarFieldEnum[]
  }

  /**
   * ProjectDepartmentHistory create
   */
  export type ProjectDepartmentHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectDepartmentHistory.
     */
    data: XOR<ProjectDepartmentHistoryCreateInput, ProjectDepartmentHistoryUncheckedCreateInput>
  }

  /**
   * ProjectDepartmentHistory createMany
   */
  export type ProjectDepartmentHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectDepartmentHistories.
     */
    data: ProjectDepartmentHistoryCreateManyInput | ProjectDepartmentHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectDepartmentHistory createManyAndReturn
   */
  export type ProjectDepartmentHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectDepartmentHistories.
     */
    data: ProjectDepartmentHistoryCreateManyInput | ProjectDepartmentHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectDepartmentHistory update
   */
  export type ProjectDepartmentHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectDepartmentHistory.
     */
    data: XOR<ProjectDepartmentHistoryUpdateInput, ProjectDepartmentHistoryUncheckedUpdateInput>
    /**
     * Choose, which ProjectDepartmentHistory to update.
     */
    where: ProjectDepartmentHistoryWhereUniqueInput
  }

  /**
   * ProjectDepartmentHistory updateMany
   */
  export type ProjectDepartmentHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectDepartmentHistories.
     */
    data: XOR<ProjectDepartmentHistoryUpdateManyMutationInput, ProjectDepartmentHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ProjectDepartmentHistories to update
     */
    where?: ProjectDepartmentHistoryWhereInput
  }

  /**
   * ProjectDepartmentHistory upsert
   */
  export type ProjectDepartmentHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectDepartmentHistory to update in case it exists.
     */
    where: ProjectDepartmentHistoryWhereUniqueInput
    /**
     * In case the ProjectDepartmentHistory found by the `where` argument doesn't exist, create a new ProjectDepartmentHistory with this data.
     */
    create: XOR<ProjectDepartmentHistoryCreateInput, ProjectDepartmentHistoryUncheckedCreateInput>
    /**
     * In case the ProjectDepartmentHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectDepartmentHistoryUpdateInput, ProjectDepartmentHistoryUncheckedUpdateInput>
  }

  /**
   * ProjectDepartmentHistory delete
   */
  export type ProjectDepartmentHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
    /**
     * Filter which ProjectDepartmentHistory to delete.
     */
    where: ProjectDepartmentHistoryWhereUniqueInput
  }

  /**
   * ProjectDepartmentHistory deleteMany
   */
  export type ProjectDepartmentHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectDepartmentHistories to delete
     */
    where?: ProjectDepartmentHistoryWhereInput
  }

  /**
   * ProjectDepartmentHistory.corrections
   */
  export type ProjectDepartmentHistory$correctionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    where?: DepartmentCorrectionWhereInput
    orderBy?: DepartmentCorrectionOrderByWithRelationInput | DepartmentCorrectionOrderByWithRelationInput[]
    cursor?: DepartmentCorrectionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentCorrectionScalarFieldEnum | DepartmentCorrectionScalarFieldEnum[]
  }

  /**
   * ProjectDepartmentHistory.permissionGrantedBy
   */
  export type ProjectDepartmentHistory$permissionGrantedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ProjectDepartmentHistory.qaRounds
   */
  export type ProjectDepartmentHistory$qaRoundsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    where?: QATestingRoundWhereInput
    orderBy?: QATestingRoundOrderByWithRelationInput | QATestingRoundOrderByWithRelationInput[]
    cursor?: QATestingRoundWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QATestingRoundScalarFieldEnum | QATestingRoundScalarFieldEnum[]
  }

  /**
   * ProjectDepartmentHistory.approvals
   */
  export type ProjectDepartmentHistory$approvalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    where?: WorkflowApprovalWhereInput
    orderBy?: WorkflowApprovalOrderByWithRelationInput | WorkflowApprovalOrderByWithRelationInput[]
    cursor?: WorkflowApprovalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WorkflowApprovalScalarFieldEnum | WorkflowApprovalScalarFieldEnum[]
  }

  /**
   * ProjectDepartmentHistory without action
   */
  export type ProjectDepartmentHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectDepartmentHistory
     */
    select?: ProjectDepartmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectDepartmentHistoryInclude<ExtArgs> | null
  }


  /**
   * Model DepartmentCorrection
   */

  export type AggregateDepartmentCorrection = {
    _count: DepartmentCorrectionCountAggregateOutputType | null
    _avg: DepartmentCorrectionAvgAggregateOutputType | null
    _sum: DepartmentCorrectionSumAggregateOutputType | null
    _min: DepartmentCorrectionMinAggregateOutputType | null
    _max: DepartmentCorrectionMaxAggregateOutputType | null
  }

  export type DepartmentCorrectionAvgAggregateOutputType = {
    estimatedHours: number | null
    actualHours: number | null
  }

  export type DepartmentCorrectionSumAggregateOutputType = {
    estimatedHours: number | null
    actualHours: number | null
  }

  export type DepartmentCorrectionMinAggregateOutputType = {
    id: string | null
    historyId: string | null
    correctionType: string | null
    description: string | null
    requestedById: string | null
    assignedToId: string | null
    status: $Enums.CorrectionStatus | null
    priority: $Enums.Priority | null
    requestedAt: Date | null
    resolvedAt: Date | null
    resolutionNotes: string | null
    estimatedHours: number | null
    actualHours: number | null
  }

  export type DepartmentCorrectionMaxAggregateOutputType = {
    id: string | null
    historyId: string | null
    correctionType: string | null
    description: string | null
    requestedById: string | null
    assignedToId: string | null
    status: $Enums.CorrectionStatus | null
    priority: $Enums.Priority | null
    requestedAt: Date | null
    resolvedAt: Date | null
    resolutionNotes: string | null
    estimatedHours: number | null
    actualHours: number | null
  }

  export type DepartmentCorrectionCountAggregateOutputType = {
    id: number
    historyId: number
    correctionType: number
    description: number
    requestedById: number
    assignedToId: number
    status: number
    priority: number
    requestedAt: number
    resolvedAt: number
    resolutionNotes: number
    estimatedHours: number
    actualHours: number
    _all: number
  }


  export type DepartmentCorrectionAvgAggregateInputType = {
    estimatedHours?: true
    actualHours?: true
  }

  export type DepartmentCorrectionSumAggregateInputType = {
    estimatedHours?: true
    actualHours?: true
  }

  export type DepartmentCorrectionMinAggregateInputType = {
    id?: true
    historyId?: true
    correctionType?: true
    description?: true
    requestedById?: true
    assignedToId?: true
    status?: true
    priority?: true
    requestedAt?: true
    resolvedAt?: true
    resolutionNotes?: true
    estimatedHours?: true
    actualHours?: true
  }

  export type DepartmentCorrectionMaxAggregateInputType = {
    id?: true
    historyId?: true
    correctionType?: true
    description?: true
    requestedById?: true
    assignedToId?: true
    status?: true
    priority?: true
    requestedAt?: true
    resolvedAt?: true
    resolutionNotes?: true
    estimatedHours?: true
    actualHours?: true
  }

  export type DepartmentCorrectionCountAggregateInputType = {
    id?: true
    historyId?: true
    correctionType?: true
    description?: true
    requestedById?: true
    assignedToId?: true
    status?: true
    priority?: true
    requestedAt?: true
    resolvedAt?: true
    resolutionNotes?: true
    estimatedHours?: true
    actualHours?: true
    _all?: true
  }

  export type DepartmentCorrectionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentCorrection to aggregate.
     */
    where?: DepartmentCorrectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentCorrections to fetch.
     */
    orderBy?: DepartmentCorrectionOrderByWithRelationInput | DepartmentCorrectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentCorrectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentCorrections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentCorrections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepartmentCorrections
    **/
    _count?: true | DepartmentCorrectionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartmentCorrectionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartmentCorrectionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentCorrectionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentCorrectionMaxAggregateInputType
  }

  export type GetDepartmentCorrectionAggregateType<T extends DepartmentCorrectionAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartmentCorrection]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartmentCorrection[P]>
      : GetScalarType<T[P], AggregateDepartmentCorrection[P]>
  }




  export type DepartmentCorrectionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentCorrectionWhereInput
    orderBy?: DepartmentCorrectionOrderByWithAggregationInput | DepartmentCorrectionOrderByWithAggregationInput[]
    by: DepartmentCorrectionScalarFieldEnum[] | DepartmentCorrectionScalarFieldEnum
    having?: DepartmentCorrectionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCorrectionCountAggregateInputType | true
    _avg?: DepartmentCorrectionAvgAggregateInputType
    _sum?: DepartmentCorrectionSumAggregateInputType
    _min?: DepartmentCorrectionMinAggregateInputType
    _max?: DepartmentCorrectionMaxAggregateInputType
  }

  export type DepartmentCorrectionGroupByOutputType = {
    id: string
    historyId: string
    correctionType: string
    description: string
    requestedById: string
    assignedToId: string | null
    status: $Enums.CorrectionStatus
    priority: $Enums.Priority
    requestedAt: Date
    resolvedAt: Date | null
    resolutionNotes: string | null
    estimatedHours: number | null
    actualHours: number | null
    _count: DepartmentCorrectionCountAggregateOutputType | null
    _avg: DepartmentCorrectionAvgAggregateOutputType | null
    _sum: DepartmentCorrectionSumAggregateOutputType | null
    _min: DepartmentCorrectionMinAggregateOutputType | null
    _max: DepartmentCorrectionMaxAggregateOutputType | null
  }

  type GetDepartmentCorrectionGroupByPayload<T extends DepartmentCorrectionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentCorrectionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentCorrectionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentCorrectionGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentCorrectionGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentCorrectionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historyId?: boolean
    correctionType?: boolean
    description?: boolean
    requestedById?: boolean
    assignedToId?: boolean
    status?: boolean
    priority?: boolean
    requestedAt?: boolean
    resolvedAt?: boolean
    resolutionNotes?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    assignedTo?: boolean | DepartmentCorrection$assignedToArgs<ExtArgs>
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentCorrection"]>

  export type DepartmentCorrectionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historyId?: boolean
    correctionType?: boolean
    description?: boolean
    requestedById?: boolean
    assignedToId?: boolean
    status?: boolean
    priority?: boolean
    requestedAt?: boolean
    resolvedAt?: boolean
    resolutionNotes?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
    assignedTo?: boolean | DepartmentCorrection$assignedToArgs<ExtArgs>
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentCorrection"]>

  export type DepartmentCorrectionSelectScalar = {
    id?: boolean
    historyId?: boolean
    correctionType?: boolean
    description?: boolean
    requestedById?: boolean
    assignedToId?: boolean
    status?: boolean
    priority?: boolean
    requestedAt?: boolean
    resolvedAt?: boolean
    resolutionNotes?: boolean
    estimatedHours?: boolean
    actualHours?: boolean
  }

  export type DepartmentCorrectionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | DepartmentCorrection$assignedToArgs<ExtArgs>
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type DepartmentCorrectionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | DepartmentCorrection$assignedToArgs<ExtArgs>
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $DepartmentCorrectionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepartmentCorrection"
    objects: {
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      departmentHistory: Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>
      requestedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      historyId: string
      correctionType: string
      description: string
      requestedById: string
      assignedToId: string | null
      status: $Enums.CorrectionStatus
      priority: $Enums.Priority
      requestedAt: Date
      resolvedAt: Date | null
      resolutionNotes: string | null
      estimatedHours: number | null
      actualHours: number | null
    }, ExtArgs["result"]["departmentCorrection"]>
    composites: {}
  }

  type DepartmentCorrectionGetPayload<S extends boolean | null | undefined | DepartmentCorrectionDefaultArgs> = $Result.GetResult<Prisma.$DepartmentCorrectionPayload, S>

  type DepartmentCorrectionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentCorrectionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentCorrectionCountAggregateInputType | true
    }

  export interface DepartmentCorrectionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepartmentCorrection'], meta: { name: 'DepartmentCorrection' } }
    /**
     * Find zero or one DepartmentCorrection that matches the filter.
     * @param {DepartmentCorrectionFindUniqueArgs} args - Arguments to find a DepartmentCorrection
     * @example
     * // Get one DepartmentCorrection
     * const departmentCorrection = await prisma.departmentCorrection.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentCorrectionFindUniqueArgs>(args: SelectSubset<T, DepartmentCorrectionFindUniqueArgs<ExtArgs>>): Prisma__DepartmentCorrectionClient<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DepartmentCorrection that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartmentCorrectionFindUniqueOrThrowArgs} args - Arguments to find a DepartmentCorrection
     * @example
     * // Get one DepartmentCorrection
     * const departmentCorrection = await prisma.departmentCorrection.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentCorrectionFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentCorrectionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentCorrectionClient<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DepartmentCorrection that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCorrectionFindFirstArgs} args - Arguments to find a DepartmentCorrection
     * @example
     * // Get one DepartmentCorrection
     * const departmentCorrection = await prisma.departmentCorrection.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentCorrectionFindFirstArgs>(args?: SelectSubset<T, DepartmentCorrectionFindFirstArgs<ExtArgs>>): Prisma__DepartmentCorrectionClient<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DepartmentCorrection that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCorrectionFindFirstOrThrowArgs} args - Arguments to find a DepartmentCorrection
     * @example
     * // Get one DepartmentCorrection
     * const departmentCorrection = await prisma.departmentCorrection.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentCorrectionFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentCorrectionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentCorrectionClient<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DepartmentCorrections that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCorrectionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepartmentCorrections
     * const departmentCorrections = await prisma.departmentCorrection.findMany()
     * 
     * // Get first 10 DepartmentCorrections
     * const departmentCorrections = await prisma.departmentCorrection.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentCorrectionWithIdOnly = await prisma.departmentCorrection.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentCorrectionFindManyArgs>(args?: SelectSubset<T, DepartmentCorrectionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DepartmentCorrection.
     * @param {DepartmentCorrectionCreateArgs} args - Arguments to create a DepartmentCorrection.
     * @example
     * // Create one DepartmentCorrection
     * const DepartmentCorrection = await prisma.departmentCorrection.create({
     *   data: {
     *     // ... data to create a DepartmentCorrection
     *   }
     * })
     * 
     */
    create<T extends DepartmentCorrectionCreateArgs>(args: SelectSubset<T, DepartmentCorrectionCreateArgs<ExtArgs>>): Prisma__DepartmentCorrectionClient<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DepartmentCorrections.
     * @param {DepartmentCorrectionCreateManyArgs} args - Arguments to create many DepartmentCorrections.
     * @example
     * // Create many DepartmentCorrections
     * const departmentCorrection = await prisma.departmentCorrection.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCorrectionCreateManyArgs>(args?: SelectSubset<T, DepartmentCorrectionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepartmentCorrections and returns the data saved in the database.
     * @param {DepartmentCorrectionCreateManyAndReturnArgs} args - Arguments to create many DepartmentCorrections.
     * @example
     * // Create many DepartmentCorrections
     * const departmentCorrection = await prisma.departmentCorrection.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepartmentCorrections and only return the `id`
     * const departmentCorrectionWithIdOnly = await prisma.departmentCorrection.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCorrectionCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCorrectionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DepartmentCorrection.
     * @param {DepartmentCorrectionDeleteArgs} args - Arguments to delete one DepartmentCorrection.
     * @example
     * // Delete one DepartmentCorrection
     * const DepartmentCorrection = await prisma.departmentCorrection.delete({
     *   where: {
     *     // ... filter to delete one DepartmentCorrection
     *   }
     * })
     * 
     */
    delete<T extends DepartmentCorrectionDeleteArgs>(args: SelectSubset<T, DepartmentCorrectionDeleteArgs<ExtArgs>>): Prisma__DepartmentCorrectionClient<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DepartmentCorrection.
     * @param {DepartmentCorrectionUpdateArgs} args - Arguments to update one DepartmentCorrection.
     * @example
     * // Update one DepartmentCorrection
     * const departmentCorrection = await prisma.departmentCorrection.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentCorrectionUpdateArgs>(args: SelectSubset<T, DepartmentCorrectionUpdateArgs<ExtArgs>>): Prisma__DepartmentCorrectionClient<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DepartmentCorrections.
     * @param {DepartmentCorrectionDeleteManyArgs} args - Arguments to filter DepartmentCorrections to delete.
     * @example
     * // Delete a few DepartmentCorrections
     * const { count } = await prisma.departmentCorrection.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentCorrectionDeleteManyArgs>(args?: SelectSubset<T, DepartmentCorrectionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentCorrections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCorrectionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepartmentCorrections
     * const departmentCorrection = await prisma.departmentCorrection.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentCorrectionUpdateManyArgs>(args: SelectSubset<T, DepartmentCorrectionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DepartmentCorrection.
     * @param {DepartmentCorrectionUpsertArgs} args - Arguments to update or create a DepartmentCorrection.
     * @example
     * // Update or create a DepartmentCorrection
     * const departmentCorrection = await prisma.departmentCorrection.upsert({
     *   create: {
     *     // ... data to create a DepartmentCorrection
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepartmentCorrection we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentCorrectionUpsertArgs>(args: SelectSubset<T, DepartmentCorrectionUpsertArgs<ExtArgs>>): Prisma__DepartmentCorrectionClient<$Result.GetResult<Prisma.$DepartmentCorrectionPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DepartmentCorrections.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCorrectionCountArgs} args - Arguments to filter DepartmentCorrections to count.
     * @example
     * // Count the number of DepartmentCorrections
     * const count = await prisma.departmentCorrection.count({
     *   where: {
     *     // ... the filter for the DepartmentCorrections we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCorrectionCountArgs>(
      args?: Subset<T, DepartmentCorrectionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCorrectionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepartmentCorrection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCorrectionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentCorrectionAggregateArgs>(args: Subset<T, DepartmentCorrectionAggregateArgs>): Prisma.PrismaPromise<GetDepartmentCorrectionAggregateType<T>>

    /**
     * Group by DepartmentCorrection.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCorrectionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentCorrectionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentCorrectionGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentCorrectionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentCorrectionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentCorrectionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepartmentCorrection model
   */
  readonly fields: DepartmentCorrectionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepartmentCorrection.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentCorrectionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignedTo<T extends DepartmentCorrection$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentCorrection$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    departmentHistory<T extends ProjectDepartmentHistoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDepartmentHistoryDefaultArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    requestedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepartmentCorrection model
   */ 
  interface DepartmentCorrectionFieldRefs {
    readonly id: FieldRef<"DepartmentCorrection", 'String'>
    readonly historyId: FieldRef<"DepartmentCorrection", 'String'>
    readonly correctionType: FieldRef<"DepartmentCorrection", 'String'>
    readonly description: FieldRef<"DepartmentCorrection", 'String'>
    readonly requestedById: FieldRef<"DepartmentCorrection", 'String'>
    readonly assignedToId: FieldRef<"DepartmentCorrection", 'String'>
    readonly status: FieldRef<"DepartmentCorrection", 'CorrectionStatus'>
    readonly priority: FieldRef<"DepartmentCorrection", 'Priority'>
    readonly requestedAt: FieldRef<"DepartmentCorrection", 'DateTime'>
    readonly resolvedAt: FieldRef<"DepartmentCorrection", 'DateTime'>
    readonly resolutionNotes: FieldRef<"DepartmentCorrection", 'String'>
    readonly estimatedHours: FieldRef<"DepartmentCorrection", 'Int'>
    readonly actualHours: FieldRef<"DepartmentCorrection", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * DepartmentCorrection findUnique
   */
  export type DepartmentCorrectionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentCorrection to fetch.
     */
    where: DepartmentCorrectionWhereUniqueInput
  }

  /**
   * DepartmentCorrection findUniqueOrThrow
   */
  export type DepartmentCorrectionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentCorrection to fetch.
     */
    where: DepartmentCorrectionWhereUniqueInput
  }

  /**
   * DepartmentCorrection findFirst
   */
  export type DepartmentCorrectionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentCorrection to fetch.
     */
    where?: DepartmentCorrectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentCorrections to fetch.
     */
    orderBy?: DepartmentCorrectionOrderByWithRelationInput | DepartmentCorrectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentCorrections.
     */
    cursor?: DepartmentCorrectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentCorrections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentCorrections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentCorrections.
     */
    distinct?: DepartmentCorrectionScalarFieldEnum | DepartmentCorrectionScalarFieldEnum[]
  }

  /**
   * DepartmentCorrection findFirstOrThrow
   */
  export type DepartmentCorrectionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentCorrection to fetch.
     */
    where?: DepartmentCorrectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentCorrections to fetch.
     */
    orderBy?: DepartmentCorrectionOrderByWithRelationInput | DepartmentCorrectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentCorrections.
     */
    cursor?: DepartmentCorrectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentCorrections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentCorrections.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentCorrections.
     */
    distinct?: DepartmentCorrectionScalarFieldEnum | DepartmentCorrectionScalarFieldEnum[]
  }

  /**
   * DepartmentCorrection findMany
   */
  export type DepartmentCorrectionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentCorrections to fetch.
     */
    where?: DepartmentCorrectionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentCorrections to fetch.
     */
    orderBy?: DepartmentCorrectionOrderByWithRelationInput | DepartmentCorrectionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepartmentCorrections.
     */
    cursor?: DepartmentCorrectionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentCorrections from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentCorrections.
     */
    skip?: number
    distinct?: DepartmentCorrectionScalarFieldEnum | DepartmentCorrectionScalarFieldEnum[]
  }

  /**
   * DepartmentCorrection create
   */
  export type DepartmentCorrectionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    /**
     * The data needed to create a DepartmentCorrection.
     */
    data: XOR<DepartmentCorrectionCreateInput, DepartmentCorrectionUncheckedCreateInput>
  }

  /**
   * DepartmentCorrection createMany
   */
  export type DepartmentCorrectionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepartmentCorrections.
     */
    data: DepartmentCorrectionCreateManyInput | DepartmentCorrectionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DepartmentCorrection createManyAndReturn
   */
  export type DepartmentCorrectionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DepartmentCorrections.
     */
    data: DepartmentCorrectionCreateManyInput | DepartmentCorrectionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentCorrection update
   */
  export type DepartmentCorrectionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    /**
     * The data needed to update a DepartmentCorrection.
     */
    data: XOR<DepartmentCorrectionUpdateInput, DepartmentCorrectionUncheckedUpdateInput>
    /**
     * Choose, which DepartmentCorrection to update.
     */
    where: DepartmentCorrectionWhereUniqueInput
  }

  /**
   * DepartmentCorrection updateMany
   */
  export type DepartmentCorrectionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepartmentCorrections.
     */
    data: XOR<DepartmentCorrectionUpdateManyMutationInput, DepartmentCorrectionUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentCorrections to update
     */
    where?: DepartmentCorrectionWhereInput
  }

  /**
   * DepartmentCorrection upsert
   */
  export type DepartmentCorrectionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    /**
     * The filter to search for the DepartmentCorrection to update in case it exists.
     */
    where: DepartmentCorrectionWhereUniqueInput
    /**
     * In case the DepartmentCorrection found by the `where` argument doesn't exist, create a new DepartmentCorrection with this data.
     */
    create: XOR<DepartmentCorrectionCreateInput, DepartmentCorrectionUncheckedCreateInput>
    /**
     * In case the DepartmentCorrection was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentCorrectionUpdateInput, DepartmentCorrectionUncheckedUpdateInput>
  }

  /**
   * DepartmentCorrection delete
   */
  export type DepartmentCorrectionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
    /**
     * Filter which DepartmentCorrection to delete.
     */
    where: DepartmentCorrectionWhereUniqueInput
  }

  /**
   * DepartmentCorrection deleteMany
   */
  export type DepartmentCorrectionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentCorrections to delete
     */
    where?: DepartmentCorrectionWhereInput
  }

  /**
   * DepartmentCorrection.assignedTo
   */
  export type DepartmentCorrection$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * DepartmentCorrection without action
   */
  export type DepartmentCorrectionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCorrection
     */
    select?: DepartmentCorrectionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentCorrectionInclude<ExtArgs> | null
  }


  /**
   * Model WorkflowApproval
   */

  export type AggregateWorkflowApproval = {
    _count: WorkflowApprovalCountAggregateOutputType | null
    _min: WorkflowApprovalMinAggregateOutputType | null
    _max: WorkflowApprovalMaxAggregateOutputType | null
  }

  export type WorkflowApprovalMinAggregateOutputType = {
    id: string | null
    historyId: string | null
    approvalType: $Enums.ApprovalType | null
    status: $Enums.ApprovalStatus | null
    requestedById: string | null
    reviewedById: string | null
    requestedAt: Date | null
    reviewedAt: Date | null
    comments: string | null
    rejectionReason: string | null
  }

  export type WorkflowApprovalMaxAggregateOutputType = {
    id: string | null
    historyId: string | null
    approvalType: $Enums.ApprovalType | null
    status: $Enums.ApprovalStatus | null
    requestedById: string | null
    reviewedById: string | null
    requestedAt: Date | null
    reviewedAt: Date | null
    comments: string | null
    rejectionReason: string | null
  }

  export type WorkflowApprovalCountAggregateOutputType = {
    id: number
    historyId: number
    approvalType: number
    status: number
    requestedById: number
    reviewedById: number
    requestedAt: number
    reviewedAt: number
    comments: number
    rejectionReason: number
    attachments: number
    _all: number
  }


  export type WorkflowApprovalMinAggregateInputType = {
    id?: true
    historyId?: true
    approvalType?: true
    status?: true
    requestedById?: true
    reviewedById?: true
    requestedAt?: true
    reviewedAt?: true
    comments?: true
    rejectionReason?: true
  }

  export type WorkflowApprovalMaxAggregateInputType = {
    id?: true
    historyId?: true
    approvalType?: true
    status?: true
    requestedById?: true
    reviewedById?: true
    requestedAt?: true
    reviewedAt?: true
    comments?: true
    rejectionReason?: true
  }

  export type WorkflowApprovalCountAggregateInputType = {
    id?: true
    historyId?: true
    approvalType?: true
    status?: true
    requestedById?: true
    reviewedById?: true
    requestedAt?: true
    reviewedAt?: true
    comments?: true
    rejectionReason?: true
    attachments?: true
    _all?: true
  }

  export type WorkflowApprovalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowApproval to aggregate.
     */
    where?: WorkflowApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowApprovals to fetch.
     */
    orderBy?: WorkflowApprovalOrderByWithRelationInput | WorkflowApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WorkflowApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowApprovals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WorkflowApprovals
    **/
    _count?: true | WorkflowApprovalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WorkflowApprovalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WorkflowApprovalMaxAggregateInputType
  }

  export type GetWorkflowApprovalAggregateType<T extends WorkflowApprovalAggregateArgs> = {
        [P in keyof T & keyof AggregateWorkflowApproval]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWorkflowApproval[P]>
      : GetScalarType<T[P], AggregateWorkflowApproval[P]>
  }




  export type WorkflowApprovalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WorkflowApprovalWhereInput
    orderBy?: WorkflowApprovalOrderByWithAggregationInput | WorkflowApprovalOrderByWithAggregationInput[]
    by: WorkflowApprovalScalarFieldEnum[] | WorkflowApprovalScalarFieldEnum
    having?: WorkflowApprovalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WorkflowApprovalCountAggregateInputType | true
    _min?: WorkflowApprovalMinAggregateInputType
    _max?: WorkflowApprovalMaxAggregateInputType
  }

  export type WorkflowApprovalGroupByOutputType = {
    id: string
    historyId: string
    approvalType: $Enums.ApprovalType
    status: $Enums.ApprovalStatus
    requestedById: string
    reviewedById: string | null
    requestedAt: Date
    reviewedAt: Date | null
    comments: string | null
    rejectionReason: string | null
    attachments: string[]
    _count: WorkflowApprovalCountAggregateOutputType | null
    _min: WorkflowApprovalMinAggregateOutputType | null
    _max: WorkflowApprovalMaxAggregateOutputType | null
  }

  type GetWorkflowApprovalGroupByPayload<T extends WorkflowApprovalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WorkflowApprovalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WorkflowApprovalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WorkflowApprovalGroupByOutputType[P]>
            : GetScalarType<T[P], WorkflowApprovalGroupByOutputType[P]>
        }
      >
    >


  export type WorkflowApprovalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historyId?: boolean
    approvalType?: boolean
    status?: boolean
    requestedById?: boolean
    reviewedById?: boolean
    requestedAt?: boolean
    reviewedAt?: boolean
    comments?: boolean
    rejectionReason?: boolean
    attachments?: boolean
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
    reviewedBy?: boolean | WorkflowApproval$reviewedByArgs<ExtArgs>
  }, ExtArgs["result"]["workflowApproval"]>

  export type WorkflowApprovalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historyId?: boolean
    approvalType?: boolean
    status?: boolean
    requestedById?: boolean
    reviewedById?: boolean
    requestedAt?: boolean
    reviewedAt?: boolean
    comments?: boolean
    rejectionReason?: boolean
    attachments?: boolean
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
    reviewedBy?: boolean | WorkflowApproval$reviewedByArgs<ExtArgs>
  }, ExtArgs["result"]["workflowApproval"]>

  export type WorkflowApprovalSelectScalar = {
    id?: boolean
    historyId?: boolean
    approvalType?: boolean
    status?: boolean
    requestedById?: boolean
    reviewedById?: boolean
    requestedAt?: boolean
    reviewedAt?: boolean
    comments?: boolean
    rejectionReason?: boolean
    attachments?: boolean
  }

  export type WorkflowApprovalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
    reviewedBy?: boolean | WorkflowApproval$reviewedByArgs<ExtArgs>
  }
  export type WorkflowApprovalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
    reviewedBy?: boolean | WorkflowApproval$reviewedByArgs<ExtArgs>
  }

  export type $WorkflowApprovalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WorkflowApproval"
    objects: {
      departmentHistory: Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>
      requestedBy: Prisma.$UserPayload<ExtArgs>
      reviewedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      historyId: string
      approvalType: $Enums.ApprovalType
      status: $Enums.ApprovalStatus
      requestedById: string
      reviewedById: string | null
      requestedAt: Date
      reviewedAt: Date | null
      comments: string | null
      rejectionReason: string | null
      attachments: string[]
    }, ExtArgs["result"]["workflowApproval"]>
    composites: {}
  }

  type WorkflowApprovalGetPayload<S extends boolean | null | undefined | WorkflowApprovalDefaultArgs> = $Result.GetResult<Prisma.$WorkflowApprovalPayload, S>

  type WorkflowApprovalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<WorkflowApprovalFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: WorkflowApprovalCountAggregateInputType | true
    }

  export interface WorkflowApprovalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WorkflowApproval'], meta: { name: 'WorkflowApproval' } }
    /**
     * Find zero or one WorkflowApproval that matches the filter.
     * @param {WorkflowApprovalFindUniqueArgs} args - Arguments to find a WorkflowApproval
     * @example
     * // Get one WorkflowApproval
     * const workflowApproval = await prisma.workflowApproval.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WorkflowApprovalFindUniqueArgs>(args: SelectSubset<T, WorkflowApprovalFindUniqueArgs<ExtArgs>>): Prisma__WorkflowApprovalClient<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one WorkflowApproval that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {WorkflowApprovalFindUniqueOrThrowArgs} args - Arguments to find a WorkflowApproval
     * @example
     * // Get one WorkflowApproval
     * const workflowApproval = await prisma.workflowApproval.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WorkflowApprovalFindUniqueOrThrowArgs>(args: SelectSubset<T, WorkflowApprovalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WorkflowApprovalClient<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first WorkflowApproval that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowApprovalFindFirstArgs} args - Arguments to find a WorkflowApproval
     * @example
     * // Get one WorkflowApproval
     * const workflowApproval = await prisma.workflowApproval.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WorkflowApprovalFindFirstArgs>(args?: SelectSubset<T, WorkflowApprovalFindFirstArgs<ExtArgs>>): Prisma__WorkflowApprovalClient<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first WorkflowApproval that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowApprovalFindFirstOrThrowArgs} args - Arguments to find a WorkflowApproval
     * @example
     * // Get one WorkflowApproval
     * const workflowApproval = await prisma.workflowApproval.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WorkflowApprovalFindFirstOrThrowArgs>(args?: SelectSubset<T, WorkflowApprovalFindFirstOrThrowArgs<ExtArgs>>): Prisma__WorkflowApprovalClient<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more WorkflowApprovals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowApprovalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WorkflowApprovals
     * const workflowApprovals = await prisma.workflowApproval.findMany()
     * 
     * // Get first 10 WorkflowApprovals
     * const workflowApprovals = await prisma.workflowApproval.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const workflowApprovalWithIdOnly = await prisma.workflowApproval.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WorkflowApprovalFindManyArgs>(args?: SelectSubset<T, WorkflowApprovalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a WorkflowApproval.
     * @param {WorkflowApprovalCreateArgs} args - Arguments to create a WorkflowApproval.
     * @example
     * // Create one WorkflowApproval
     * const WorkflowApproval = await prisma.workflowApproval.create({
     *   data: {
     *     // ... data to create a WorkflowApproval
     *   }
     * })
     * 
     */
    create<T extends WorkflowApprovalCreateArgs>(args: SelectSubset<T, WorkflowApprovalCreateArgs<ExtArgs>>): Prisma__WorkflowApprovalClient<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many WorkflowApprovals.
     * @param {WorkflowApprovalCreateManyArgs} args - Arguments to create many WorkflowApprovals.
     * @example
     * // Create many WorkflowApprovals
     * const workflowApproval = await prisma.workflowApproval.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WorkflowApprovalCreateManyArgs>(args?: SelectSubset<T, WorkflowApprovalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WorkflowApprovals and returns the data saved in the database.
     * @param {WorkflowApprovalCreateManyAndReturnArgs} args - Arguments to create many WorkflowApprovals.
     * @example
     * // Create many WorkflowApprovals
     * const workflowApproval = await prisma.workflowApproval.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WorkflowApprovals and only return the `id`
     * const workflowApprovalWithIdOnly = await prisma.workflowApproval.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WorkflowApprovalCreateManyAndReturnArgs>(args?: SelectSubset<T, WorkflowApprovalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a WorkflowApproval.
     * @param {WorkflowApprovalDeleteArgs} args - Arguments to delete one WorkflowApproval.
     * @example
     * // Delete one WorkflowApproval
     * const WorkflowApproval = await prisma.workflowApproval.delete({
     *   where: {
     *     // ... filter to delete one WorkflowApproval
     *   }
     * })
     * 
     */
    delete<T extends WorkflowApprovalDeleteArgs>(args: SelectSubset<T, WorkflowApprovalDeleteArgs<ExtArgs>>): Prisma__WorkflowApprovalClient<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one WorkflowApproval.
     * @param {WorkflowApprovalUpdateArgs} args - Arguments to update one WorkflowApproval.
     * @example
     * // Update one WorkflowApproval
     * const workflowApproval = await prisma.workflowApproval.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WorkflowApprovalUpdateArgs>(args: SelectSubset<T, WorkflowApprovalUpdateArgs<ExtArgs>>): Prisma__WorkflowApprovalClient<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more WorkflowApprovals.
     * @param {WorkflowApprovalDeleteManyArgs} args - Arguments to filter WorkflowApprovals to delete.
     * @example
     * // Delete a few WorkflowApprovals
     * const { count } = await prisma.workflowApproval.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WorkflowApprovalDeleteManyArgs>(args?: SelectSubset<T, WorkflowApprovalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WorkflowApprovals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowApprovalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WorkflowApprovals
     * const workflowApproval = await prisma.workflowApproval.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WorkflowApprovalUpdateManyArgs>(args: SelectSubset<T, WorkflowApprovalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one WorkflowApproval.
     * @param {WorkflowApprovalUpsertArgs} args - Arguments to update or create a WorkflowApproval.
     * @example
     * // Update or create a WorkflowApproval
     * const workflowApproval = await prisma.workflowApproval.upsert({
     *   create: {
     *     // ... data to create a WorkflowApproval
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WorkflowApproval we want to update
     *   }
     * })
     */
    upsert<T extends WorkflowApprovalUpsertArgs>(args: SelectSubset<T, WorkflowApprovalUpsertArgs<ExtArgs>>): Prisma__WorkflowApprovalClient<$Result.GetResult<Prisma.$WorkflowApprovalPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of WorkflowApprovals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowApprovalCountArgs} args - Arguments to filter WorkflowApprovals to count.
     * @example
     * // Count the number of WorkflowApprovals
     * const count = await prisma.workflowApproval.count({
     *   where: {
     *     // ... the filter for the WorkflowApprovals we want to count
     *   }
     * })
    **/
    count<T extends WorkflowApprovalCountArgs>(
      args?: Subset<T, WorkflowApprovalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WorkflowApprovalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WorkflowApproval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowApprovalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WorkflowApprovalAggregateArgs>(args: Subset<T, WorkflowApprovalAggregateArgs>): Prisma.PrismaPromise<GetWorkflowApprovalAggregateType<T>>

    /**
     * Group by WorkflowApproval.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WorkflowApprovalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WorkflowApprovalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WorkflowApprovalGroupByArgs['orderBy'] }
        : { orderBy?: WorkflowApprovalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WorkflowApprovalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWorkflowApprovalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WorkflowApproval model
   */
  readonly fields: WorkflowApprovalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WorkflowApproval.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WorkflowApprovalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    departmentHistory<T extends ProjectDepartmentHistoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDepartmentHistoryDefaultArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    requestedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    reviewedBy<T extends WorkflowApproval$reviewedByArgs<ExtArgs> = {}>(args?: Subset<T, WorkflowApproval$reviewedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WorkflowApproval model
   */ 
  interface WorkflowApprovalFieldRefs {
    readonly id: FieldRef<"WorkflowApproval", 'String'>
    readonly historyId: FieldRef<"WorkflowApproval", 'String'>
    readonly approvalType: FieldRef<"WorkflowApproval", 'ApprovalType'>
    readonly status: FieldRef<"WorkflowApproval", 'ApprovalStatus'>
    readonly requestedById: FieldRef<"WorkflowApproval", 'String'>
    readonly reviewedById: FieldRef<"WorkflowApproval", 'String'>
    readonly requestedAt: FieldRef<"WorkflowApproval", 'DateTime'>
    readonly reviewedAt: FieldRef<"WorkflowApproval", 'DateTime'>
    readonly comments: FieldRef<"WorkflowApproval", 'String'>
    readonly rejectionReason: FieldRef<"WorkflowApproval", 'String'>
    readonly attachments: FieldRef<"WorkflowApproval", 'String[]'>
  }
    

  // Custom InputTypes
  /**
   * WorkflowApproval findUnique
   */
  export type WorkflowApprovalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowApproval to fetch.
     */
    where: WorkflowApprovalWhereUniqueInput
  }

  /**
   * WorkflowApproval findUniqueOrThrow
   */
  export type WorkflowApprovalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowApproval to fetch.
     */
    where: WorkflowApprovalWhereUniqueInput
  }

  /**
   * WorkflowApproval findFirst
   */
  export type WorkflowApprovalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowApproval to fetch.
     */
    where?: WorkflowApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowApprovals to fetch.
     */
    orderBy?: WorkflowApprovalOrderByWithRelationInput | WorkflowApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowApprovals.
     */
    cursor?: WorkflowApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowApprovals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowApprovals.
     */
    distinct?: WorkflowApprovalScalarFieldEnum | WorkflowApprovalScalarFieldEnum[]
  }

  /**
   * WorkflowApproval findFirstOrThrow
   */
  export type WorkflowApprovalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowApproval to fetch.
     */
    where?: WorkflowApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowApprovals to fetch.
     */
    orderBy?: WorkflowApprovalOrderByWithRelationInput | WorkflowApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WorkflowApprovals.
     */
    cursor?: WorkflowApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowApprovals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WorkflowApprovals.
     */
    distinct?: WorkflowApprovalScalarFieldEnum | WorkflowApprovalScalarFieldEnum[]
  }

  /**
   * WorkflowApproval findMany
   */
  export type WorkflowApprovalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    /**
     * Filter, which WorkflowApprovals to fetch.
     */
    where?: WorkflowApprovalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WorkflowApprovals to fetch.
     */
    orderBy?: WorkflowApprovalOrderByWithRelationInput | WorkflowApprovalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WorkflowApprovals.
     */
    cursor?: WorkflowApprovalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WorkflowApprovals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WorkflowApprovals.
     */
    skip?: number
    distinct?: WorkflowApprovalScalarFieldEnum | WorkflowApprovalScalarFieldEnum[]
  }

  /**
   * WorkflowApproval create
   */
  export type WorkflowApprovalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    /**
     * The data needed to create a WorkflowApproval.
     */
    data: XOR<WorkflowApprovalCreateInput, WorkflowApprovalUncheckedCreateInput>
  }

  /**
   * WorkflowApproval createMany
   */
  export type WorkflowApprovalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WorkflowApprovals.
     */
    data: WorkflowApprovalCreateManyInput | WorkflowApprovalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WorkflowApproval createManyAndReturn
   */
  export type WorkflowApprovalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many WorkflowApprovals.
     */
    data: WorkflowApprovalCreateManyInput | WorkflowApprovalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WorkflowApproval update
   */
  export type WorkflowApprovalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    /**
     * The data needed to update a WorkflowApproval.
     */
    data: XOR<WorkflowApprovalUpdateInput, WorkflowApprovalUncheckedUpdateInput>
    /**
     * Choose, which WorkflowApproval to update.
     */
    where: WorkflowApprovalWhereUniqueInput
  }

  /**
   * WorkflowApproval updateMany
   */
  export type WorkflowApprovalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WorkflowApprovals.
     */
    data: XOR<WorkflowApprovalUpdateManyMutationInput, WorkflowApprovalUncheckedUpdateManyInput>
    /**
     * Filter which WorkflowApprovals to update
     */
    where?: WorkflowApprovalWhereInput
  }

  /**
   * WorkflowApproval upsert
   */
  export type WorkflowApprovalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    /**
     * The filter to search for the WorkflowApproval to update in case it exists.
     */
    where: WorkflowApprovalWhereUniqueInput
    /**
     * In case the WorkflowApproval found by the `where` argument doesn't exist, create a new WorkflowApproval with this data.
     */
    create: XOR<WorkflowApprovalCreateInput, WorkflowApprovalUncheckedCreateInput>
    /**
     * In case the WorkflowApproval was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WorkflowApprovalUpdateInput, WorkflowApprovalUncheckedUpdateInput>
  }

  /**
   * WorkflowApproval delete
   */
  export type WorkflowApprovalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
    /**
     * Filter which WorkflowApproval to delete.
     */
    where: WorkflowApprovalWhereUniqueInput
  }

  /**
   * WorkflowApproval deleteMany
   */
  export type WorkflowApprovalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WorkflowApprovals to delete
     */
    where?: WorkflowApprovalWhereInput
  }

  /**
   * WorkflowApproval.reviewedBy
   */
  export type WorkflowApproval$reviewedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * WorkflowApproval without action
   */
  export type WorkflowApprovalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WorkflowApproval
     */
    select?: WorkflowApprovalSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WorkflowApprovalInclude<ExtArgs> | null
  }


  /**
   * Model QATestingRound
   */

  export type AggregateQATestingRound = {
    _count: QATestingRoundCountAggregateOutputType | null
    _avg: QATestingRoundAvgAggregateOutputType | null
    _sum: QATestingRoundSumAggregateOutputType | null
    _min: QATestingRoundMinAggregateOutputType | null
    _max: QATestingRoundMaxAggregateOutputType | null
  }

  export type QATestingRoundAvgAggregateOutputType = {
    roundNumber: number | null
    bugsFound: number | null
    criticalBugs: number | null
  }

  export type QATestingRoundSumAggregateOutputType = {
    roundNumber: number | null
    bugsFound: number | null
    criticalBugs: number | null
  }

  export type QATestingRoundMinAggregateOutputType = {
    id: string | null
    historyId: string | null
    roundNumber: number | null
    qaType: $Enums.QAType | null
    status: $Enums.QAStatus | null
    startedAt: Date | null
    completedAt: Date | null
    testedById: string | null
    bugsFound: number | null
    criticalBugs: number | null
    testResults: string | null
    rejectionReason: string | null
  }

  export type QATestingRoundMaxAggregateOutputType = {
    id: string | null
    historyId: string | null
    roundNumber: number | null
    qaType: $Enums.QAType | null
    status: $Enums.QAStatus | null
    startedAt: Date | null
    completedAt: Date | null
    testedById: string | null
    bugsFound: number | null
    criticalBugs: number | null
    testResults: string | null
    rejectionReason: string | null
  }

  export type QATestingRoundCountAggregateOutputType = {
    id: number
    historyId: number
    roundNumber: number
    qaType: number
    status: number
    startedAt: number
    completedAt: number
    testedById: number
    bugsFound: number
    criticalBugs: number
    testResults: number
    rejectionReason: number
    _all: number
  }


  export type QATestingRoundAvgAggregateInputType = {
    roundNumber?: true
    bugsFound?: true
    criticalBugs?: true
  }

  export type QATestingRoundSumAggregateInputType = {
    roundNumber?: true
    bugsFound?: true
    criticalBugs?: true
  }

  export type QATestingRoundMinAggregateInputType = {
    id?: true
    historyId?: true
    roundNumber?: true
    qaType?: true
    status?: true
    startedAt?: true
    completedAt?: true
    testedById?: true
    bugsFound?: true
    criticalBugs?: true
    testResults?: true
    rejectionReason?: true
  }

  export type QATestingRoundMaxAggregateInputType = {
    id?: true
    historyId?: true
    roundNumber?: true
    qaType?: true
    status?: true
    startedAt?: true
    completedAt?: true
    testedById?: true
    bugsFound?: true
    criticalBugs?: true
    testResults?: true
    rejectionReason?: true
  }

  export type QATestingRoundCountAggregateInputType = {
    id?: true
    historyId?: true
    roundNumber?: true
    qaType?: true
    status?: true
    startedAt?: true
    completedAt?: true
    testedById?: true
    bugsFound?: true
    criticalBugs?: true
    testResults?: true
    rejectionReason?: true
    _all?: true
  }

  export type QATestingRoundAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QATestingRound to aggregate.
     */
    where?: QATestingRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QATestingRounds to fetch.
     */
    orderBy?: QATestingRoundOrderByWithRelationInput | QATestingRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QATestingRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QATestingRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QATestingRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QATestingRounds
    **/
    _count?: true | QATestingRoundCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: QATestingRoundAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: QATestingRoundSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QATestingRoundMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QATestingRoundMaxAggregateInputType
  }

  export type GetQATestingRoundAggregateType<T extends QATestingRoundAggregateArgs> = {
        [P in keyof T & keyof AggregateQATestingRound]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQATestingRound[P]>
      : GetScalarType<T[P], AggregateQATestingRound[P]>
  }




  export type QATestingRoundGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QATestingRoundWhereInput
    orderBy?: QATestingRoundOrderByWithAggregationInput | QATestingRoundOrderByWithAggregationInput[]
    by: QATestingRoundScalarFieldEnum[] | QATestingRoundScalarFieldEnum
    having?: QATestingRoundScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QATestingRoundCountAggregateInputType | true
    _avg?: QATestingRoundAvgAggregateInputType
    _sum?: QATestingRoundSumAggregateInputType
    _min?: QATestingRoundMinAggregateInputType
    _max?: QATestingRoundMaxAggregateInputType
  }

  export type QATestingRoundGroupByOutputType = {
    id: string
    historyId: string
    roundNumber: number
    qaType: $Enums.QAType
    status: $Enums.QAStatus
    startedAt: Date
    completedAt: Date | null
    testedById: string
    bugsFound: number
    criticalBugs: number
    testResults: string | null
    rejectionReason: string | null
    _count: QATestingRoundCountAggregateOutputType | null
    _avg: QATestingRoundAvgAggregateOutputType | null
    _sum: QATestingRoundSumAggregateOutputType | null
    _min: QATestingRoundMinAggregateOutputType | null
    _max: QATestingRoundMaxAggregateOutputType | null
  }

  type GetQATestingRoundGroupByPayload<T extends QATestingRoundGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QATestingRoundGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QATestingRoundGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QATestingRoundGroupByOutputType[P]>
            : GetScalarType<T[P], QATestingRoundGroupByOutputType[P]>
        }
      >
    >


  export type QATestingRoundSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historyId?: boolean
    roundNumber?: boolean
    qaType?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    testedById?: boolean
    bugsFound?: boolean
    criticalBugs?: boolean
    testResults?: boolean
    rejectionReason?: boolean
    bugs?: boolean | QATestingRound$bugsArgs<ExtArgs>
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    testedBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | QATestingRoundCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qATestingRound"]>

  export type QATestingRoundSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    historyId?: boolean
    roundNumber?: boolean
    qaType?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    testedById?: boolean
    bugsFound?: boolean
    criticalBugs?: boolean
    testResults?: boolean
    rejectionReason?: boolean
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    testedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qATestingRound"]>

  export type QATestingRoundSelectScalar = {
    id?: boolean
    historyId?: boolean
    roundNumber?: boolean
    qaType?: boolean
    status?: boolean
    startedAt?: boolean
    completedAt?: boolean
    testedById?: boolean
    bugsFound?: boolean
    criticalBugs?: boolean
    testResults?: boolean
    rejectionReason?: boolean
  }

  export type QATestingRoundInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bugs?: boolean | QATestingRound$bugsArgs<ExtArgs>
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    testedBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | QATestingRoundCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type QATestingRoundIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    departmentHistory?: boolean | ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    testedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $QATestingRoundPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QATestingRound"
    objects: {
      bugs: Prisma.$QABugPayload<ExtArgs>[]
      departmentHistory: Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>
      testedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      historyId: string
      roundNumber: number
      qaType: $Enums.QAType
      status: $Enums.QAStatus
      startedAt: Date
      completedAt: Date | null
      testedById: string
      bugsFound: number
      criticalBugs: number
      testResults: string | null
      rejectionReason: string | null
    }, ExtArgs["result"]["qATestingRound"]>
    composites: {}
  }

  type QATestingRoundGetPayload<S extends boolean | null | undefined | QATestingRoundDefaultArgs> = $Result.GetResult<Prisma.$QATestingRoundPayload, S>

  type QATestingRoundCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QATestingRoundFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QATestingRoundCountAggregateInputType | true
    }

  export interface QATestingRoundDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QATestingRound'], meta: { name: 'QATestingRound' } }
    /**
     * Find zero or one QATestingRound that matches the filter.
     * @param {QATestingRoundFindUniqueArgs} args - Arguments to find a QATestingRound
     * @example
     * // Get one QATestingRound
     * const qATestingRound = await prisma.qATestingRound.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QATestingRoundFindUniqueArgs>(args: SelectSubset<T, QATestingRoundFindUniqueArgs<ExtArgs>>): Prisma__QATestingRoundClient<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QATestingRound that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QATestingRoundFindUniqueOrThrowArgs} args - Arguments to find a QATestingRound
     * @example
     * // Get one QATestingRound
     * const qATestingRound = await prisma.qATestingRound.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QATestingRoundFindUniqueOrThrowArgs>(args: SelectSubset<T, QATestingRoundFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QATestingRoundClient<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QATestingRound that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QATestingRoundFindFirstArgs} args - Arguments to find a QATestingRound
     * @example
     * // Get one QATestingRound
     * const qATestingRound = await prisma.qATestingRound.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QATestingRoundFindFirstArgs>(args?: SelectSubset<T, QATestingRoundFindFirstArgs<ExtArgs>>): Prisma__QATestingRoundClient<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QATestingRound that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QATestingRoundFindFirstOrThrowArgs} args - Arguments to find a QATestingRound
     * @example
     * // Get one QATestingRound
     * const qATestingRound = await prisma.qATestingRound.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QATestingRoundFindFirstOrThrowArgs>(args?: SelectSubset<T, QATestingRoundFindFirstOrThrowArgs<ExtArgs>>): Prisma__QATestingRoundClient<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QATestingRounds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QATestingRoundFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QATestingRounds
     * const qATestingRounds = await prisma.qATestingRound.findMany()
     * 
     * // Get first 10 QATestingRounds
     * const qATestingRounds = await prisma.qATestingRound.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const qATestingRoundWithIdOnly = await prisma.qATestingRound.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QATestingRoundFindManyArgs>(args?: SelectSubset<T, QATestingRoundFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QATestingRound.
     * @param {QATestingRoundCreateArgs} args - Arguments to create a QATestingRound.
     * @example
     * // Create one QATestingRound
     * const QATestingRound = await prisma.qATestingRound.create({
     *   data: {
     *     // ... data to create a QATestingRound
     *   }
     * })
     * 
     */
    create<T extends QATestingRoundCreateArgs>(args: SelectSubset<T, QATestingRoundCreateArgs<ExtArgs>>): Prisma__QATestingRoundClient<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QATestingRounds.
     * @param {QATestingRoundCreateManyArgs} args - Arguments to create many QATestingRounds.
     * @example
     * // Create many QATestingRounds
     * const qATestingRound = await prisma.qATestingRound.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QATestingRoundCreateManyArgs>(args?: SelectSubset<T, QATestingRoundCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QATestingRounds and returns the data saved in the database.
     * @param {QATestingRoundCreateManyAndReturnArgs} args - Arguments to create many QATestingRounds.
     * @example
     * // Create many QATestingRounds
     * const qATestingRound = await prisma.qATestingRound.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QATestingRounds and only return the `id`
     * const qATestingRoundWithIdOnly = await prisma.qATestingRound.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QATestingRoundCreateManyAndReturnArgs>(args?: SelectSubset<T, QATestingRoundCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a QATestingRound.
     * @param {QATestingRoundDeleteArgs} args - Arguments to delete one QATestingRound.
     * @example
     * // Delete one QATestingRound
     * const QATestingRound = await prisma.qATestingRound.delete({
     *   where: {
     *     // ... filter to delete one QATestingRound
     *   }
     * })
     * 
     */
    delete<T extends QATestingRoundDeleteArgs>(args: SelectSubset<T, QATestingRoundDeleteArgs<ExtArgs>>): Prisma__QATestingRoundClient<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QATestingRound.
     * @param {QATestingRoundUpdateArgs} args - Arguments to update one QATestingRound.
     * @example
     * // Update one QATestingRound
     * const qATestingRound = await prisma.qATestingRound.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QATestingRoundUpdateArgs>(args: SelectSubset<T, QATestingRoundUpdateArgs<ExtArgs>>): Prisma__QATestingRoundClient<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QATestingRounds.
     * @param {QATestingRoundDeleteManyArgs} args - Arguments to filter QATestingRounds to delete.
     * @example
     * // Delete a few QATestingRounds
     * const { count } = await prisma.qATestingRound.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QATestingRoundDeleteManyArgs>(args?: SelectSubset<T, QATestingRoundDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QATestingRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QATestingRoundUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QATestingRounds
     * const qATestingRound = await prisma.qATestingRound.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QATestingRoundUpdateManyArgs>(args: SelectSubset<T, QATestingRoundUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QATestingRound.
     * @param {QATestingRoundUpsertArgs} args - Arguments to update or create a QATestingRound.
     * @example
     * // Update or create a QATestingRound
     * const qATestingRound = await prisma.qATestingRound.upsert({
     *   create: {
     *     // ... data to create a QATestingRound
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QATestingRound we want to update
     *   }
     * })
     */
    upsert<T extends QATestingRoundUpsertArgs>(args: SelectSubset<T, QATestingRoundUpsertArgs<ExtArgs>>): Prisma__QATestingRoundClient<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QATestingRounds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QATestingRoundCountArgs} args - Arguments to filter QATestingRounds to count.
     * @example
     * // Count the number of QATestingRounds
     * const count = await prisma.qATestingRound.count({
     *   where: {
     *     // ... the filter for the QATestingRounds we want to count
     *   }
     * })
    **/
    count<T extends QATestingRoundCountArgs>(
      args?: Subset<T, QATestingRoundCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QATestingRoundCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QATestingRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QATestingRoundAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QATestingRoundAggregateArgs>(args: Subset<T, QATestingRoundAggregateArgs>): Prisma.PrismaPromise<GetQATestingRoundAggregateType<T>>

    /**
     * Group by QATestingRound.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QATestingRoundGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QATestingRoundGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QATestingRoundGroupByArgs['orderBy'] }
        : { orderBy?: QATestingRoundGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QATestingRoundGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQATestingRoundGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QATestingRound model
   */
  readonly fields: QATestingRoundFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QATestingRound.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QATestingRoundClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bugs<T extends QATestingRound$bugsArgs<ExtArgs> = {}>(args?: Subset<T, QATestingRound$bugsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "findMany"> | Null>
    departmentHistory<T extends ProjectDepartmentHistoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDepartmentHistoryDefaultArgs<ExtArgs>>): Prisma__ProjectDepartmentHistoryClient<$Result.GetResult<Prisma.$ProjectDepartmentHistoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    testedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QATestingRound model
   */ 
  interface QATestingRoundFieldRefs {
    readonly id: FieldRef<"QATestingRound", 'String'>
    readonly historyId: FieldRef<"QATestingRound", 'String'>
    readonly roundNumber: FieldRef<"QATestingRound", 'Int'>
    readonly qaType: FieldRef<"QATestingRound", 'QAType'>
    readonly status: FieldRef<"QATestingRound", 'QAStatus'>
    readonly startedAt: FieldRef<"QATestingRound", 'DateTime'>
    readonly completedAt: FieldRef<"QATestingRound", 'DateTime'>
    readonly testedById: FieldRef<"QATestingRound", 'String'>
    readonly bugsFound: FieldRef<"QATestingRound", 'Int'>
    readonly criticalBugs: FieldRef<"QATestingRound", 'Int'>
    readonly testResults: FieldRef<"QATestingRound", 'String'>
    readonly rejectionReason: FieldRef<"QATestingRound", 'String'>
  }
    

  // Custom InputTypes
  /**
   * QATestingRound findUnique
   */
  export type QATestingRoundFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    /**
     * Filter, which QATestingRound to fetch.
     */
    where: QATestingRoundWhereUniqueInput
  }

  /**
   * QATestingRound findUniqueOrThrow
   */
  export type QATestingRoundFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    /**
     * Filter, which QATestingRound to fetch.
     */
    where: QATestingRoundWhereUniqueInput
  }

  /**
   * QATestingRound findFirst
   */
  export type QATestingRoundFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    /**
     * Filter, which QATestingRound to fetch.
     */
    where?: QATestingRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QATestingRounds to fetch.
     */
    orderBy?: QATestingRoundOrderByWithRelationInput | QATestingRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QATestingRounds.
     */
    cursor?: QATestingRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QATestingRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QATestingRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QATestingRounds.
     */
    distinct?: QATestingRoundScalarFieldEnum | QATestingRoundScalarFieldEnum[]
  }

  /**
   * QATestingRound findFirstOrThrow
   */
  export type QATestingRoundFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    /**
     * Filter, which QATestingRound to fetch.
     */
    where?: QATestingRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QATestingRounds to fetch.
     */
    orderBy?: QATestingRoundOrderByWithRelationInput | QATestingRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QATestingRounds.
     */
    cursor?: QATestingRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QATestingRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QATestingRounds.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QATestingRounds.
     */
    distinct?: QATestingRoundScalarFieldEnum | QATestingRoundScalarFieldEnum[]
  }

  /**
   * QATestingRound findMany
   */
  export type QATestingRoundFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    /**
     * Filter, which QATestingRounds to fetch.
     */
    where?: QATestingRoundWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QATestingRounds to fetch.
     */
    orderBy?: QATestingRoundOrderByWithRelationInput | QATestingRoundOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QATestingRounds.
     */
    cursor?: QATestingRoundWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QATestingRounds from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QATestingRounds.
     */
    skip?: number
    distinct?: QATestingRoundScalarFieldEnum | QATestingRoundScalarFieldEnum[]
  }

  /**
   * QATestingRound create
   */
  export type QATestingRoundCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    /**
     * The data needed to create a QATestingRound.
     */
    data: XOR<QATestingRoundCreateInput, QATestingRoundUncheckedCreateInput>
  }

  /**
   * QATestingRound createMany
   */
  export type QATestingRoundCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QATestingRounds.
     */
    data: QATestingRoundCreateManyInput | QATestingRoundCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QATestingRound createManyAndReturn
   */
  export type QATestingRoundCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many QATestingRounds.
     */
    data: QATestingRoundCreateManyInput | QATestingRoundCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QATestingRound update
   */
  export type QATestingRoundUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    /**
     * The data needed to update a QATestingRound.
     */
    data: XOR<QATestingRoundUpdateInput, QATestingRoundUncheckedUpdateInput>
    /**
     * Choose, which QATestingRound to update.
     */
    where: QATestingRoundWhereUniqueInput
  }

  /**
   * QATestingRound updateMany
   */
  export type QATestingRoundUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QATestingRounds.
     */
    data: XOR<QATestingRoundUpdateManyMutationInput, QATestingRoundUncheckedUpdateManyInput>
    /**
     * Filter which QATestingRounds to update
     */
    where?: QATestingRoundWhereInput
  }

  /**
   * QATestingRound upsert
   */
  export type QATestingRoundUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    /**
     * The filter to search for the QATestingRound to update in case it exists.
     */
    where: QATestingRoundWhereUniqueInput
    /**
     * In case the QATestingRound found by the `where` argument doesn't exist, create a new QATestingRound with this data.
     */
    create: XOR<QATestingRoundCreateInput, QATestingRoundUncheckedCreateInput>
    /**
     * In case the QATestingRound was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QATestingRoundUpdateInput, QATestingRoundUncheckedUpdateInput>
  }

  /**
   * QATestingRound delete
   */
  export type QATestingRoundDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
    /**
     * Filter which QATestingRound to delete.
     */
    where: QATestingRoundWhereUniqueInput
  }

  /**
   * QATestingRound deleteMany
   */
  export type QATestingRoundDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QATestingRounds to delete
     */
    where?: QATestingRoundWhereInput
  }

  /**
   * QATestingRound.bugs
   */
  export type QATestingRound$bugsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    where?: QABugWhereInput
    orderBy?: QABugOrderByWithRelationInput | QABugOrderByWithRelationInput[]
    cursor?: QABugWhereUniqueInput
    take?: number
    skip?: number
    distinct?: QABugScalarFieldEnum | QABugScalarFieldEnum[]
  }

  /**
   * QATestingRound without action
   */
  export type QATestingRoundDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QATestingRound
     */
    select?: QATestingRoundSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QATestingRoundInclude<ExtArgs> | null
  }


  /**
   * Model QABug
   */

  export type AggregateQABug = {
    _count: QABugCountAggregateOutputType | null
    _min: QABugMinAggregateOutputType | null
    _max: QABugMaxAggregateOutputType | null
  }

  export type QABugMinAggregateOutputType = {
    id: string | null
    qaRoundId: string | null
    title: string | null
    description: string | null
    severity: $Enums.BugSeverity | null
    status: $Enums.BugStatus | null
    foundAt: Date | null
    fixedAt: Date | null
    assignedToId: string | null
    screenshot: string | null
    steps: string | null
  }

  export type QABugMaxAggregateOutputType = {
    id: string | null
    qaRoundId: string | null
    title: string | null
    description: string | null
    severity: $Enums.BugSeverity | null
    status: $Enums.BugStatus | null
    foundAt: Date | null
    fixedAt: Date | null
    assignedToId: string | null
    screenshot: string | null
    steps: string | null
  }

  export type QABugCountAggregateOutputType = {
    id: number
    qaRoundId: number
    title: number
    description: number
    severity: number
    status: number
    foundAt: number
    fixedAt: number
    assignedToId: number
    screenshot: number
    steps: number
    _all: number
  }


  export type QABugMinAggregateInputType = {
    id?: true
    qaRoundId?: true
    title?: true
    description?: true
    severity?: true
    status?: true
    foundAt?: true
    fixedAt?: true
    assignedToId?: true
    screenshot?: true
    steps?: true
  }

  export type QABugMaxAggregateInputType = {
    id?: true
    qaRoundId?: true
    title?: true
    description?: true
    severity?: true
    status?: true
    foundAt?: true
    fixedAt?: true
    assignedToId?: true
    screenshot?: true
    steps?: true
  }

  export type QABugCountAggregateInputType = {
    id?: true
    qaRoundId?: true
    title?: true
    description?: true
    severity?: true
    status?: true
    foundAt?: true
    fixedAt?: true
    assignedToId?: true
    screenshot?: true
    steps?: true
    _all?: true
  }

  export type QABugAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QABug to aggregate.
     */
    where?: QABugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QABugs to fetch.
     */
    orderBy?: QABugOrderByWithRelationInput | QABugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QABugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QABugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QABugs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QABugs
    **/
    _count?: true | QABugCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QABugMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QABugMaxAggregateInputType
  }

  export type GetQABugAggregateType<T extends QABugAggregateArgs> = {
        [P in keyof T & keyof AggregateQABug]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQABug[P]>
      : GetScalarType<T[P], AggregateQABug[P]>
  }




  export type QABugGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QABugWhereInput
    orderBy?: QABugOrderByWithAggregationInput | QABugOrderByWithAggregationInput[]
    by: QABugScalarFieldEnum[] | QABugScalarFieldEnum
    having?: QABugScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QABugCountAggregateInputType | true
    _min?: QABugMinAggregateInputType
    _max?: QABugMaxAggregateInputType
  }

  export type QABugGroupByOutputType = {
    id: string
    qaRoundId: string
    title: string
    description: string
    severity: $Enums.BugSeverity
    status: $Enums.BugStatus
    foundAt: Date
    fixedAt: Date | null
    assignedToId: string | null
    screenshot: string | null
    steps: string | null
    _count: QABugCountAggregateOutputType | null
    _min: QABugMinAggregateOutputType | null
    _max: QABugMaxAggregateOutputType | null
  }

  type GetQABugGroupByPayload<T extends QABugGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QABugGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QABugGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QABugGroupByOutputType[P]>
            : GetScalarType<T[P], QABugGroupByOutputType[P]>
        }
      >
    >


  export type QABugSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qaRoundId?: boolean
    title?: boolean
    description?: boolean
    severity?: boolean
    status?: boolean
    foundAt?: boolean
    fixedAt?: boolean
    assignedToId?: boolean
    screenshot?: boolean
    steps?: boolean
    assignedTo?: boolean | QABug$assignedToArgs<ExtArgs>
    qaRound?: boolean | QATestingRoundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qABug"]>

  export type QABugSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qaRoundId?: boolean
    title?: boolean
    description?: boolean
    severity?: boolean
    status?: boolean
    foundAt?: boolean
    fixedAt?: boolean
    assignedToId?: boolean
    screenshot?: boolean
    steps?: boolean
    assignedTo?: boolean | QABug$assignedToArgs<ExtArgs>
    qaRound?: boolean | QATestingRoundDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["qABug"]>

  export type QABugSelectScalar = {
    id?: boolean
    qaRoundId?: boolean
    title?: boolean
    description?: boolean
    severity?: boolean
    status?: boolean
    foundAt?: boolean
    fixedAt?: boolean
    assignedToId?: boolean
    screenshot?: boolean
    steps?: boolean
  }

  export type QABugInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | QABug$assignedToArgs<ExtArgs>
    qaRound?: boolean | QATestingRoundDefaultArgs<ExtArgs>
  }
  export type QABugIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    assignedTo?: boolean | QABug$assignedToArgs<ExtArgs>
    qaRound?: boolean | QATestingRoundDefaultArgs<ExtArgs>
  }

  export type $QABugPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QABug"
    objects: {
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      qaRound: Prisma.$QATestingRoundPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      qaRoundId: string
      title: string
      description: string
      severity: $Enums.BugSeverity
      status: $Enums.BugStatus
      foundAt: Date
      fixedAt: Date | null
      assignedToId: string | null
      screenshot: string | null
      steps: string | null
    }, ExtArgs["result"]["qABug"]>
    composites: {}
  }

  type QABugGetPayload<S extends boolean | null | undefined | QABugDefaultArgs> = $Result.GetResult<Prisma.$QABugPayload, S>

  type QABugCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QABugFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QABugCountAggregateInputType | true
    }

  export interface QABugDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QABug'], meta: { name: 'QABug' } }
    /**
     * Find zero or one QABug that matches the filter.
     * @param {QABugFindUniqueArgs} args - Arguments to find a QABug
     * @example
     * // Get one QABug
     * const qABug = await prisma.qABug.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QABugFindUniqueArgs>(args: SelectSubset<T, QABugFindUniqueArgs<ExtArgs>>): Prisma__QABugClient<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QABug that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QABugFindUniqueOrThrowArgs} args - Arguments to find a QABug
     * @example
     * // Get one QABug
     * const qABug = await prisma.qABug.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QABugFindUniqueOrThrowArgs>(args: SelectSubset<T, QABugFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QABugClient<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QABug that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QABugFindFirstArgs} args - Arguments to find a QABug
     * @example
     * // Get one QABug
     * const qABug = await prisma.qABug.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QABugFindFirstArgs>(args?: SelectSubset<T, QABugFindFirstArgs<ExtArgs>>): Prisma__QABugClient<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QABug that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QABugFindFirstOrThrowArgs} args - Arguments to find a QABug
     * @example
     * // Get one QABug
     * const qABug = await prisma.qABug.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QABugFindFirstOrThrowArgs>(args?: SelectSubset<T, QABugFindFirstOrThrowArgs<ExtArgs>>): Prisma__QABugClient<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QABugs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QABugFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QABugs
     * const qABugs = await prisma.qABug.findMany()
     * 
     * // Get first 10 QABugs
     * const qABugs = await prisma.qABug.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const qABugWithIdOnly = await prisma.qABug.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QABugFindManyArgs>(args?: SelectSubset<T, QABugFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QABug.
     * @param {QABugCreateArgs} args - Arguments to create a QABug.
     * @example
     * // Create one QABug
     * const QABug = await prisma.qABug.create({
     *   data: {
     *     // ... data to create a QABug
     *   }
     * })
     * 
     */
    create<T extends QABugCreateArgs>(args: SelectSubset<T, QABugCreateArgs<ExtArgs>>): Prisma__QABugClient<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QABugs.
     * @param {QABugCreateManyArgs} args - Arguments to create many QABugs.
     * @example
     * // Create many QABugs
     * const qABug = await prisma.qABug.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QABugCreateManyArgs>(args?: SelectSubset<T, QABugCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QABugs and returns the data saved in the database.
     * @param {QABugCreateManyAndReturnArgs} args - Arguments to create many QABugs.
     * @example
     * // Create many QABugs
     * const qABug = await prisma.qABug.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QABugs and only return the `id`
     * const qABugWithIdOnly = await prisma.qABug.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QABugCreateManyAndReturnArgs>(args?: SelectSubset<T, QABugCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a QABug.
     * @param {QABugDeleteArgs} args - Arguments to delete one QABug.
     * @example
     * // Delete one QABug
     * const QABug = await prisma.qABug.delete({
     *   where: {
     *     // ... filter to delete one QABug
     *   }
     * })
     * 
     */
    delete<T extends QABugDeleteArgs>(args: SelectSubset<T, QABugDeleteArgs<ExtArgs>>): Prisma__QABugClient<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QABug.
     * @param {QABugUpdateArgs} args - Arguments to update one QABug.
     * @example
     * // Update one QABug
     * const qABug = await prisma.qABug.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QABugUpdateArgs>(args: SelectSubset<T, QABugUpdateArgs<ExtArgs>>): Prisma__QABugClient<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QABugs.
     * @param {QABugDeleteManyArgs} args - Arguments to filter QABugs to delete.
     * @example
     * // Delete a few QABugs
     * const { count } = await prisma.qABug.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QABugDeleteManyArgs>(args?: SelectSubset<T, QABugDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QABugs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QABugUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QABugs
     * const qABug = await prisma.qABug.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QABugUpdateManyArgs>(args: SelectSubset<T, QABugUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QABug.
     * @param {QABugUpsertArgs} args - Arguments to update or create a QABug.
     * @example
     * // Update or create a QABug
     * const qABug = await prisma.qABug.upsert({
     *   create: {
     *     // ... data to create a QABug
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QABug we want to update
     *   }
     * })
     */
    upsert<T extends QABugUpsertArgs>(args: SelectSubset<T, QABugUpsertArgs<ExtArgs>>): Prisma__QABugClient<$Result.GetResult<Prisma.$QABugPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QABugs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QABugCountArgs} args - Arguments to filter QABugs to count.
     * @example
     * // Count the number of QABugs
     * const count = await prisma.qABug.count({
     *   where: {
     *     // ... the filter for the QABugs we want to count
     *   }
     * })
    **/
    count<T extends QABugCountArgs>(
      args?: Subset<T, QABugCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QABugCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QABug.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QABugAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QABugAggregateArgs>(args: Subset<T, QABugAggregateArgs>): Prisma.PrismaPromise<GetQABugAggregateType<T>>

    /**
     * Group by QABug.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QABugGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QABugGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QABugGroupByArgs['orderBy'] }
        : { orderBy?: QABugGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QABugGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQABugGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QABug model
   */
  readonly fields: QABugFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QABug.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QABugClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    assignedTo<T extends QABug$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, QABug$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    qaRound<T extends QATestingRoundDefaultArgs<ExtArgs> = {}>(args?: Subset<T, QATestingRoundDefaultArgs<ExtArgs>>): Prisma__QATestingRoundClient<$Result.GetResult<Prisma.$QATestingRoundPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QABug model
   */ 
  interface QABugFieldRefs {
    readonly id: FieldRef<"QABug", 'String'>
    readonly qaRoundId: FieldRef<"QABug", 'String'>
    readonly title: FieldRef<"QABug", 'String'>
    readonly description: FieldRef<"QABug", 'String'>
    readonly severity: FieldRef<"QABug", 'BugSeverity'>
    readonly status: FieldRef<"QABug", 'BugStatus'>
    readonly foundAt: FieldRef<"QABug", 'DateTime'>
    readonly fixedAt: FieldRef<"QABug", 'DateTime'>
    readonly assignedToId: FieldRef<"QABug", 'String'>
    readonly screenshot: FieldRef<"QABug", 'String'>
    readonly steps: FieldRef<"QABug", 'String'>
  }
    

  // Custom InputTypes
  /**
   * QABug findUnique
   */
  export type QABugFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    /**
     * Filter, which QABug to fetch.
     */
    where: QABugWhereUniqueInput
  }

  /**
   * QABug findUniqueOrThrow
   */
  export type QABugFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    /**
     * Filter, which QABug to fetch.
     */
    where: QABugWhereUniqueInput
  }

  /**
   * QABug findFirst
   */
  export type QABugFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    /**
     * Filter, which QABug to fetch.
     */
    where?: QABugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QABugs to fetch.
     */
    orderBy?: QABugOrderByWithRelationInput | QABugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QABugs.
     */
    cursor?: QABugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QABugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QABugs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QABugs.
     */
    distinct?: QABugScalarFieldEnum | QABugScalarFieldEnum[]
  }

  /**
   * QABug findFirstOrThrow
   */
  export type QABugFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    /**
     * Filter, which QABug to fetch.
     */
    where?: QABugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QABugs to fetch.
     */
    orderBy?: QABugOrderByWithRelationInput | QABugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QABugs.
     */
    cursor?: QABugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QABugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QABugs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QABugs.
     */
    distinct?: QABugScalarFieldEnum | QABugScalarFieldEnum[]
  }

  /**
   * QABug findMany
   */
  export type QABugFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    /**
     * Filter, which QABugs to fetch.
     */
    where?: QABugWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QABugs to fetch.
     */
    orderBy?: QABugOrderByWithRelationInput | QABugOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QABugs.
     */
    cursor?: QABugWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QABugs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QABugs.
     */
    skip?: number
    distinct?: QABugScalarFieldEnum | QABugScalarFieldEnum[]
  }

  /**
   * QABug create
   */
  export type QABugCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    /**
     * The data needed to create a QABug.
     */
    data: XOR<QABugCreateInput, QABugUncheckedCreateInput>
  }

  /**
   * QABug createMany
   */
  export type QABugCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QABugs.
     */
    data: QABugCreateManyInput | QABugCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QABug createManyAndReturn
   */
  export type QABugCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many QABugs.
     */
    data: QABugCreateManyInput | QABugCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * QABug update
   */
  export type QABugUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    /**
     * The data needed to update a QABug.
     */
    data: XOR<QABugUpdateInput, QABugUncheckedUpdateInput>
    /**
     * Choose, which QABug to update.
     */
    where: QABugWhereUniqueInput
  }

  /**
   * QABug updateMany
   */
  export type QABugUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QABugs.
     */
    data: XOR<QABugUpdateManyMutationInput, QABugUncheckedUpdateManyInput>
    /**
     * Filter which QABugs to update
     */
    where?: QABugWhereInput
  }

  /**
   * QABug upsert
   */
  export type QABugUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    /**
     * The filter to search for the QABug to update in case it exists.
     */
    where: QABugWhereUniqueInput
    /**
     * In case the QABug found by the `where` argument doesn't exist, create a new QABug with this data.
     */
    create: XOR<QABugCreateInput, QABugUncheckedCreateInput>
    /**
     * In case the QABug was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QABugUpdateInput, QABugUncheckedUpdateInput>
  }

  /**
   * QABug delete
   */
  export type QABugDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
    /**
     * Filter which QABug to delete.
     */
    where: QABugWhereUniqueInput
  }

  /**
   * QABug deleteMany
   */
  export type QABugDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QABugs to delete
     */
    where?: QABugWhereInput
  }

  /**
   * QABug.assignedTo
   */
  export type QABug$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * QABug without action
   */
  export type QABugDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QABug
     */
    select?: QABugSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: QABugInclude<ExtArgs> | null
  }


  /**
   * Model DepartmentMaster
   */

  export type AggregateDepartmentMaster = {
    _count: DepartmentMasterCountAggregateOutputType | null
    _min: DepartmentMasterMinAggregateOutputType | null
    _max: DepartmentMasterMaxAggregateOutputType | null
  }

  export type DepartmentMasterMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    parentId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMasterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    parentId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type DepartmentMasterCountAggregateOutputType = {
    id: number
    name: number
    code: number
    parentId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type DepartmentMasterMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    parentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMasterMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    parentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type DepartmentMasterCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    parentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type DepartmentMasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentMaster to aggregate.
     */
    where?: DepartmentMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMasters to fetch.
     */
    orderBy?: DepartmentMasterOrderByWithRelationInput | DepartmentMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepartmentMasters
    **/
    _count?: true | DepartmentMasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMasterMaxAggregateInputType
  }

  export type GetDepartmentMasterAggregateType<T extends DepartmentMasterAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartmentMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartmentMaster[P]>
      : GetScalarType<T[P], AggregateDepartmentMaster[P]>
  }




  export type DepartmentMasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentMasterWhereInput
    orderBy?: DepartmentMasterOrderByWithAggregationInput | DepartmentMasterOrderByWithAggregationInput[]
    by: DepartmentMasterScalarFieldEnum[] | DepartmentMasterScalarFieldEnum
    having?: DepartmentMasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentMasterCountAggregateInputType | true
    _min?: DepartmentMasterMinAggregateInputType
    _max?: DepartmentMasterMaxAggregateInputType
  }

  export type DepartmentMasterGroupByOutputType = {
    id: string
    name: string
    code: string
    parentId: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: DepartmentMasterCountAggregateOutputType | null
    _min: DepartmentMasterMinAggregateOutputType | null
    _max: DepartmentMasterMaxAggregateOutputType | null
  }

  type GetDepartmentMasterGroupByPayload<T extends DepartmentMasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentMasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentMasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentMasterGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentMasterGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentMasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    parentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | DepartmentMaster$parentArgs<ExtArgs>
    children?: boolean | DepartmentMaster$childrenArgs<ExtArgs>
    roles?: boolean | DepartmentMaster$rolesArgs<ExtArgs>
    users?: boolean | DepartmentMaster$usersArgs<ExtArgs>
    _count?: boolean | DepartmentMasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentMaster"]>

  export type DepartmentMasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    parentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    parent?: boolean | DepartmentMaster$parentArgs<ExtArgs>
  }, ExtArgs["result"]["departmentMaster"]>

  export type DepartmentMasterSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    parentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type DepartmentMasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | DepartmentMaster$parentArgs<ExtArgs>
    children?: boolean | DepartmentMaster$childrenArgs<ExtArgs>
    roles?: boolean | DepartmentMaster$rolesArgs<ExtArgs>
    users?: boolean | DepartmentMaster$usersArgs<ExtArgs>
    _count?: boolean | DepartmentMasterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentMasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | DepartmentMaster$parentArgs<ExtArgs>
  }

  export type $DepartmentMasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepartmentMaster"
    objects: {
      parent: Prisma.$DepartmentMasterPayload<ExtArgs> | null
      children: Prisma.$DepartmentMasterPayload<ExtArgs>[]
      roles: Prisma.$RoleMasterPayload<ExtArgs>[]
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      parentId: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["departmentMaster"]>
    composites: {}
  }

  type DepartmentMasterGetPayload<S extends boolean | null | undefined | DepartmentMasterDefaultArgs> = $Result.GetResult<Prisma.$DepartmentMasterPayload, S>

  type DepartmentMasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<DepartmentMasterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DepartmentMasterCountAggregateInputType | true
    }

  export interface DepartmentMasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepartmentMaster'], meta: { name: 'DepartmentMaster' } }
    /**
     * Find zero or one DepartmentMaster that matches the filter.
     * @param {DepartmentMasterFindUniqueArgs} args - Arguments to find a DepartmentMaster
     * @example
     * // Get one DepartmentMaster
     * const departmentMaster = await prisma.departmentMaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentMasterFindUniqueArgs>(args: SelectSubset<T, DepartmentMasterFindUniqueArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one DepartmentMaster that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {DepartmentMasterFindUniqueOrThrowArgs} args - Arguments to find a DepartmentMaster
     * @example
     * // Get one DepartmentMaster
     * const departmentMaster = await prisma.departmentMaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentMasterFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentMasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first DepartmentMaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMasterFindFirstArgs} args - Arguments to find a DepartmentMaster
     * @example
     * // Get one DepartmentMaster
     * const departmentMaster = await prisma.departmentMaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentMasterFindFirstArgs>(args?: SelectSubset<T, DepartmentMasterFindFirstArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first DepartmentMaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMasterFindFirstOrThrowArgs} args - Arguments to find a DepartmentMaster
     * @example
     * // Get one DepartmentMaster
     * const departmentMaster = await prisma.departmentMaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentMasterFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentMasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more DepartmentMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepartmentMasters
     * const departmentMasters = await prisma.departmentMaster.findMany()
     * 
     * // Get first 10 DepartmentMasters
     * const departmentMasters = await prisma.departmentMaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentMasterWithIdOnly = await prisma.departmentMaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentMasterFindManyArgs>(args?: SelectSubset<T, DepartmentMasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a DepartmentMaster.
     * @param {DepartmentMasterCreateArgs} args - Arguments to create a DepartmentMaster.
     * @example
     * // Create one DepartmentMaster
     * const DepartmentMaster = await prisma.departmentMaster.create({
     *   data: {
     *     // ... data to create a DepartmentMaster
     *   }
     * })
     * 
     */
    create<T extends DepartmentMasterCreateArgs>(args: SelectSubset<T, DepartmentMasterCreateArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many DepartmentMasters.
     * @param {DepartmentMasterCreateManyArgs} args - Arguments to create many DepartmentMasters.
     * @example
     * // Create many DepartmentMasters
     * const departmentMaster = await prisma.departmentMaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentMasterCreateManyArgs>(args?: SelectSubset<T, DepartmentMasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepartmentMasters and returns the data saved in the database.
     * @param {DepartmentMasterCreateManyAndReturnArgs} args - Arguments to create many DepartmentMasters.
     * @example
     * // Create many DepartmentMasters
     * const departmentMaster = await prisma.departmentMaster.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepartmentMasters and only return the `id`
     * const departmentMasterWithIdOnly = await prisma.departmentMaster.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentMasterCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentMasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a DepartmentMaster.
     * @param {DepartmentMasterDeleteArgs} args - Arguments to delete one DepartmentMaster.
     * @example
     * // Delete one DepartmentMaster
     * const DepartmentMaster = await prisma.departmentMaster.delete({
     *   where: {
     *     // ... filter to delete one DepartmentMaster
     *   }
     * })
     * 
     */
    delete<T extends DepartmentMasterDeleteArgs>(args: SelectSubset<T, DepartmentMasterDeleteArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one DepartmentMaster.
     * @param {DepartmentMasterUpdateArgs} args - Arguments to update one DepartmentMaster.
     * @example
     * // Update one DepartmentMaster
     * const departmentMaster = await prisma.departmentMaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentMasterUpdateArgs>(args: SelectSubset<T, DepartmentMasterUpdateArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more DepartmentMasters.
     * @param {DepartmentMasterDeleteManyArgs} args - Arguments to filter DepartmentMasters to delete.
     * @example
     * // Delete a few DepartmentMasters
     * const { count } = await prisma.departmentMaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentMasterDeleteManyArgs>(args?: SelectSubset<T, DepartmentMasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepartmentMasters
     * const departmentMaster = await prisma.departmentMaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentMasterUpdateManyArgs>(args: SelectSubset<T, DepartmentMasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one DepartmentMaster.
     * @param {DepartmentMasterUpsertArgs} args - Arguments to update or create a DepartmentMaster.
     * @example
     * // Update or create a DepartmentMaster
     * const departmentMaster = await prisma.departmentMaster.upsert({
     *   create: {
     *     // ... data to create a DepartmentMaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepartmentMaster we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentMasterUpsertArgs>(args: SelectSubset<T, DepartmentMasterUpsertArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of DepartmentMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMasterCountArgs} args - Arguments to filter DepartmentMasters to count.
     * @example
     * // Count the number of DepartmentMasters
     * const count = await prisma.departmentMaster.count({
     *   where: {
     *     // ... the filter for the DepartmentMasters we want to count
     *   }
     * })
    **/
    count<T extends DepartmentMasterCountArgs>(
      args?: Subset<T, DepartmentMasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentMasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepartmentMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentMasterAggregateArgs>(args: Subset<T, DepartmentMasterAggregateArgs>): Prisma.PrismaPromise<GetDepartmentMasterAggregateType<T>>

    /**
     * Group by DepartmentMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentMasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentMasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentMasterGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentMasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentMasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepartmentMaster model
   */
  readonly fields: DepartmentMasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepartmentMaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentMasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends DepartmentMaster$parentArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMaster$parentArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    children<T extends DepartmentMaster$childrenArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMaster$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "findMany"> | Null>
    roles<T extends DepartmentMaster$rolesArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMaster$rolesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends DepartmentMaster$usersArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMaster$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepartmentMaster model
   */ 
  interface DepartmentMasterFieldRefs {
    readonly id: FieldRef<"DepartmentMaster", 'String'>
    readonly name: FieldRef<"DepartmentMaster", 'String'>
    readonly code: FieldRef<"DepartmentMaster", 'String'>
    readonly parentId: FieldRef<"DepartmentMaster", 'String'>
    readonly isActive: FieldRef<"DepartmentMaster", 'Boolean'>
    readonly createdAt: FieldRef<"DepartmentMaster", 'DateTime'>
    readonly updatedAt: FieldRef<"DepartmentMaster", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * DepartmentMaster findUnique
   */
  export type DepartmentMasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMaster to fetch.
     */
    where: DepartmentMasterWhereUniqueInput
  }

  /**
   * DepartmentMaster findUniqueOrThrow
   */
  export type DepartmentMasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMaster to fetch.
     */
    where: DepartmentMasterWhereUniqueInput
  }

  /**
   * DepartmentMaster findFirst
   */
  export type DepartmentMasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMaster to fetch.
     */
    where?: DepartmentMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMasters to fetch.
     */
    orderBy?: DepartmentMasterOrderByWithRelationInput | DepartmentMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentMasters.
     */
    cursor?: DepartmentMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentMasters.
     */
    distinct?: DepartmentMasterScalarFieldEnum | DepartmentMasterScalarFieldEnum[]
  }

  /**
   * DepartmentMaster findFirstOrThrow
   */
  export type DepartmentMasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMaster to fetch.
     */
    where?: DepartmentMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMasters to fetch.
     */
    orderBy?: DepartmentMasterOrderByWithRelationInput | DepartmentMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentMasters.
     */
    cursor?: DepartmentMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentMasters.
     */
    distinct?: DepartmentMasterScalarFieldEnum | DepartmentMasterScalarFieldEnum[]
  }

  /**
   * DepartmentMaster findMany
   */
  export type DepartmentMasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentMasters to fetch.
     */
    where?: DepartmentMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentMasters to fetch.
     */
    orderBy?: DepartmentMasterOrderByWithRelationInput | DepartmentMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepartmentMasters.
     */
    cursor?: DepartmentMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentMasters.
     */
    skip?: number
    distinct?: DepartmentMasterScalarFieldEnum | DepartmentMasterScalarFieldEnum[]
  }

  /**
   * DepartmentMaster create
   */
  export type DepartmentMasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    /**
     * The data needed to create a DepartmentMaster.
     */
    data: XOR<DepartmentMasterCreateInput, DepartmentMasterUncheckedCreateInput>
  }

  /**
   * DepartmentMaster createMany
   */
  export type DepartmentMasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepartmentMasters.
     */
    data: DepartmentMasterCreateManyInput | DepartmentMasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DepartmentMaster createManyAndReturn
   */
  export type DepartmentMasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many DepartmentMasters.
     */
    data: DepartmentMasterCreateManyInput | DepartmentMasterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentMaster update
   */
  export type DepartmentMasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    /**
     * The data needed to update a DepartmentMaster.
     */
    data: XOR<DepartmentMasterUpdateInput, DepartmentMasterUncheckedUpdateInput>
    /**
     * Choose, which DepartmentMaster to update.
     */
    where: DepartmentMasterWhereUniqueInput
  }

  /**
   * DepartmentMaster updateMany
   */
  export type DepartmentMasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepartmentMasters.
     */
    data: XOR<DepartmentMasterUpdateManyMutationInput, DepartmentMasterUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentMasters to update
     */
    where?: DepartmentMasterWhereInput
  }

  /**
   * DepartmentMaster upsert
   */
  export type DepartmentMasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    /**
     * The filter to search for the DepartmentMaster to update in case it exists.
     */
    where: DepartmentMasterWhereUniqueInput
    /**
     * In case the DepartmentMaster found by the `where` argument doesn't exist, create a new DepartmentMaster with this data.
     */
    create: XOR<DepartmentMasterCreateInput, DepartmentMasterUncheckedCreateInput>
    /**
     * In case the DepartmentMaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentMasterUpdateInput, DepartmentMasterUncheckedUpdateInput>
  }

  /**
   * DepartmentMaster delete
   */
  export type DepartmentMasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    /**
     * Filter which DepartmentMaster to delete.
     */
    where: DepartmentMasterWhereUniqueInput
  }

  /**
   * DepartmentMaster deleteMany
   */
  export type DepartmentMasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentMasters to delete
     */
    where?: DepartmentMasterWhereInput
  }

  /**
   * DepartmentMaster.parent
   */
  export type DepartmentMaster$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    where?: DepartmentMasterWhereInput
  }

  /**
   * DepartmentMaster.children
   */
  export type DepartmentMaster$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
    where?: DepartmentMasterWhereInput
    orderBy?: DepartmentMasterOrderByWithRelationInput | DepartmentMasterOrderByWithRelationInput[]
    cursor?: DepartmentMasterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentMasterScalarFieldEnum | DepartmentMasterScalarFieldEnum[]
  }

  /**
   * DepartmentMaster.roles
   */
  export type DepartmentMaster$rolesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    where?: RoleMasterWhereInput
    orderBy?: RoleMasterOrderByWithRelationInput | RoleMasterOrderByWithRelationInput[]
    cursor?: RoleMasterWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RoleMasterScalarFieldEnum | RoleMasterScalarFieldEnum[]
  }

  /**
   * DepartmentMaster.users
   */
  export type DepartmentMaster$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * DepartmentMaster without action
   */
  export type DepartmentMasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentMaster
     */
    select?: DepartmentMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentMasterInclude<ExtArgs> | null
  }


  /**
   * Model RoleMaster
   */

  export type AggregateRoleMaster = {
    _count: RoleMasterCountAggregateOutputType | null
    _min: RoleMasterMinAggregateOutputType | null
    _max: RoleMasterMaxAggregateOutputType | null
  }

  export type RoleMasterMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    departmentId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMasterMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    description: string | null
    departmentId: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type RoleMasterCountAggregateOutputType = {
    id: number
    name: number
    code: number
    description: number
    departmentId: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type RoleMasterMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    departmentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMasterMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    departmentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type RoleMasterCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    description?: true
    departmentId?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type RoleMasterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoleMaster to aggregate.
     */
    where?: RoleMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleMasters to fetch.
     */
    orderBy?: RoleMasterOrderByWithRelationInput | RoleMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned RoleMasters
    **/
    _count?: true | RoleMasterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMasterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMasterMaxAggregateInputType
  }

  export type GetRoleMasterAggregateType<T extends RoleMasterAggregateArgs> = {
        [P in keyof T & keyof AggregateRoleMaster]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRoleMaster[P]>
      : GetScalarType<T[P], AggregateRoleMaster[P]>
  }




  export type RoleMasterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleMasterWhereInput
    orderBy?: RoleMasterOrderByWithAggregationInput | RoleMasterOrderByWithAggregationInput[]
    by: RoleMasterScalarFieldEnum[] | RoleMasterScalarFieldEnum
    having?: RoleMasterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleMasterCountAggregateInputType | true
    _min?: RoleMasterMinAggregateInputType
    _max?: RoleMasterMaxAggregateInputType
  }

  export type RoleMasterGroupByOutputType = {
    id: string
    name: string
    code: string
    description: string | null
    departmentId: string
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: RoleMasterCountAggregateOutputType | null
    _min: RoleMasterMinAggregateOutputType | null
    _max: RoleMasterMaxAggregateOutputType | null
  }

  type GetRoleMasterGroupByPayload<T extends RoleMasterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleMasterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleMasterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleMasterGroupByOutputType[P]>
            : GetScalarType<T[P], RoleMasterGroupByOutputType[P]>
        }
      >
    >


  export type RoleMasterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    departmentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentMasterDefaultArgs<ExtArgs>
    users?: boolean | RoleMaster$usersArgs<ExtArgs>
    _count?: boolean | RoleMasterCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roleMaster"]>

  export type RoleMasterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    departmentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    department?: boolean | DepartmentMasterDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["roleMaster"]>

  export type RoleMasterSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    description?: boolean
    departmentId?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type RoleMasterInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentMasterDefaultArgs<ExtArgs>
    users?: boolean | RoleMaster$usersArgs<ExtArgs>
    _count?: boolean | RoleMasterCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleMasterIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | DepartmentMasterDefaultArgs<ExtArgs>
  }

  export type $RoleMasterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "RoleMaster"
    objects: {
      department: Prisma.$DepartmentMasterPayload<ExtArgs>
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      description: string | null
      departmentId: string
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["roleMaster"]>
    composites: {}
  }

  type RoleMasterGetPayload<S extends boolean | null | undefined | RoleMasterDefaultArgs> = $Result.GetResult<Prisma.$RoleMasterPayload, S>

  type RoleMasterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<RoleMasterFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: RoleMasterCountAggregateInputType | true
    }

  export interface RoleMasterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['RoleMaster'], meta: { name: 'RoleMaster' } }
    /**
     * Find zero or one RoleMaster that matches the filter.
     * @param {RoleMasterFindUniqueArgs} args - Arguments to find a RoleMaster
     * @example
     * // Get one RoleMaster
     * const roleMaster = await prisma.roleMaster.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleMasterFindUniqueArgs>(args: SelectSubset<T, RoleMasterFindUniqueArgs<ExtArgs>>): Prisma__RoleMasterClient<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one RoleMaster that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {RoleMasterFindUniqueOrThrowArgs} args - Arguments to find a RoleMaster
     * @example
     * // Get one RoleMaster
     * const roleMaster = await prisma.roleMaster.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleMasterFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleMasterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleMasterClient<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first RoleMaster that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleMasterFindFirstArgs} args - Arguments to find a RoleMaster
     * @example
     * // Get one RoleMaster
     * const roleMaster = await prisma.roleMaster.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleMasterFindFirstArgs>(args?: SelectSubset<T, RoleMasterFindFirstArgs<ExtArgs>>): Prisma__RoleMasterClient<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first RoleMaster that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleMasterFindFirstOrThrowArgs} args - Arguments to find a RoleMaster
     * @example
     * // Get one RoleMaster
     * const roleMaster = await prisma.roleMaster.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleMasterFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleMasterFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleMasterClient<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more RoleMasters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleMasterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all RoleMasters
     * const roleMasters = await prisma.roleMaster.findMany()
     * 
     * // Get first 10 RoleMasters
     * const roleMasters = await prisma.roleMaster.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleMasterWithIdOnly = await prisma.roleMaster.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleMasterFindManyArgs>(args?: SelectSubset<T, RoleMasterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a RoleMaster.
     * @param {RoleMasterCreateArgs} args - Arguments to create a RoleMaster.
     * @example
     * // Create one RoleMaster
     * const RoleMaster = await prisma.roleMaster.create({
     *   data: {
     *     // ... data to create a RoleMaster
     *   }
     * })
     * 
     */
    create<T extends RoleMasterCreateArgs>(args: SelectSubset<T, RoleMasterCreateArgs<ExtArgs>>): Prisma__RoleMasterClient<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many RoleMasters.
     * @param {RoleMasterCreateManyArgs} args - Arguments to create many RoleMasters.
     * @example
     * // Create many RoleMasters
     * const roleMaster = await prisma.roleMaster.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleMasterCreateManyArgs>(args?: SelectSubset<T, RoleMasterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many RoleMasters and returns the data saved in the database.
     * @param {RoleMasterCreateManyAndReturnArgs} args - Arguments to create many RoleMasters.
     * @example
     * // Create many RoleMasters
     * const roleMaster = await prisma.roleMaster.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many RoleMasters and only return the `id`
     * const roleMasterWithIdOnly = await prisma.roleMaster.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleMasterCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleMasterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a RoleMaster.
     * @param {RoleMasterDeleteArgs} args - Arguments to delete one RoleMaster.
     * @example
     * // Delete one RoleMaster
     * const RoleMaster = await prisma.roleMaster.delete({
     *   where: {
     *     // ... filter to delete one RoleMaster
     *   }
     * })
     * 
     */
    delete<T extends RoleMasterDeleteArgs>(args: SelectSubset<T, RoleMasterDeleteArgs<ExtArgs>>): Prisma__RoleMasterClient<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one RoleMaster.
     * @param {RoleMasterUpdateArgs} args - Arguments to update one RoleMaster.
     * @example
     * // Update one RoleMaster
     * const roleMaster = await prisma.roleMaster.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleMasterUpdateArgs>(args: SelectSubset<T, RoleMasterUpdateArgs<ExtArgs>>): Prisma__RoleMasterClient<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more RoleMasters.
     * @param {RoleMasterDeleteManyArgs} args - Arguments to filter RoleMasters to delete.
     * @example
     * // Delete a few RoleMasters
     * const { count } = await prisma.roleMaster.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleMasterDeleteManyArgs>(args?: SelectSubset<T, RoleMasterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more RoleMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleMasterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many RoleMasters
     * const roleMaster = await prisma.roleMaster.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleMasterUpdateManyArgs>(args: SelectSubset<T, RoleMasterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one RoleMaster.
     * @param {RoleMasterUpsertArgs} args - Arguments to update or create a RoleMaster.
     * @example
     * // Update or create a RoleMaster
     * const roleMaster = await prisma.roleMaster.upsert({
     *   create: {
     *     // ... data to create a RoleMaster
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the RoleMaster we want to update
     *   }
     * })
     */
    upsert<T extends RoleMasterUpsertArgs>(args: SelectSubset<T, RoleMasterUpsertArgs<ExtArgs>>): Prisma__RoleMasterClient<$Result.GetResult<Prisma.$RoleMasterPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of RoleMasters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleMasterCountArgs} args - Arguments to filter RoleMasters to count.
     * @example
     * // Count the number of RoleMasters
     * const count = await prisma.roleMaster.count({
     *   where: {
     *     // ... the filter for the RoleMasters we want to count
     *   }
     * })
    **/
    count<T extends RoleMasterCountArgs>(
      args?: Subset<T, RoleMasterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleMasterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a RoleMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleMasterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleMasterAggregateArgs>(args: Subset<T, RoleMasterAggregateArgs>): Prisma.PrismaPromise<GetRoleMasterAggregateType<T>>

    /**
     * Group by RoleMaster.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleMasterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleMasterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleMasterGroupByArgs['orderBy'] }
        : { orderBy?: RoleMasterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleMasterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleMasterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the RoleMaster model
   */
  readonly fields: RoleMasterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for RoleMaster.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleMasterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends DepartmentMasterDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentMasterDefaultArgs<ExtArgs>>): Prisma__DepartmentMasterClient<$Result.GetResult<Prisma.$DepartmentMasterPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    users<T extends RoleMaster$usersArgs<ExtArgs> = {}>(args?: Subset<T, RoleMaster$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the RoleMaster model
   */ 
  interface RoleMasterFieldRefs {
    readonly id: FieldRef<"RoleMaster", 'String'>
    readonly name: FieldRef<"RoleMaster", 'String'>
    readonly code: FieldRef<"RoleMaster", 'String'>
    readonly description: FieldRef<"RoleMaster", 'String'>
    readonly departmentId: FieldRef<"RoleMaster", 'String'>
    readonly isActive: FieldRef<"RoleMaster", 'Boolean'>
    readonly createdAt: FieldRef<"RoleMaster", 'DateTime'>
    readonly updatedAt: FieldRef<"RoleMaster", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * RoleMaster findUnique
   */
  export type RoleMasterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    /**
     * Filter, which RoleMaster to fetch.
     */
    where: RoleMasterWhereUniqueInput
  }

  /**
   * RoleMaster findUniqueOrThrow
   */
  export type RoleMasterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    /**
     * Filter, which RoleMaster to fetch.
     */
    where: RoleMasterWhereUniqueInput
  }

  /**
   * RoleMaster findFirst
   */
  export type RoleMasterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    /**
     * Filter, which RoleMaster to fetch.
     */
    where?: RoleMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleMasters to fetch.
     */
    orderBy?: RoleMasterOrderByWithRelationInput | RoleMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoleMasters.
     */
    cursor?: RoleMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoleMasters.
     */
    distinct?: RoleMasterScalarFieldEnum | RoleMasterScalarFieldEnum[]
  }

  /**
   * RoleMaster findFirstOrThrow
   */
  export type RoleMasterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    /**
     * Filter, which RoleMaster to fetch.
     */
    where?: RoleMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleMasters to fetch.
     */
    orderBy?: RoleMasterOrderByWithRelationInput | RoleMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for RoleMasters.
     */
    cursor?: RoleMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleMasters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of RoleMasters.
     */
    distinct?: RoleMasterScalarFieldEnum | RoleMasterScalarFieldEnum[]
  }

  /**
   * RoleMaster findMany
   */
  export type RoleMasterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    /**
     * Filter, which RoleMasters to fetch.
     */
    where?: RoleMasterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of RoleMasters to fetch.
     */
    orderBy?: RoleMasterOrderByWithRelationInput | RoleMasterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing RoleMasters.
     */
    cursor?: RoleMasterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` RoleMasters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` RoleMasters.
     */
    skip?: number
    distinct?: RoleMasterScalarFieldEnum | RoleMasterScalarFieldEnum[]
  }

  /**
   * RoleMaster create
   */
  export type RoleMasterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    /**
     * The data needed to create a RoleMaster.
     */
    data: XOR<RoleMasterCreateInput, RoleMasterUncheckedCreateInput>
  }

  /**
   * RoleMaster createMany
   */
  export type RoleMasterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many RoleMasters.
     */
    data: RoleMasterCreateManyInput | RoleMasterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * RoleMaster createManyAndReturn
   */
  export type RoleMasterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many RoleMasters.
     */
    data: RoleMasterCreateManyInput | RoleMasterCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * RoleMaster update
   */
  export type RoleMasterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    /**
     * The data needed to update a RoleMaster.
     */
    data: XOR<RoleMasterUpdateInput, RoleMasterUncheckedUpdateInput>
    /**
     * Choose, which RoleMaster to update.
     */
    where: RoleMasterWhereUniqueInput
  }

  /**
   * RoleMaster updateMany
   */
  export type RoleMasterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update RoleMasters.
     */
    data: XOR<RoleMasterUpdateManyMutationInput, RoleMasterUncheckedUpdateManyInput>
    /**
     * Filter which RoleMasters to update
     */
    where?: RoleMasterWhereInput
  }

  /**
   * RoleMaster upsert
   */
  export type RoleMasterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    /**
     * The filter to search for the RoleMaster to update in case it exists.
     */
    where: RoleMasterWhereUniqueInput
    /**
     * In case the RoleMaster found by the `where` argument doesn't exist, create a new RoleMaster with this data.
     */
    create: XOR<RoleMasterCreateInput, RoleMasterUncheckedCreateInput>
    /**
     * In case the RoleMaster was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleMasterUpdateInput, RoleMasterUncheckedUpdateInput>
  }

  /**
   * RoleMaster delete
   */
  export type RoleMasterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
    /**
     * Filter which RoleMaster to delete.
     */
    where: RoleMasterWhereUniqueInput
  }

  /**
   * RoleMaster deleteMany
   */
  export type RoleMasterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which RoleMasters to delete
     */
    where?: RoleMasterWhereInput
  }

  /**
   * RoleMaster.users
   */
  export type RoleMaster$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * RoleMaster without action
   */
  export type RoleMasterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleMaster
     */
    select?: RoleMasterSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleMasterInclude<ExtArgs> | null
  }


  /**
   * Model ProjectAssignmentHistory
   */

  export type AggregateProjectAssignmentHistory = {
    _count: ProjectAssignmentHistoryCountAggregateOutputType | null
    _min: ProjectAssignmentHistoryMinAggregateOutputType | null
    _max: ProjectAssignmentHistoryMaxAggregateOutputType | null
  }

  export type ProjectAssignmentHistoryMinAggregateOutputType = {
    id: string | null
    projectId: string | null
    assignmentType: $Enums.ProjectAssignmentType | null
    previousUserId: string | null
    newUserId: string | null
    assignedById: string | null
    assignedAt: Date | null
    reason: string | null
    notes: string | null
  }

  export type ProjectAssignmentHistoryMaxAggregateOutputType = {
    id: string | null
    projectId: string | null
    assignmentType: $Enums.ProjectAssignmentType | null
    previousUserId: string | null
    newUserId: string | null
    assignedById: string | null
    assignedAt: Date | null
    reason: string | null
    notes: string | null
  }

  export type ProjectAssignmentHistoryCountAggregateOutputType = {
    id: number
    projectId: number
    assignmentType: number
    previousUserId: number
    newUserId: number
    assignedById: number
    assignedAt: number
    reason: number
    notes: number
    _all: number
  }


  export type ProjectAssignmentHistoryMinAggregateInputType = {
    id?: true
    projectId?: true
    assignmentType?: true
    previousUserId?: true
    newUserId?: true
    assignedById?: true
    assignedAt?: true
    reason?: true
    notes?: true
  }

  export type ProjectAssignmentHistoryMaxAggregateInputType = {
    id?: true
    projectId?: true
    assignmentType?: true
    previousUserId?: true
    newUserId?: true
    assignedById?: true
    assignedAt?: true
    reason?: true
    notes?: true
  }

  export type ProjectAssignmentHistoryCountAggregateInputType = {
    id?: true
    projectId?: true
    assignmentType?: true
    previousUserId?: true
    newUserId?: true
    assignedById?: true
    assignedAt?: true
    reason?: true
    notes?: true
    _all?: true
  }

  export type ProjectAssignmentHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectAssignmentHistory to aggregate.
     */
    where?: ProjectAssignmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectAssignmentHistories to fetch.
     */
    orderBy?: ProjectAssignmentHistoryOrderByWithRelationInput | ProjectAssignmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProjectAssignmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectAssignmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectAssignmentHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProjectAssignmentHistories
    **/
    _count?: true | ProjectAssignmentHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProjectAssignmentHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProjectAssignmentHistoryMaxAggregateInputType
  }

  export type GetProjectAssignmentHistoryAggregateType<T extends ProjectAssignmentHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateProjectAssignmentHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProjectAssignmentHistory[P]>
      : GetScalarType<T[P], AggregateProjectAssignmentHistory[P]>
  }




  export type ProjectAssignmentHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProjectAssignmentHistoryWhereInput
    orderBy?: ProjectAssignmentHistoryOrderByWithAggregationInput | ProjectAssignmentHistoryOrderByWithAggregationInput[]
    by: ProjectAssignmentHistoryScalarFieldEnum[] | ProjectAssignmentHistoryScalarFieldEnum
    having?: ProjectAssignmentHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProjectAssignmentHistoryCountAggregateInputType | true
    _min?: ProjectAssignmentHistoryMinAggregateInputType
    _max?: ProjectAssignmentHistoryMaxAggregateInputType
  }

  export type ProjectAssignmentHistoryGroupByOutputType = {
    id: string
    projectId: string
    assignmentType: $Enums.ProjectAssignmentType
    previousUserId: string | null
    newUserId: string | null
    assignedById: string
    assignedAt: Date
    reason: string | null
    notes: string | null
    _count: ProjectAssignmentHistoryCountAggregateOutputType | null
    _min: ProjectAssignmentHistoryMinAggregateOutputType | null
    _max: ProjectAssignmentHistoryMaxAggregateOutputType | null
  }

  type GetProjectAssignmentHistoryGroupByPayload<T extends ProjectAssignmentHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProjectAssignmentHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProjectAssignmentHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProjectAssignmentHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ProjectAssignmentHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ProjectAssignmentHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    assignmentType?: boolean
    previousUserId?: boolean
    newUserId?: boolean
    assignedById?: boolean
    assignedAt?: boolean
    reason?: boolean
    notes?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    previousUser?: boolean | ProjectAssignmentHistory$previousUserArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectAssignmentHistory"]>

  export type ProjectAssignmentHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    projectId?: boolean
    assignmentType?: boolean
    previousUserId?: boolean
    newUserId?: boolean
    assignedById?: boolean
    assignedAt?: boolean
    reason?: boolean
    notes?: boolean
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    previousUser?: boolean | ProjectAssignmentHistory$previousUserArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["projectAssignmentHistory"]>

  export type ProjectAssignmentHistorySelectScalar = {
    id?: boolean
    projectId?: boolean
    assignmentType?: boolean
    previousUserId?: boolean
    newUserId?: boolean
    assignedById?: boolean
    assignedAt?: boolean
    reason?: boolean
    notes?: boolean
  }

  export type ProjectAssignmentHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    previousUser?: boolean | ProjectAssignmentHistory$previousUserArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProjectAssignmentHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    project?: boolean | ProjectDefaultArgs<ExtArgs>
    previousUser?: boolean | ProjectAssignmentHistory$previousUserArgs<ExtArgs>
    assignedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProjectAssignmentHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProjectAssignmentHistory"
    objects: {
      project: Prisma.$ProjectPayload<ExtArgs>
      previousUser: Prisma.$UserPayload<ExtArgs> | null
      assignedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      projectId: string
      assignmentType: $Enums.ProjectAssignmentType
      previousUserId: string | null
      newUserId: string | null
      assignedById: string
      assignedAt: Date
      reason: string | null
      notes: string | null
    }, ExtArgs["result"]["projectAssignmentHistory"]>
    composites: {}
  }

  type ProjectAssignmentHistoryGetPayload<S extends boolean | null | undefined | ProjectAssignmentHistoryDefaultArgs> = $Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload, S>

  type ProjectAssignmentHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProjectAssignmentHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProjectAssignmentHistoryCountAggregateInputType | true
    }

  export interface ProjectAssignmentHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProjectAssignmentHistory'], meta: { name: 'ProjectAssignmentHistory' } }
    /**
     * Find zero or one ProjectAssignmentHistory that matches the filter.
     * @param {ProjectAssignmentHistoryFindUniqueArgs} args - Arguments to find a ProjectAssignmentHistory
     * @example
     * // Get one ProjectAssignmentHistory
     * const projectAssignmentHistory = await prisma.projectAssignmentHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProjectAssignmentHistoryFindUniqueArgs>(args: SelectSubset<T, ProjectAssignmentHistoryFindUniqueArgs<ExtArgs>>): Prisma__ProjectAssignmentHistoryClient<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProjectAssignmentHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProjectAssignmentHistoryFindUniqueOrThrowArgs} args - Arguments to find a ProjectAssignmentHistory
     * @example
     * // Get one ProjectAssignmentHistory
     * const projectAssignmentHistory = await prisma.projectAssignmentHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProjectAssignmentHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ProjectAssignmentHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProjectAssignmentHistoryClient<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProjectAssignmentHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAssignmentHistoryFindFirstArgs} args - Arguments to find a ProjectAssignmentHistory
     * @example
     * // Get one ProjectAssignmentHistory
     * const projectAssignmentHistory = await prisma.projectAssignmentHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProjectAssignmentHistoryFindFirstArgs>(args?: SelectSubset<T, ProjectAssignmentHistoryFindFirstArgs<ExtArgs>>): Prisma__ProjectAssignmentHistoryClient<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProjectAssignmentHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAssignmentHistoryFindFirstOrThrowArgs} args - Arguments to find a ProjectAssignmentHistory
     * @example
     * // Get one ProjectAssignmentHistory
     * const projectAssignmentHistory = await prisma.projectAssignmentHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProjectAssignmentHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ProjectAssignmentHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProjectAssignmentHistoryClient<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProjectAssignmentHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAssignmentHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProjectAssignmentHistories
     * const projectAssignmentHistories = await prisma.projectAssignmentHistory.findMany()
     * 
     * // Get first 10 ProjectAssignmentHistories
     * const projectAssignmentHistories = await prisma.projectAssignmentHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const projectAssignmentHistoryWithIdOnly = await prisma.projectAssignmentHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProjectAssignmentHistoryFindManyArgs>(args?: SelectSubset<T, ProjectAssignmentHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProjectAssignmentHistory.
     * @param {ProjectAssignmentHistoryCreateArgs} args - Arguments to create a ProjectAssignmentHistory.
     * @example
     * // Create one ProjectAssignmentHistory
     * const ProjectAssignmentHistory = await prisma.projectAssignmentHistory.create({
     *   data: {
     *     // ... data to create a ProjectAssignmentHistory
     *   }
     * })
     * 
     */
    create<T extends ProjectAssignmentHistoryCreateArgs>(args: SelectSubset<T, ProjectAssignmentHistoryCreateArgs<ExtArgs>>): Prisma__ProjectAssignmentHistoryClient<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProjectAssignmentHistories.
     * @param {ProjectAssignmentHistoryCreateManyArgs} args - Arguments to create many ProjectAssignmentHistories.
     * @example
     * // Create many ProjectAssignmentHistories
     * const projectAssignmentHistory = await prisma.projectAssignmentHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProjectAssignmentHistoryCreateManyArgs>(args?: SelectSubset<T, ProjectAssignmentHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProjectAssignmentHistories and returns the data saved in the database.
     * @param {ProjectAssignmentHistoryCreateManyAndReturnArgs} args - Arguments to create many ProjectAssignmentHistories.
     * @example
     * // Create many ProjectAssignmentHistories
     * const projectAssignmentHistory = await prisma.projectAssignmentHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProjectAssignmentHistories and only return the `id`
     * const projectAssignmentHistoryWithIdOnly = await prisma.projectAssignmentHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProjectAssignmentHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ProjectAssignmentHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProjectAssignmentHistory.
     * @param {ProjectAssignmentHistoryDeleteArgs} args - Arguments to delete one ProjectAssignmentHistory.
     * @example
     * // Delete one ProjectAssignmentHistory
     * const ProjectAssignmentHistory = await prisma.projectAssignmentHistory.delete({
     *   where: {
     *     // ... filter to delete one ProjectAssignmentHistory
     *   }
     * })
     * 
     */
    delete<T extends ProjectAssignmentHistoryDeleteArgs>(args: SelectSubset<T, ProjectAssignmentHistoryDeleteArgs<ExtArgs>>): Prisma__ProjectAssignmentHistoryClient<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProjectAssignmentHistory.
     * @param {ProjectAssignmentHistoryUpdateArgs} args - Arguments to update one ProjectAssignmentHistory.
     * @example
     * // Update one ProjectAssignmentHistory
     * const projectAssignmentHistory = await prisma.projectAssignmentHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProjectAssignmentHistoryUpdateArgs>(args: SelectSubset<T, ProjectAssignmentHistoryUpdateArgs<ExtArgs>>): Prisma__ProjectAssignmentHistoryClient<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProjectAssignmentHistories.
     * @param {ProjectAssignmentHistoryDeleteManyArgs} args - Arguments to filter ProjectAssignmentHistories to delete.
     * @example
     * // Delete a few ProjectAssignmentHistories
     * const { count } = await prisma.projectAssignmentHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProjectAssignmentHistoryDeleteManyArgs>(args?: SelectSubset<T, ProjectAssignmentHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProjectAssignmentHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAssignmentHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProjectAssignmentHistories
     * const projectAssignmentHistory = await prisma.projectAssignmentHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProjectAssignmentHistoryUpdateManyArgs>(args: SelectSubset<T, ProjectAssignmentHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProjectAssignmentHistory.
     * @param {ProjectAssignmentHistoryUpsertArgs} args - Arguments to update or create a ProjectAssignmentHistory.
     * @example
     * // Update or create a ProjectAssignmentHistory
     * const projectAssignmentHistory = await prisma.projectAssignmentHistory.upsert({
     *   create: {
     *     // ... data to create a ProjectAssignmentHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProjectAssignmentHistory we want to update
     *   }
     * })
     */
    upsert<T extends ProjectAssignmentHistoryUpsertArgs>(args: SelectSubset<T, ProjectAssignmentHistoryUpsertArgs<ExtArgs>>): Prisma__ProjectAssignmentHistoryClient<$Result.GetResult<Prisma.$ProjectAssignmentHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProjectAssignmentHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAssignmentHistoryCountArgs} args - Arguments to filter ProjectAssignmentHistories to count.
     * @example
     * // Count the number of ProjectAssignmentHistories
     * const count = await prisma.projectAssignmentHistory.count({
     *   where: {
     *     // ... the filter for the ProjectAssignmentHistories we want to count
     *   }
     * })
    **/
    count<T extends ProjectAssignmentHistoryCountArgs>(
      args?: Subset<T, ProjectAssignmentHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProjectAssignmentHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProjectAssignmentHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAssignmentHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProjectAssignmentHistoryAggregateArgs>(args: Subset<T, ProjectAssignmentHistoryAggregateArgs>): Prisma.PrismaPromise<GetProjectAssignmentHistoryAggregateType<T>>

    /**
     * Group by ProjectAssignmentHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProjectAssignmentHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProjectAssignmentHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProjectAssignmentHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ProjectAssignmentHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProjectAssignmentHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProjectAssignmentHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProjectAssignmentHistory model
   */
  readonly fields: ProjectAssignmentHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProjectAssignmentHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProjectAssignmentHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    project<T extends ProjectDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProjectDefaultArgs<ExtArgs>>): Prisma__ProjectClient<$Result.GetResult<Prisma.$ProjectPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    previousUser<T extends ProjectAssignmentHistory$previousUserArgs<ExtArgs> = {}>(args?: Subset<T, ProjectAssignmentHistory$previousUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    assignedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProjectAssignmentHistory model
   */ 
  interface ProjectAssignmentHistoryFieldRefs {
    readonly id: FieldRef<"ProjectAssignmentHistory", 'String'>
    readonly projectId: FieldRef<"ProjectAssignmentHistory", 'String'>
    readonly assignmentType: FieldRef<"ProjectAssignmentHistory", 'ProjectAssignmentType'>
    readonly previousUserId: FieldRef<"ProjectAssignmentHistory", 'String'>
    readonly newUserId: FieldRef<"ProjectAssignmentHistory", 'String'>
    readonly assignedById: FieldRef<"ProjectAssignmentHistory", 'String'>
    readonly assignedAt: FieldRef<"ProjectAssignmentHistory", 'DateTime'>
    readonly reason: FieldRef<"ProjectAssignmentHistory", 'String'>
    readonly notes: FieldRef<"ProjectAssignmentHistory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProjectAssignmentHistory findUnique
   */
  export type ProjectAssignmentHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectAssignmentHistory to fetch.
     */
    where: ProjectAssignmentHistoryWhereUniqueInput
  }

  /**
   * ProjectAssignmentHistory findUniqueOrThrow
   */
  export type ProjectAssignmentHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectAssignmentHistory to fetch.
     */
    where: ProjectAssignmentHistoryWhereUniqueInput
  }

  /**
   * ProjectAssignmentHistory findFirst
   */
  export type ProjectAssignmentHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectAssignmentHistory to fetch.
     */
    where?: ProjectAssignmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectAssignmentHistories to fetch.
     */
    orderBy?: ProjectAssignmentHistoryOrderByWithRelationInput | ProjectAssignmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectAssignmentHistories.
     */
    cursor?: ProjectAssignmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectAssignmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectAssignmentHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectAssignmentHistories.
     */
    distinct?: ProjectAssignmentHistoryScalarFieldEnum | ProjectAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * ProjectAssignmentHistory findFirstOrThrow
   */
  export type ProjectAssignmentHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectAssignmentHistory to fetch.
     */
    where?: ProjectAssignmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectAssignmentHistories to fetch.
     */
    orderBy?: ProjectAssignmentHistoryOrderByWithRelationInput | ProjectAssignmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProjectAssignmentHistories.
     */
    cursor?: ProjectAssignmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectAssignmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectAssignmentHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProjectAssignmentHistories.
     */
    distinct?: ProjectAssignmentHistoryScalarFieldEnum | ProjectAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * ProjectAssignmentHistory findMany
   */
  export type ProjectAssignmentHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ProjectAssignmentHistories to fetch.
     */
    where?: ProjectAssignmentHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProjectAssignmentHistories to fetch.
     */
    orderBy?: ProjectAssignmentHistoryOrderByWithRelationInput | ProjectAssignmentHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProjectAssignmentHistories.
     */
    cursor?: ProjectAssignmentHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProjectAssignmentHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProjectAssignmentHistories.
     */
    skip?: number
    distinct?: ProjectAssignmentHistoryScalarFieldEnum | ProjectAssignmentHistoryScalarFieldEnum[]
  }

  /**
   * ProjectAssignmentHistory create
   */
  export type ProjectAssignmentHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ProjectAssignmentHistory.
     */
    data: XOR<ProjectAssignmentHistoryCreateInput, ProjectAssignmentHistoryUncheckedCreateInput>
  }

  /**
   * ProjectAssignmentHistory createMany
   */
  export type ProjectAssignmentHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProjectAssignmentHistories.
     */
    data: ProjectAssignmentHistoryCreateManyInput | ProjectAssignmentHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProjectAssignmentHistory createManyAndReturn
   */
  export type ProjectAssignmentHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProjectAssignmentHistories.
     */
    data: ProjectAssignmentHistoryCreateManyInput | ProjectAssignmentHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProjectAssignmentHistory update
   */
  export type ProjectAssignmentHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ProjectAssignmentHistory.
     */
    data: XOR<ProjectAssignmentHistoryUpdateInput, ProjectAssignmentHistoryUncheckedUpdateInput>
    /**
     * Choose, which ProjectAssignmentHistory to update.
     */
    where: ProjectAssignmentHistoryWhereUniqueInput
  }

  /**
   * ProjectAssignmentHistory updateMany
   */
  export type ProjectAssignmentHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProjectAssignmentHistories.
     */
    data: XOR<ProjectAssignmentHistoryUpdateManyMutationInput, ProjectAssignmentHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ProjectAssignmentHistories to update
     */
    where?: ProjectAssignmentHistoryWhereInput
  }

  /**
   * ProjectAssignmentHistory upsert
   */
  export type ProjectAssignmentHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ProjectAssignmentHistory to update in case it exists.
     */
    where: ProjectAssignmentHistoryWhereUniqueInput
    /**
     * In case the ProjectAssignmentHistory found by the `where` argument doesn't exist, create a new ProjectAssignmentHistory with this data.
     */
    create: XOR<ProjectAssignmentHistoryCreateInput, ProjectAssignmentHistoryUncheckedCreateInput>
    /**
     * In case the ProjectAssignmentHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProjectAssignmentHistoryUpdateInput, ProjectAssignmentHistoryUncheckedUpdateInput>
  }

  /**
   * ProjectAssignmentHistory delete
   */
  export type ProjectAssignmentHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
    /**
     * Filter which ProjectAssignmentHistory to delete.
     */
    where: ProjectAssignmentHistoryWhereUniqueInput
  }

  /**
   * ProjectAssignmentHistory deleteMany
   */
  export type ProjectAssignmentHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProjectAssignmentHistories to delete
     */
    where?: ProjectAssignmentHistoryWhereInput
  }

  /**
   * ProjectAssignmentHistory.previousUser
   */
  export type ProjectAssignmentHistory$previousUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ProjectAssignmentHistory without action
   */
  export type ProjectAssignmentHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProjectAssignmentHistory
     */
    select?: ProjectAssignmentHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProjectAssignmentHistoryInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    password: 'password',
    role: 'role',
    avatar: 'avatar',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    department: 'department',
    roleId: 'roleId',
    departmentId: 'departmentId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const ProjectScalarFieldEnum: {
    id: 'id',
    name: 'name',
    office: 'office',
    category: 'category',
    pagesCount: 'pagesCount',
    targetDate: 'targetDate',
    status: 'status',
    ownerId: 'ownerId',
    clientName: 'clientName',
    observations: 'observations',
    monthsPassed: 'monthsPassed',
    startDate: 'startDate',
    deviationReason: 'deviationReason',
    dependency: 'dependency',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    currentDepartment: 'currentDepartment',
    nextDepartment: 'nextDepartment',
    projectCode: 'projectCode',
    projectCoordinatorId: 'projectCoordinatorId',
    pcTeamLeadId: 'pcTeamLeadId'
  };

  export type ProjectScalarFieldEnum = (typeof ProjectScalarFieldEnum)[keyof typeof ProjectScalarFieldEnum]


  export const TaskScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    status: 'status',
    priority: 'priority',
    dueDate: 'dueDate',
    assigneeId: 'assigneeId',
    projectId: 'projectId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TaskScalarFieldEnum = (typeof TaskScalarFieldEnum)[keyof typeof TaskScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    content: 'content',
    authorId: 'authorId',
    projectId: 'projectId',
    taskId: 'taskId',
    createdAt: 'createdAt'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const CustomFieldScalarFieldEnum: {
    id: 'id',
    fieldName: 'fieldName',
    fieldValue: 'fieldValue',
    projectId: 'projectId'
  };

  export type CustomFieldScalarFieldEnum = (typeof CustomFieldScalarFieldEnum)[keyof typeof CustomFieldScalarFieldEnum]


  export const ProjectDepartmentHistoryScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    fromDepartment: 'fromDepartment',
    toDepartment: 'toDepartment',
    movedById: 'movedById',
    notes: 'notes',
    createdAt: 'createdAt',
    workStatus: 'workStatus',
    workStartDate: 'workStartDate',
    workEndDate: 'workEndDate',
    estimatedDays: 'estimatedDays',
    actualDays: 'actualDays',
    correctionCount: 'correctionCount',
    permissionGrantedById: 'permissionGrantedById',
    updatedAt: 'updatedAt'
  };

  export type ProjectDepartmentHistoryScalarFieldEnum = (typeof ProjectDepartmentHistoryScalarFieldEnum)[keyof typeof ProjectDepartmentHistoryScalarFieldEnum]


  export const DepartmentCorrectionScalarFieldEnum: {
    id: 'id',
    historyId: 'historyId',
    correctionType: 'correctionType',
    description: 'description',
    requestedById: 'requestedById',
    assignedToId: 'assignedToId',
    status: 'status',
    priority: 'priority',
    requestedAt: 'requestedAt',
    resolvedAt: 'resolvedAt',
    resolutionNotes: 'resolutionNotes',
    estimatedHours: 'estimatedHours',
    actualHours: 'actualHours'
  };

  export type DepartmentCorrectionScalarFieldEnum = (typeof DepartmentCorrectionScalarFieldEnum)[keyof typeof DepartmentCorrectionScalarFieldEnum]


  export const WorkflowApprovalScalarFieldEnum: {
    id: 'id',
    historyId: 'historyId',
    approvalType: 'approvalType',
    status: 'status',
    requestedById: 'requestedById',
    reviewedById: 'reviewedById',
    requestedAt: 'requestedAt',
    reviewedAt: 'reviewedAt',
    comments: 'comments',
    rejectionReason: 'rejectionReason',
    attachments: 'attachments'
  };

  export type WorkflowApprovalScalarFieldEnum = (typeof WorkflowApprovalScalarFieldEnum)[keyof typeof WorkflowApprovalScalarFieldEnum]


  export const QATestingRoundScalarFieldEnum: {
    id: 'id',
    historyId: 'historyId',
    roundNumber: 'roundNumber',
    qaType: 'qaType',
    status: 'status',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    testedById: 'testedById',
    bugsFound: 'bugsFound',
    criticalBugs: 'criticalBugs',
    testResults: 'testResults',
    rejectionReason: 'rejectionReason'
  };

  export type QATestingRoundScalarFieldEnum = (typeof QATestingRoundScalarFieldEnum)[keyof typeof QATestingRoundScalarFieldEnum]


  export const QABugScalarFieldEnum: {
    id: 'id',
    qaRoundId: 'qaRoundId',
    title: 'title',
    description: 'description',
    severity: 'severity',
    status: 'status',
    foundAt: 'foundAt',
    fixedAt: 'fixedAt',
    assignedToId: 'assignedToId',
    screenshot: 'screenshot',
    steps: 'steps'
  };

  export type QABugScalarFieldEnum = (typeof QABugScalarFieldEnum)[keyof typeof QABugScalarFieldEnum]


  export const DepartmentMasterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    parentId: 'parentId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type DepartmentMasterScalarFieldEnum = (typeof DepartmentMasterScalarFieldEnum)[keyof typeof DepartmentMasterScalarFieldEnum]


  export const RoleMasterScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    description: 'description',
    departmentId: 'departmentId',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type RoleMasterScalarFieldEnum = (typeof RoleMasterScalarFieldEnum)[keyof typeof RoleMasterScalarFieldEnum]


  export const ProjectAssignmentHistoryScalarFieldEnum: {
    id: 'id',
    projectId: 'projectId',
    assignmentType: 'assignmentType',
    previousUserId: 'previousUserId',
    newUserId: 'newUserId',
    assignedById: 'assignedById',
    assignedAt: 'assignedAt',
    reason: 'reason',
    notes: 'notes'
  };

  export type ProjectAssignmentHistoryScalarFieldEnum = (typeof ProjectAssignmentHistoryScalarFieldEnum)[keyof typeof ProjectAssignmentHistoryScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Department'
   */
  export type EnumDepartmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Department'>
    


  /**
   * Reference to a field of type 'Department[]'
   */
  export type ListEnumDepartmentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Department[]'>
    


  /**
   * Reference to a field of type 'ProjectCategory'
   */
  export type EnumProjectCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectCategory'>
    


  /**
   * Reference to a field of type 'ProjectCategory[]'
   */
  export type ListEnumProjectCategoryFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectCategory[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'ProjectStatus'
   */
  export type EnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus'>
    


  /**
   * Reference to a field of type 'ProjectStatus[]'
   */
  export type ListEnumProjectStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectStatus[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'TaskStatus'
   */
  export type EnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus'>
    


  /**
   * Reference to a field of type 'TaskStatus[]'
   */
  export type ListEnumTaskStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TaskStatus[]'>
    


  /**
   * Reference to a field of type 'Priority'
   */
  export type EnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority'>
    


  /**
   * Reference to a field of type 'Priority[]'
   */
  export type ListEnumPriorityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Priority[]'>
    


  /**
   * Reference to a field of type 'DepartmentWorkStatus'
   */
  export type EnumDepartmentWorkStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DepartmentWorkStatus'>
    


  /**
   * Reference to a field of type 'DepartmentWorkStatus[]'
   */
  export type ListEnumDepartmentWorkStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DepartmentWorkStatus[]'>
    


  /**
   * Reference to a field of type 'CorrectionStatus'
   */
  export type EnumCorrectionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CorrectionStatus'>
    


  /**
   * Reference to a field of type 'CorrectionStatus[]'
   */
  export type ListEnumCorrectionStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CorrectionStatus[]'>
    


  /**
   * Reference to a field of type 'ApprovalType'
   */
  export type EnumApprovalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalType'>
    


  /**
   * Reference to a field of type 'ApprovalType[]'
   */
  export type ListEnumApprovalTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalType[]'>
    


  /**
   * Reference to a field of type 'ApprovalStatus'
   */
  export type EnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus'>
    


  /**
   * Reference to a field of type 'ApprovalStatus[]'
   */
  export type ListEnumApprovalStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ApprovalStatus[]'>
    


  /**
   * Reference to a field of type 'QAType'
   */
  export type EnumQATypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QAType'>
    


  /**
   * Reference to a field of type 'QAType[]'
   */
  export type ListEnumQATypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QAType[]'>
    


  /**
   * Reference to a field of type 'QAStatus'
   */
  export type EnumQAStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QAStatus'>
    


  /**
   * Reference to a field of type 'QAStatus[]'
   */
  export type ListEnumQAStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QAStatus[]'>
    


  /**
   * Reference to a field of type 'BugSeverity'
   */
  export type EnumBugSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BugSeverity'>
    


  /**
   * Reference to a field of type 'BugSeverity[]'
   */
  export type ListEnumBugSeverityFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BugSeverity[]'>
    


  /**
   * Reference to a field of type 'BugStatus'
   */
  export type EnumBugStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BugStatus'>
    


  /**
   * Reference to a field of type 'BugStatus[]'
   */
  export type ListEnumBugStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BugStatus[]'>
    


  /**
   * Reference to a field of type 'ProjectAssignmentType'
   */
  export type EnumProjectAssignmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectAssignmentType'>
    


  /**
   * Reference to a field of type 'ProjectAssignmentType[]'
   */
  export type ListEnumProjectAssignmentTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ProjectAssignmentType[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    department?: EnumDepartmentNullableFilter<"User"> | $Enums.Department | null
    roleId?: StringNullableFilter<"User"> | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    roleMaster?: XOR<RoleMasterNullableRelationFilter, RoleMasterWhereInput> | null
    departmentMaster?: XOR<DepartmentMasterNullableRelationFilter, DepartmentMasterWhereInput> | null
    comments?: CommentListRelationFilter
    assignedCorrections?: DepartmentCorrectionListRelationFilter
    requestedCorrections?: DepartmentCorrectionListRelationFilter
    departmentTransitions?: ProjectDepartmentHistoryListRelationFilter
    departmentPermissions?: ProjectDepartmentHistoryListRelationFilter
    ownedProjects?: ProjectListRelationFilter
    coordinatedProjects?: ProjectListRelationFilter
    pcTeamLeadProjects?: ProjectListRelationFilter
    bugAssignments?: QABugListRelationFilter
    qaTestingRounds?: QATestingRoundListRelationFilter
    assignedTasks?: TaskListRelationFilter
    approvalRequests?: WorkflowApprovalListRelationFilter
    approvalReviews?: WorkflowApprovalListRelationFilter
    assignmentHistory?: ProjectAssignmentHistoryListRelationFilter
    assignmentsMade?: ProjectAssignmentHistoryListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    department?: SortOrderInput | SortOrder
    roleId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    roleMaster?: RoleMasterOrderByWithRelationInput
    departmentMaster?: DepartmentMasterOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    assignedCorrections?: DepartmentCorrectionOrderByRelationAggregateInput
    requestedCorrections?: DepartmentCorrectionOrderByRelationAggregateInput
    departmentTransitions?: ProjectDepartmentHistoryOrderByRelationAggregateInput
    departmentPermissions?: ProjectDepartmentHistoryOrderByRelationAggregateInput
    ownedProjects?: ProjectOrderByRelationAggregateInput
    coordinatedProjects?: ProjectOrderByRelationAggregateInput
    pcTeamLeadProjects?: ProjectOrderByRelationAggregateInput
    bugAssignments?: QABugOrderByRelationAggregateInput
    qaTestingRounds?: QATestingRoundOrderByRelationAggregateInput
    assignedTasks?: TaskOrderByRelationAggregateInput
    approvalRequests?: WorkflowApprovalOrderByRelationAggregateInput
    approvalReviews?: WorkflowApprovalOrderByRelationAggregateInput
    assignmentHistory?: ProjectAssignmentHistoryOrderByRelationAggregateInput
    assignmentsMade?: ProjectAssignmentHistoryOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    department?: EnumDepartmentNullableFilter<"User"> | $Enums.Department | null
    roleId?: StringNullableFilter<"User"> | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    roleMaster?: XOR<RoleMasterNullableRelationFilter, RoleMasterWhereInput> | null
    departmentMaster?: XOR<DepartmentMasterNullableRelationFilter, DepartmentMasterWhereInput> | null
    comments?: CommentListRelationFilter
    assignedCorrections?: DepartmentCorrectionListRelationFilter
    requestedCorrections?: DepartmentCorrectionListRelationFilter
    departmentTransitions?: ProjectDepartmentHistoryListRelationFilter
    departmentPermissions?: ProjectDepartmentHistoryListRelationFilter
    ownedProjects?: ProjectListRelationFilter
    coordinatedProjects?: ProjectListRelationFilter
    pcTeamLeadProjects?: ProjectListRelationFilter
    bugAssignments?: QABugListRelationFilter
    qaTestingRounds?: QATestingRoundListRelationFilter
    assignedTasks?: TaskListRelationFilter
    approvalRequests?: WorkflowApprovalListRelationFilter
    approvalReviews?: WorkflowApprovalListRelationFilter
    assignmentHistory?: ProjectAssignmentHistoryListRelationFilter
    assignmentsMade?: ProjectAssignmentHistoryListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    department?: SortOrderInput | SortOrder
    roleId?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    department?: EnumDepartmentNullableWithAggregatesFilter<"User"> | $Enums.Department | null
    roleId?: StringNullableWithAggregatesFilter<"User"> | string | null
    departmentId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type ProjectWhereInput = {
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    office?: StringFilter<"Project"> | string
    category?: EnumProjectCategoryFilter<"Project"> | $Enums.ProjectCategory
    pagesCount?: IntNullableFilter<"Project"> | number | null
    targetDate?: DateTimeFilter<"Project"> | Date | string
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    ownerId?: StringFilter<"Project"> | string
    clientName?: StringNullableFilter<"Project"> | string | null
    observations?: StringNullableFilter<"Project"> | string | null
    monthsPassed?: IntFilter<"Project"> | number
    startDate?: DateTimeFilter<"Project"> | Date | string
    deviationReason?: StringNullableFilter<"Project"> | string | null
    dependency?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    currentDepartment?: EnumDepartmentFilter<"Project"> | $Enums.Department
    nextDepartment?: EnumDepartmentNullableFilter<"Project"> | $Enums.Department | null
    projectCode?: StringFilter<"Project"> | string
    projectCoordinatorId?: StringNullableFilter<"Project"> | string | null
    pcTeamLeadId?: StringNullableFilter<"Project"> | string | null
    comments?: CommentListRelationFilter
    customFields?: CustomFieldListRelationFilter
    departmentHistory?: ProjectDepartmentHistoryListRelationFilter
    owner?: XOR<UserRelationFilter, UserWhereInput>
    projectCoordinator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    pcTeamLead?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    tasks?: TaskListRelationFilter
    assignmentHistory?: ProjectAssignmentHistoryListRelationFilter
  }

  export type ProjectOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    office?: SortOrder
    category?: SortOrder
    pagesCount?: SortOrderInput | SortOrder
    targetDate?: SortOrder
    status?: SortOrder
    ownerId?: SortOrder
    clientName?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    monthsPassed?: SortOrder
    startDate?: SortOrder
    deviationReason?: SortOrderInput | SortOrder
    dependency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentDepartment?: SortOrder
    nextDepartment?: SortOrderInput | SortOrder
    projectCode?: SortOrder
    projectCoordinatorId?: SortOrderInput | SortOrder
    pcTeamLeadId?: SortOrderInput | SortOrder
    comments?: CommentOrderByRelationAggregateInput
    customFields?: CustomFieldOrderByRelationAggregateInput
    departmentHistory?: ProjectDepartmentHistoryOrderByRelationAggregateInput
    owner?: UserOrderByWithRelationInput
    projectCoordinator?: UserOrderByWithRelationInput
    pcTeamLead?: UserOrderByWithRelationInput
    tasks?: TaskOrderByRelationAggregateInput
    assignmentHistory?: ProjectAssignmentHistoryOrderByRelationAggregateInput
  }

  export type ProjectWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectWhereInput | ProjectWhereInput[]
    OR?: ProjectWhereInput[]
    NOT?: ProjectWhereInput | ProjectWhereInput[]
    name?: StringFilter<"Project"> | string
    office?: StringFilter<"Project"> | string
    category?: EnumProjectCategoryFilter<"Project"> | $Enums.ProjectCategory
    pagesCount?: IntNullableFilter<"Project"> | number | null
    targetDate?: DateTimeFilter<"Project"> | Date | string
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    ownerId?: StringFilter<"Project"> | string
    clientName?: StringNullableFilter<"Project"> | string | null
    observations?: StringNullableFilter<"Project"> | string | null
    monthsPassed?: IntFilter<"Project"> | number
    startDate?: DateTimeFilter<"Project"> | Date | string
    deviationReason?: StringNullableFilter<"Project"> | string | null
    dependency?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    currentDepartment?: EnumDepartmentFilter<"Project"> | $Enums.Department
    nextDepartment?: EnumDepartmentNullableFilter<"Project"> | $Enums.Department | null
    projectCode?: StringFilter<"Project"> | string
    projectCoordinatorId?: StringNullableFilter<"Project"> | string | null
    pcTeamLeadId?: StringNullableFilter<"Project"> | string | null
    comments?: CommentListRelationFilter
    customFields?: CustomFieldListRelationFilter
    departmentHistory?: ProjectDepartmentHistoryListRelationFilter
    owner?: XOR<UserRelationFilter, UserWhereInput>
    projectCoordinator?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    pcTeamLead?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    tasks?: TaskListRelationFilter
    assignmentHistory?: ProjectAssignmentHistoryListRelationFilter
  }, "id">

  export type ProjectOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    office?: SortOrder
    category?: SortOrder
    pagesCount?: SortOrderInput | SortOrder
    targetDate?: SortOrder
    status?: SortOrder
    ownerId?: SortOrder
    clientName?: SortOrderInput | SortOrder
    observations?: SortOrderInput | SortOrder
    monthsPassed?: SortOrder
    startDate?: SortOrder
    deviationReason?: SortOrderInput | SortOrder
    dependency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentDepartment?: SortOrder
    nextDepartment?: SortOrderInput | SortOrder
    projectCode?: SortOrder
    projectCoordinatorId?: SortOrderInput | SortOrder
    pcTeamLeadId?: SortOrderInput | SortOrder
    _count?: ProjectCountOrderByAggregateInput
    _avg?: ProjectAvgOrderByAggregateInput
    _max?: ProjectMaxOrderByAggregateInput
    _min?: ProjectMinOrderByAggregateInput
    _sum?: ProjectSumOrderByAggregateInput
  }

  export type ProjectScalarWhereWithAggregatesInput = {
    AND?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    OR?: ProjectScalarWhereWithAggregatesInput[]
    NOT?: ProjectScalarWhereWithAggregatesInput | ProjectScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Project"> | string
    name?: StringWithAggregatesFilter<"Project"> | string
    office?: StringWithAggregatesFilter<"Project"> | string
    category?: EnumProjectCategoryWithAggregatesFilter<"Project"> | $Enums.ProjectCategory
    pagesCount?: IntNullableWithAggregatesFilter<"Project"> | number | null
    targetDate?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    status?: EnumProjectStatusWithAggregatesFilter<"Project"> | $Enums.ProjectStatus
    ownerId?: StringWithAggregatesFilter<"Project"> | string
    clientName?: StringNullableWithAggregatesFilter<"Project"> | string | null
    observations?: StringNullableWithAggregatesFilter<"Project"> | string | null
    monthsPassed?: IntWithAggregatesFilter<"Project"> | number
    startDate?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    deviationReason?: StringNullableWithAggregatesFilter<"Project"> | string | null
    dependency?: BoolWithAggregatesFilter<"Project"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Project"> | Date | string
    currentDepartment?: EnumDepartmentWithAggregatesFilter<"Project"> | $Enums.Department
    nextDepartment?: EnumDepartmentNullableWithAggregatesFilter<"Project"> | $Enums.Department | null
    projectCode?: StringWithAggregatesFilter<"Project"> | string
    projectCoordinatorId?: StringNullableWithAggregatesFilter<"Project"> | string | null
    pcTeamLeadId?: StringNullableWithAggregatesFilter<"Project"> | string | null
  }

  export type TaskWhereInput = {
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumPriorityFilter<"Task"> | $Enums.Priority
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    assigneeId?: StringNullableFilter<"Task"> | string | null
    projectId?: StringFilter<"Task"> | string
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    comments?: CommentListRelationFilter
    assignee?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type TaskOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    assigneeId?: SortOrderInput | SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    comments?: CommentOrderByRelationAggregateInput
    assignee?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
  }

  export type TaskWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TaskWhereInput | TaskWhereInput[]
    OR?: TaskWhereInput[]
    NOT?: TaskWhereInput | TaskWhereInput[]
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumPriorityFilter<"Task"> | $Enums.Priority
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    assigneeId?: StringNullableFilter<"Task"> | string | null
    projectId?: StringFilter<"Task"> | string
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
    comments?: CommentListRelationFilter
    assignee?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id">

  export type TaskOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrderInput | SortOrder
    assigneeId?: SortOrderInput | SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TaskCountOrderByAggregateInput
    _max?: TaskMaxOrderByAggregateInput
    _min?: TaskMinOrderByAggregateInput
  }

  export type TaskScalarWhereWithAggregatesInput = {
    AND?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    OR?: TaskScalarWhereWithAggregatesInput[]
    NOT?: TaskScalarWhereWithAggregatesInput | TaskScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Task"> | string
    title?: StringWithAggregatesFilter<"Task"> | string
    description?: StringNullableWithAggregatesFilter<"Task"> | string | null
    status?: EnumTaskStatusWithAggregatesFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumPriorityWithAggregatesFilter<"Task"> | $Enums.Priority
    dueDate?: DateTimeNullableWithAggregatesFilter<"Task"> | Date | string | null
    assigneeId?: StringNullableWithAggregatesFilter<"Task"> | string | null
    projectId?: StringWithAggregatesFilter<"Task"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Task"> | Date | string
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    taskId?: StringNullableFilter<"Comment"> | string | null
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    task?: XOR<TaskNullableRelationFilter, TaskWhereInput> | null
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    author?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    task?: TaskOrderByWithRelationInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    content?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    taskId?: StringNullableFilter<"Comment"> | string | null
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    author?: XOR<UserRelationFilter, UserWhereInput>
    project?: XOR<ProjectNullableRelationFilter, ProjectWhereInput> | null
    task?: XOR<TaskNullableRelationFilter, TaskWhereInput> | null
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrderInput | SortOrder
    taskId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    content?: StringWithAggregatesFilter<"Comment"> | string
    authorId?: StringWithAggregatesFilter<"Comment"> | string
    projectId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    taskId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
  }

  export type CustomFieldWhereInput = {
    AND?: CustomFieldWhereInput | CustomFieldWhereInput[]
    OR?: CustomFieldWhereInput[]
    NOT?: CustomFieldWhereInput | CustomFieldWhereInput[]
    id?: StringFilter<"CustomField"> | string
    fieldName?: StringFilter<"CustomField"> | string
    fieldValue?: StringFilter<"CustomField"> | string
    projectId?: StringFilter<"CustomField"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }

  export type CustomFieldOrderByWithRelationInput = {
    id?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    projectId?: SortOrder
    project?: ProjectOrderByWithRelationInput
  }

  export type CustomFieldWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CustomFieldWhereInput | CustomFieldWhereInput[]
    OR?: CustomFieldWhereInput[]
    NOT?: CustomFieldWhereInput | CustomFieldWhereInput[]
    fieldName?: StringFilter<"CustomField"> | string
    fieldValue?: StringFilter<"CustomField"> | string
    projectId?: StringFilter<"CustomField"> | string
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
  }, "id">

  export type CustomFieldOrderByWithAggregationInput = {
    id?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    projectId?: SortOrder
    _count?: CustomFieldCountOrderByAggregateInput
    _max?: CustomFieldMaxOrderByAggregateInput
    _min?: CustomFieldMinOrderByAggregateInput
  }

  export type CustomFieldScalarWhereWithAggregatesInput = {
    AND?: CustomFieldScalarWhereWithAggregatesInput | CustomFieldScalarWhereWithAggregatesInput[]
    OR?: CustomFieldScalarWhereWithAggregatesInput[]
    NOT?: CustomFieldScalarWhereWithAggregatesInput | CustomFieldScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CustomField"> | string
    fieldName?: StringWithAggregatesFilter<"CustomField"> | string
    fieldValue?: StringWithAggregatesFilter<"CustomField"> | string
    projectId?: StringWithAggregatesFilter<"CustomField"> | string
  }

  export type ProjectDepartmentHistoryWhereInput = {
    AND?: ProjectDepartmentHistoryWhereInput | ProjectDepartmentHistoryWhereInput[]
    OR?: ProjectDepartmentHistoryWhereInput[]
    NOT?: ProjectDepartmentHistoryWhereInput | ProjectDepartmentHistoryWhereInput[]
    id?: StringFilter<"ProjectDepartmentHistory"> | string
    projectId?: StringFilter<"ProjectDepartmentHistory"> | string
    fromDepartment?: EnumDepartmentNullableFilter<"ProjectDepartmentHistory"> | $Enums.Department | null
    toDepartment?: EnumDepartmentFilter<"ProjectDepartmentHistory"> | $Enums.Department
    movedById?: StringFilter<"ProjectDepartmentHistory"> | string
    notes?: StringNullableFilter<"ProjectDepartmentHistory"> | string | null
    createdAt?: DateTimeFilter<"ProjectDepartmentHistory"> | Date | string
    workStatus?: EnumDepartmentWorkStatusFilter<"ProjectDepartmentHistory"> | $Enums.DepartmentWorkStatus
    workStartDate?: DateTimeNullableFilter<"ProjectDepartmentHistory"> | Date | string | null
    workEndDate?: DateTimeNullableFilter<"ProjectDepartmentHistory"> | Date | string | null
    estimatedDays?: IntNullableFilter<"ProjectDepartmentHistory"> | number | null
    actualDays?: IntNullableFilter<"ProjectDepartmentHistory"> | number | null
    correctionCount?: IntFilter<"ProjectDepartmentHistory"> | number
    permissionGrantedById?: StringNullableFilter<"ProjectDepartmentHistory"> | string | null
    updatedAt?: DateTimeFilter<"ProjectDepartmentHistory"> | Date | string
    corrections?: DepartmentCorrectionListRelationFilter
    movedBy?: XOR<UserRelationFilter, UserWhereInput>
    permissionGrantedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    qaRounds?: QATestingRoundListRelationFilter
    approvals?: WorkflowApprovalListRelationFilter
  }

  export type ProjectDepartmentHistoryOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    fromDepartment?: SortOrderInput | SortOrder
    toDepartment?: SortOrder
    movedById?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    workStatus?: SortOrder
    workStartDate?: SortOrderInput | SortOrder
    workEndDate?: SortOrderInput | SortOrder
    estimatedDays?: SortOrderInput | SortOrder
    actualDays?: SortOrderInput | SortOrder
    correctionCount?: SortOrder
    permissionGrantedById?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    corrections?: DepartmentCorrectionOrderByRelationAggregateInput
    movedBy?: UserOrderByWithRelationInput
    permissionGrantedBy?: UserOrderByWithRelationInput
    project?: ProjectOrderByWithRelationInput
    qaRounds?: QATestingRoundOrderByRelationAggregateInput
    approvals?: WorkflowApprovalOrderByRelationAggregateInput
  }

  export type ProjectDepartmentHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectDepartmentHistoryWhereInput | ProjectDepartmentHistoryWhereInput[]
    OR?: ProjectDepartmentHistoryWhereInput[]
    NOT?: ProjectDepartmentHistoryWhereInput | ProjectDepartmentHistoryWhereInput[]
    projectId?: StringFilter<"ProjectDepartmentHistory"> | string
    fromDepartment?: EnumDepartmentNullableFilter<"ProjectDepartmentHistory"> | $Enums.Department | null
    toDepartment?: EnumDepartmentFilter<"ProjectDepartmentHistory"> | $Enums.Department
    movedById?: StringFilter<"ProjectDepartmentHistory"> | string
    notes?: StringNullableFilter<"ProjectDepartmentHistory"> | string | null
    createdAt?: DateTimeFilter<"ProjectDepartmentHistory"> | Date | string
    workStatus?: EnumDepartmentWorkStatusFilter<"ProjectDepartmentHistory"> | $Enums.DepartmentWorkStatus
    workStartDate?: DateTimeNullableFilter<"ProjectDepartmentHistory"> | Date | string | null
    workEndDate?: DateTimeNullableFilter<"ProjectDepartmentHistory"> | Date | string | null
    estimatedDays?: IntNullableFilter<"ProjectDepartmentHistory"> | number | null
    actualDays?: IntNullableFilter<"ProjectDepartmentHistory"> | number | null
    correctionCount?: IntFilter<"ProjectDepartmentHistory"> | number
    permissionGrantedById?: StringNullableFilter<"ProjectDepartmentHistory"> | string | null
    updatedAt?: DateTimeFilter<"ProjectDepartmentHistory"> | Date | string
    corrections?: DepartmentCorrectionListRelationFilter
    movedBy?: XOR<UserRelationFilter, UserWhereInput>
    permissionGrantedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    qaRounds?: QATestingRoundListRelationFilter
    approvals?: WorkflowApprovalListRelationFilter
  }, "id">

  export type ProjectDepartmentHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    fromDepartment?: SortOrderInput | SortOrder
    toDepartment?: SortOrder
    movedById?: SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    workStatus?: SortOrder
    workStartDate?: SortOrderInput | SortOrder
    workEndDate?: SortOrderInput | SortOrder
    estimatedDays?: SortOrderInput | SortOrder
    actualDays?: SortOrderInput | SortOrder
    correctionCount?: SortOrder
    permissionGrantedById?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    _count?: ProjectDepartmentHistoryCountOrderByAggregateInput
    _avg?: ProjectDepartmentHistoryAvgOrderByAggregateInput
    _max?: ProjectDepartmentHistoryMaxOrderByAggregateInput
    _min?: ProjectDepartmentHistoryMinOrderByAggregateInput
    _sum?: ProjectDepartmentHistorySumOrderByAggregateInput
  }

  export type ProjectDepartmentHistoryScalarWhereWithAggregatesInput = {
    AND?: ProjectDepartmentHistoryScalarWhereWithAggregatesInput | ProjectDepartmentHistoryScalarWhereWithAggregatesInput[]
    OR?: ProjectDepartmentHistoryScalarWhereWithAggregatesInput[]
    NOT?: ProjectDepartmentHistoryScalarWhereWithAggregatesInput | ProjectDepartmentHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectDepartmentHistory"> | string
    projectId?: StringWithAggregatesFilter<"ProjectDepartmentHistory"> | string
    fromDepartment?: EnumDepartmentNullableWithAggregatesFilter<"ProjectDepartmentHistory"> | $Enums.Department | null
    toDepartment?: EnumDepartmentWithAggregatesFilter<"ProjectDepartmentHistory"> | $Enums.Department
    movedById?: StringWithAggregatesFilter<"ProjectDepartmentHistory"> | string
    notes?: StringNullableWithAggregatesFilter<"ProjectDepartmentHistory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProjectDepartmentHistory"> | Date | string
    workStatus?: EnumDepartmentWorkStatusWithAggregatesFilter<"ProjectDepartmentHistory"> | $Enums.DepartmentWorkStatus
    workStartDate?: DateTimeNullableWithAggregatesFilter<"ProjectDepartmentHistory"> | Date | string | null
    workEndDate?: DateTimeNullableWithAggregatesFilter<"ProjectDepartmentHistory"> | Date | string | null
    estimatedDays?: IntNullableWithAggregatesFilter<"ProjectDepartmentHistory"> | number | null
    actualDays?: IntNullableWithAggregatesFilter<"ProjectDepartmentHistory"> | number | null
    correctionCount?: IntWithAggregatesFilter<"ProjectDepartmentHistory"> | number
    permissionGrantedById?: StringNullableWithAggregatesFilter<"ProjectDepartmentHistory"> | string | null
    updatedAt?: DateTimeWithAggregatesFilter<"ProjectDepartmentHistory"> | Date | string
  }

  export type DepartmentCorrectionWhereInput = {
    AND?: DepartmentCorrectionWhereInput | DepartmentCorrectionWhereInput[]
    OR?: DepartmentCorrectionWhereInput[]
    NOT?: DepartmentCorrectionWhereInput | DepartmentCorrectionWhereInput[]
    id?: StringFilter<"DepartmentCorrection"> | string
    historyId?: StringFilter<"DepartmentCorrection"> | string
    correctionType?: StringFilter<"DepartmentCorrection"> | string
    description?: StringFilter<"DepartmentCorrection"> | string
    requestedById?: StringFilter<"DepartmentCorrection"> | string
    assignedToId?: StringNullableFilter<"DepartmentCorrection"> | string | null
    status?: EnumCorrectionStatusFilter<"DepartmentCorrection"> | $Enums.CorrectionStatus
    priority?: EnumPriorityFilter<"DepartmentCorrection"> | $Enums.Priority
    requestedAt?: DateTimeFilter<"DepartmentCorrection"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"DepartmentCorrection"> | Date | string | null
    resolutionNotes?: StringNullableFilter<"DepartmentCorrection"> | string | null
    estimatedHours?: IntNullableFilter<"DepartmentCorrection"> | number | null
    actualHours?: IntNullableFilter<"DepartmentCorrection"> | number | null
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    departmentHistory?: XOR<ProjectDepartmentHistoryRelationFilter, ProjectDepartmentHistoryWhereInput>
    requestedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type DepartmentCorrectionOrderByWithRelationInput = {
    id?: SortOrder
    historyId?: SortOrder
    correctionType?: SortOrder
    description?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolutionNotes?: SortOrderInput | SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrderInput | SortOrder
    assignedTo?: UserOrderByWithRelationInput
    departmentHistory?: ProjectDepartmentHistoryOrderByWithRelationInput
    requestedBy?: UserOrderByWithRelationInput
  }

  export type DepartmentCorrectionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: DepartmentCorrectionWhereInput | DepartmentCorrectionWhereInput[]
    OR?: DepartmentCorrectionWhereInput[]
    NOT?: DepartmentCorrectionWhereInput | DepartmentCorrectionWhereInput[]
    historyId?: StringFilter<"DepartmentCorrection"> | string
    correctionType?: StringFilter<"DepartmentCorrection"> | string
    description?: StringFilter<"DepartmentCorrection"> | string
    requestedById?: StringFilter<"DepartmentCorrection"> | string
    assignedToId?: StringNullableFilter<"DepartmentCorrection"> | string | null
    status?: EnumCorrectionStatusFilter<"DepartmentCorrection"> | $Enums.CorrectionStatus
    priority?: EnumPriorityFilter<"DepartmentCorrection"> | $Enums.Priority
    requestedAt?: DateTimeFilter<"DepartmentCorrection"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"DepartmentCorrection"> | Date | string | null
    resolutionNotes?: StringNullableFilter<"DepartmentCorrection"> | string | null
    estimatedHours?: IntNullableFilter<"DepartmentCorrection"> | number | null
    actualHours?: IntNullableFilter<"DepartmentCorrection"> | number | null
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    departmentHistory?: XOR<ProjectDepartmentHistoryRelationFilter, ProjectDepartmentHistoryWhereInput>
    requestedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type DepartmentCorrectionOrderByWithAggregationInput = {
    id?: SortOrder
    historyId?: SortOrder
    correctionType?: SortOrder
    description?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedAt?: SortOrder
    resolvedAt?: SortOrderInput | SortOrder
    resolutionNotes?: SortOrderInput | SortOrder
    estimatedHours?: SortOrderInput | SortOrder
    actualHours?: SortOrderInput | SortOrder
    _count?: DepartmentCorrectionCountOrderByAggregateInput
    _avg?: DepartmentCorrectionAvgOrderByAggregateInput
    _max?: DepartmentCorrectionMaxOrderByAggregateInput
    _min?: DepartmentCorrectionMinOrderByAggregateInput
    _sum?: DepartmentCorrectionSumOrderByAggregateInput
  }

  export type DepartmentCorrectionScalarWhereWithAggregatesInput = {
    AND?: DepartmentCorrectionScalarWhereWithAggregatesInput | DepartmentCorrectionScalarWhereWithAggregatesInput[]
    OR?: DepartmentCorrectionScalarWhereWithAggregatesInput[]
    NOT?: DepartmentCorrectionScalarWhereWithAggregatesInput | DepartmentCorrectionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DepartmentCorrection"> | string
    historyId?: StringWithAggregatesFilter<"DepartmentCorrection"> | string
    correctionType?: StringWithAggregatesFilter<"DepartmentCorrection"> | string
    description?: StringWithAggregatesFilter<"DepartmentCorrection"> | string
    requestedById?: StringWithAggregatesFilter<"DepartmentCorrection"> | string
    assignedToId?: StringNullableWithAggregatesFilter<"DepartmentCorrection"> | string | null
    status?: EnumCorrectionStatusWithAggregatesFilter<"DepartmentCorrection"> | $Enums.CorrectionStatus
    priority?: EnumPriorityWithAggregatesFilter<"DepartmentCorrection"> | $Enums.Priority
    requestedAt?: DateTimeWithAggregatesFilter<"DepartmentCorrection"> | Date | string
    resolvedAt?: DateTimeNullableWithAggregatesFilter<"DepartmentCorrection"> | Date | string | null
    resolutionNotes?: StringNullableWithAggregatesFilter<"DepartmentCorrection"> | string | null
    estimatedHours?: IntNullableWithAggregatesFilter<"DepartmentCorrection"> | number | null
    actualHours?: IntNullableWithAggregatesFilter<"DepartmentCorrection"> | number | null
  }

  export type WorkflowApprovalWhereInput = {
    AND?: WorkflowApprovalWhereInput | WorkflowApprovalWhereInput[]
    OR?: WorkflowApprovalWhereInput[]
    NOT?: WorkflowApprovalWhereInput | WorkflowApprovalWhereInput[]
    id?: StringFilter<"WorkflowApproval"> | string
    historyId?: StringFilter<"WorkflowApproval"> | string
    approvalType?: EnumApprovalTypeFilter<"WorkflowApproval"> | $Enums.ApprovalType
    status?: EnumApprovalStatusFilter<"WorkflowApproval"> | $Enums.ApprovalStatus
    requestedById?: StringFilter<"WorkflowApproval"> | string
    reviewedById?: StringNullableFilter<"WorkflowApproval"> | string | null
    requestedAt?: DateTimeFilter<"WorkflowApproval"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"WorkflowApproval"> | Date | string | null
    comments?: StringNullableFilter<"WorkflowApproval"> | string | null
    rejectionReason?: StringNullableFilter<"WorkflowApproval"> | string | null
    attachments?: StringNullableListFilter<"WorkflowApproval">
    departmentHistory?: XOR<ProjectDepartmentHistoryRelationFilter, ProjectDepartmentHistoryWhereInput>
    requestedBy?: XOR<UserRelationFilter, UserWhereInput>
    reviewedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type WorkflowApprovalOrderByWithRelationInput = {
    id?: SortOrder
    historyId?: SortOrder
    approvalType?: SortOrder
    status?: SortOrder
    requestedById?: SortOrder
    reviewedById?: SortOrderInput | SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    attachments?: SortOrder
    departmentHistory?: ProjectDepartmentHistoryOrderByWithRelationInput
    requestedBy?: UserOrderByWithRelationInput
    reviewedBy?: UserOrderByWithRelationInput
  }

  export type WorkflowApprovalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WorkflowApprovalWhereInput | WorkflowApprovalWhereInput[]
    OR?: WorkflowApprovalWhereInput[]
    NOT?: WorkflowApprovalWhereInput | WorkflowApprovalWhereInput[]
    historyId?: StringFilter<"WorkflowApproval"> | string
    approvalType?: EnumApprovalTypeFilter<"WorkflowApproval"> | $Enums.ApprovalType
    status?: EnumApprovalStatusFilter<"WorkflowApproval"> | $Enums.ApprovalStatus
    requestedById?: StringFilter<"WorkflowApproval"> | string
    reviewedById?: StringNullableFilter<"WorkflowApproval"> | string | null
    requestedAt?: DateTimeFilter<"WorkflowApproval"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"WorkflowApproval"> | Date | string | null
    comments?: StringNullableFilter<"WorkflowApproval"> | string | null
    rejectionReason?: StringNullableFilter<"WorkflowApproval"> | string | null
    attachments?: StringNullableListFilter<"WorkflowApproval">
    departmentHistory?: XOR<ProjectDepartmentHistoryRelationFilter, ProjectDepartmentHistoryWhereInput>
    requestedBy?: XOR<UserRelationFilter, UserWhereInput>
    reviewedBy?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type WorkflowApprovalOrderByWithAggregationInput = {
    id?: SortOrder
    historyId?: SortOrder
    approvalType?: SortOrder
    status?: SortOrder
    requestedById?: SortOrder
    reviewedById?: SortOrderInput | SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrderInput | SortOrder
    comments?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    attachments?: SortOrder
    _count?: WorkflowApprovalCountOrderByAggregateInput
    _max?: WorkflowApprovalMaxOrderByAggregateInput
    _min?: WorkflowApprovalMinOrderByAggregateInput
  }

  export type WorkflowApprovalScalarWhereWithAggregatesInput = {
    AND?: WorkflowApprovalScalarWhereWithAggregatesInput | WorkflowApprovalScalarWhereWithAggregatesInput[]
    OR?: WorkflowApprovalScalarWhereWithAggregatesInput[]
    NOT?: WorkflowApprovalScalarWhereWithAggregatesInput | WorkflowApprovalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WorkflowApproval"> | string
    historyId?: StringWithAggregatesFilter<"WorkflowApproval"> | string
    approvalType?: EnumApprovalTypeWithAggregatesFilter<"WorkflowApproval"> | $Enums.ApprovalType
    status?: EnumApprovalStatusWithAggregatesFilter<"WorkflowApproval"> | $Enums.ApprovalStatus
    requestedById?: StringWithAggregatesFilter<"WorkflowApproval"> | string
    reviewedById?: StringNullableWithAggregatesFilter<"WorkflowApproval"> | string | null
    requestedAt?: DateTimeWithAggregatesFilter<"WorkflowApproval"> | Date | string
    reviewedAt?: DateTimeNullableWithAggregatesFilter<"WorkflowApproval"> | Date | string | null
    comments?: StringNullableWithAggregatesFilter<"WorkflowApproval"> | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"WorkflowApproval"> | string | null
    attachments?: StringNullableListFilter<"WorkflowApproval">
  }

  export type QATestingRoundWhereInput = {
    AND?: QATestingRoundWhereInput | QATestingRoundWhereInput[]
    OR?: QATestingRoundWhereInput[]
    NOT?: QATestingRoundWhereInput | QATestingRoundWhereInput[]
    id?: StringFilter<"QATestingRound"> | string
    historyId?: StringFilter<"QATestingRound"> | string
    roundNumber?: IntFilter<"QATestingRound"> | number
    qaType?: EnumQATypeFilter<"QATestingRound"> | $Enums.QAType
    status?: EnumQAStatusFilter<"QATestingRound"> | $Enums.QAStatus
    startedAt?: DateTimeFilter<"QATestingRound"> | Date | string
    completedAt?: DateTimeNullableFilter<"QATestingRound"> | Date | string | null
    testedById?: StringFilter<"QATestingRound"> | string
    bugsFound?: IntFilter<"QATestingRound"> | number
    criticalBugs?: IntFilter<"QATestingRound"> | number
    testResults?: StringNullableFilter<"QATestingRound"> | string | null
    rejectionReason?: StringNullableFilter<"QATestingRound"> | string | null
    bugs?: QABugListRelationFilter
    departmentHistory?: XOR<ProjectDepartmentHistoryRelationFilter, ProjectDepartmentHistoryWhereInput>
    testedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type QATestingRoundOrderByWithRelationInput = {
    id?: SortOrder
    historyId?: SortOrder
    roundNumber?: SortOrder
    qaType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    testedById?: SortOrder
    bugsFound?: SortOrder
    criticalBugs?: SortOrder
    testResults?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    bugs?: QABugOrderByRelationAggregateInput
    departmentHistory?: ProjectDepartmentHistoryOrderByWithRelationInput
    testedBy?: UserOrderByWithRelationInput
  }

  export type QATestingRoundWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QATestingRoundWhereInput | QATestingRoundWhereInput[]
    OR?: QATestingRoundWhereInput[]
    NOT?: QATestingRoundWhereInput | QATestingRoundWhereInput[]
    historyId?: StringFilter<"QATestingRound"> | string
    roundNumber?: IntFilter<"QATestingRound"> | number
    qaType?: EnumQATypeFilter<"QATestingRound"> | $Enums.QAType
    status?: EnumQAStatusFilter<"QATestingRound"> | $Enums.QAStatus
    startedAt?: DateTimeFilter<"QATestingRound"> | Date | string
    completedAt?: DateTimeNullableFilter<"QATestingRound"> | Date | string | null
    testedById?: StringFilter<"QATestingRound"> | string
    bugsFound?: IntFilter<"QATestingRound"> | number
    criticalBugs?: IntFilter<"QATestingRound"> | number
    testResults?: StringNullableFilter<"QATestingRound"> | string | null
    rejectionReason?: StringNullableFilter<"QATestingRound"> | string | null
    bugs?: QABugListRelationFilter
    departmentHistory?: XOR<ProjectDepartmentHistoryRelationFilter, ProjectDepartmentHistoryWhereInput>
    testedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type QATestingRoundOrderByWithAggregationInput = {
    id?: SortOrder
    historyId?: SortOrder
    roundNumber?: SortOrder
    qaType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrderInput | SortOrder
    testedById?: SortOrder
    bugsFound?: SortOrder
    criticalBugs?: SortOrder
    testResults?: SortOrderInput | SortOrder
    rejectionReason?: SortOrderInput | SortOrder
    _count?: QATestingRoundCountOrderByAggregateInput
    _avg?: QATestingRoundAvgOrderByAggregateInput
    _max?: QATestingRoundMaxOrderByAggregateInput
    _min?: QATestingRoundMinOrderByAggregateInput
    _sum?: QATestingRoundSumOrderByAggregateInput
  }

  export type QATestingRoundScalarWhereWithAggregatesInput = {
    AND?: QATestingRoundScalarWhereWithAggregatesInput | QATestingRoundScalarWhereWithAggregatesInput[]
    OR?: QATestingRoundScalarWhereWithAggregatesInput[]
    NOT?: QATestingRoundScalarWhereWithAggregatesInput | QATestingRoundScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QATestingRound"> | string
    historyId?: StringWithAggregatesFilter<"QATestingRound"> | string
    roundNumber?: IntWithAggregatesFilter<"QATestingRound"> | number
    qaType?: EnumQATypeWithAggregatesFilter<"QATestingRound"> | $Enums.QAType
    status?: EnumQAStatusWithAggregatesFilter<"QATestingRound"> | $Enums.QAStatus
    startedAt?: DateTimeWithAggregatesFilter<"QATestingRound"> | Date | string
    completedAt?: DateTimeNullableWithAggregatesFilter<"QATestingRound"> | Date | string | null
    testedById?: StringWithAggregatesFilter<"QATestingRound"> | string
    bugsFound?: IntWithAggregatesFilter<"QATestingRound"> | number
    criticalBugs?: IntWithAggregatesFilter<"QATestingRound"> | number
    testResults?: StringNullableWithAggregatesFilter<"QATestingRound"> | string | null
    rejectionReason?: StringNullableWithAggregatesFilter<"QATestingRound"> | string | null
  }

  export type QABugWhereInput = {
    AND?: QABugWhereInput | QABugWhereInput[]
    OR?: QABugWhereInput[]
    NOT?: QABugWhereInput | QABugWhereInput[]
    id?: StringFilter<"QABug"> | string
    qaRoundId?: StringFilter<"QABug"> | string
    title?: StringFilter<"QABug"> | string
    description?: StringFilter<"QABug"> | string
    severity?: EnumBugSeverityFilter<"QABug"> | $Enums.BugSeverity
    status?: EnumBugStatusFilter<"QABug"> | $Enums.BugStatus
    foundAt?: DateTimeFilter<"QABug"> | Date | string
    fixedAt?: DateTimeNullableFilter<"QABug"> | Date | string | null
    assignedToId?: StringNullableFilter<"QABug"> | string | null
    screenshot?: StringNullableFilter<"QABug"> | string | null
    steps?: StringNullableFilter<"QABug"> | string | null
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    qaRound?: XOR<QATestingRoundRelationFilter, QATestingRoundWhereInput>
  }

  export type QABugOrderByWithRelationInput = {
    id?: SortOrder
    qaRoundId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    foundAt?: SortOrder
    fixedAt?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    screenshot?: SortOrderInput | SortOrder
    steps?: SortOrderInput | SortOrder
    assignedTo?: UserOrderByWithRelationInput
    qaRound?: QATestingRoundOrderByWithRelationInput
  }

  export type QABugWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QABugWhereInput | QABugWhereInput[]
    OR?: QABugWhereInput[]
    NOT?: QABugWhereInput | QABugWhereInput[]
    qaRoundId?: StringFilter<"QABug"> | string
    title?: StringFilter<"QABug"> | string
    description?: StringFilter<"QABug"> | string
    severity?: EnumBugSeverityFilter<"QABug"> | $Enums.BugSeverity
    status?: EnumBugStatusFilter<"QABug"> | $Enums.BugStatus
    foundAt?: DateTimeFilter<"QABug"> | Date | string
    fixedAt?: DateTimeNullableFilter<"QABug"> | Date | string | null
    assignedToId?: StringNullableFilter<"QABug"> | string | null
    screenshot?: StringNullableFilter<"QABug"> | string | null
    steps?: StringNullableFilter<"QABug"> | string | null
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    qaRound?: XOR<QATestingRoundRelationFilter, QATestingRoundWhereInput>
  }, "id">

  export type QABugOrderByWithAggregationInput = {
    id?: SortOrder
    qaRoundId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    foundAt?: SortOrder
    fixedAt?: SortOrderInput | SortOrder
    assignedToId?: SortOrderInput | SortOrder
    screenshot?: SortOrderInput | SortOrder
    steps?: SortOrderInput | SortOrder
    _count?: QABugCountOrderByAggregateInput
    _max?: QABugMaxOrderByAggregateInput
    _min?: QABugMinOrderByAggregateInput
  }

  export type QABugScalarWhereWithAggregatesInput = {
    AND?: QABugScalarWhereWithAggregatesInput | QABugScalarWhereWithAggregatesInput[]
    OR?: QABugScalarWhereWithAggregatesInput[]
    NOT?: QABugScalarWhereWithAggregatesInput | QABugScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QABug"> | string
    qaRoundId?: StringWithAggregatesFilter<"QABug"> | string
    title?: StringWithAggregatesFilter<"QABug"> | string
    description?: StringWithAggregatesFilter<"QABug"> | string
    severity?: EnumBugSeverityWithAggregatesFilter<"QABug"> | $Enums.BugSeverity
    status?: EnumBugStatusWithAggregatesFilter<"QABug"> | $Enums.BugStatus
    foundAt?: DateTimeWithAggregatesFilter<"QABug"> | Date | string
    fixedAt?: DateTimeNullableWithAggregatesFilter<"QABug"> | Date | string | null
    assignedToId?: StringNullableWithAggregatesFilter<"QABug"> | string | null
    screenshot?: StringNullableWithAggregatesFilter<"QABug"> | string | null
    steps?: StringNullableWithAggregatesFilter<"QABug"> | string | null
  }

  export type DepartmentMasterWhereInput = {
    AND?: DepartmentMasterWhereInput | DepartmentMasterWhereInput[]
    OR?: DepartmentMasterWhereInput[]
    NOT?: DepartmentMasterWhereInput | DepartmentMasterWhereInput[]
    id?: StringFilter<"DepartmentMaster"> | string
    name?: StringFilter<"DepartmentMaster"> | string
    code?: StringFilter<"DepartmentMaster"> | string
    parentId?: StringNullableFilter<"DepartmentMaster"> | string | null
    isActive?: BoolFilter<"DepartmentMaster"> | boolean
    createdAt?: DateTimeFilter<"DepartmentMaster"> | Date | string
    updatedAt?: DateTimeFilter<"DepartmentMaster"> | Date | string
    parent?: XOR<DepartmentMasterNullableRelationFilter, DepartmentMasterWhereInput> | null
    children?: DepartmentMasterListRelationFilter
    roles?: RoleMasterListRelationFilter
    users?: UserListRelationFilter
  }

  export type DepartmentMasterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    parent?: DepartmentMasterOrderByWithRelationInput
    children?: DepartmentMasterOrderByRelationAggregateInput
    roles?: RoleMasterOrderByRelationAggregateInput
    users?: UserOrderByRelationAggregateInput
  }

  export type DepartmentMasterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: DepartmentMasterWhereInput | DepartmentMasterWhereInput[]
    OR?: DepartmentMasterWhereInput[]
    NOT?: DepartmentMasterWhereInput | DepartmentMasterWhereInput[]
    parentId?: StringNullableFilter<"DepartmentMaster"> | string | null
    isActive?: BoolFilter<"DepartmentMaster"> | boolean
    createdAt?: DateTimeFilter<"DepartmentMaster"> | Date | string
    updatedAt?: DateTimeFilter<"DepartmentMaster"> | Date | string
    parent?: XOR<DepartmentMasterNullableRelationFilter, DepartmentMasterWhereInput> | null
    children?: DepartmentMasterListRelationFilter
    roles?: RoleMasterListRelationFilter
    users?: UserListRelationFilter
  }, "id" | "name" | "code">

  export type DepartmentMasterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: DepartmentMasterCountOrderByAggregateInput
    _max?: DepartmentMasterMaxOrderByAggregateInput
    _min?: DepartmentMasterMinOrderByAggregateInput
  }

  export type DepartmentMasterScalarWhereWithAggregatesInput = {
    AND?: DepartmentMasterScalarWhereWithAggregatesInput | DepartmentMasterScalarWhereWithAggregatesInput[]
    OR?: DepartmentMasterScalarWhereWithAggregatesInput[]
    NOT?: DepartmentMasterScalarWhereWithAggregatesInput | DepartmentMasterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DepartmentMaster"> | string
    name?: StringWithAggregatesFilter<"DepartmentMaster"> | string
    code?: StringWithAggregatesFilter<"DepartmentMaster"> | string
    parentId?: StringNullableWithAggregatesFilter<"DepartmentMaster"> | string | null
    isActive?: BoolWithAggregatesFilter<"DepartmentMaster"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"DepartmentMaster"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"DepartmentMaster"> | Date | string
  }

  export type RoleMasterWhereInput = {
    AND?: RoleMasterWhereInput | RoleMasterWhereInput[]
    OR?: RoleMasterWhereInput[]
    NOT?: RoleMasterWhereInput | RoleMasterWhereInput[]
    id?: StringFilter<"RoleMaster"> | string
    name?: StringFilter<"RoleMaster"> | string
    code?: StringFilter<"RoleMaster"> | string
    description?: StringNullableFilter<"RoleMaster"> | string | null
    departmentId?: StringFilter<"RoleMaster"> | string
    isActive?: BoolFilter<"RoleMaster"> | boolean
    createdAt?: DateTimeFilter<"RoleMaster"> | Date | string
    updatedAt?: DateTimeFilter<"RoleMaster"> | Date | string
    department?: XOR<DepartmentMasterRelationFilter, DepartmentMasterWhereInput>
    users?: UserListRelationFilter
  }

  export type RoleMasterOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    departmentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    department?: DepartmentMasterOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
  }

  export type RoleMasterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: RoleMasterWhereInput | RoleMasterWhereInput[]
    OR?: RoleMasterWhereInput[]
    NOT?: RoleMasterWhereInput | RoleMasterWhereInput[]
    description?: StringNullableFilter<"RoleMaster"> | string | null
    departmentId?: StringFilter<"RoleMaster"> | string
    isActive?: BoolFilter<"RoleMaster"> | boolean
    createdAt?: DateTimeFilter<"RoleMaster"> | Date | string
    updatedAt?: DateTimeFilter<"RoleMaster"> | Date | string
    department?: XOR<DepartmentMasterRelationFilter, DepartmentMasterWhereInput>
    users?: UserListRelationFilter
  }, "id" | "name" | "code">

  export type RoleMasterOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrderInput | SortOrder
    departmentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: RoleMasterCountOrderByAggregateInput
    _max?: RoleMasterMaxOrderByAggregateInput
    _min?: RoleMasterMinOrderByAggregateInput
  }

  export type RoleMasterScalarWhereWithAggregatesInput = {
    AND?: RoleMasterScalarWhereWithAggregatesInput | RoleMasterScalarWhereWithAggregatesInput[]
    OR?: RoleMasterScalarWhereWithAggregatesInput[]
    NOT?: RoleMasterScalarWhereWithAggregatesInput | RoleMasterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"RoleMaster"> | string
    name?: StringWithAggregatesFilter<"RoleMaster"> | string
    code?: StringWithAggregatesFilter<"RoleMaster"> | string
    description?: StringNullableWithAggregatesFilter<"RoleMaster"> | string | null
    departmentId?: StringWithAggregatesFilter<"RoleMaster"> | string
    isActive?: BoolWithAggregatesFilter<"RoleMaster"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"RoleMaster"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"RoleMaster"> | Date | string
  }

  export type ProjectAssignmentHistoryWhereInput = {
    AND?: ProjectAssignmentHistoryWhereInput | ProjectAssignmentHistoryWhereInput[]
    OR?: ProjectAssignmentHistoryWhereInput[]
    NOT?: ProjectAssignmentHistoryWhereInput | ProjectAssignmentHistoryWhereInput[]
    id?: StringFilter<"ProjectAssignmentHistory"> | string
    projectId?: StringFilter<"ProjectAssignmentHistory"> | string
    assignmentType?: EnumProjectAssignmentTypeFilter<"ProjectAssignmentHistory"> | $Enums.ProjectAssignmentType
    previousUserId?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    newUserId?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    assignedById?: StringFilter<"ProjectAssignmentHistory"> | string
    assignedAt?: DateTimeFilter<"ProjectAssignmentHistory"> | Date | string
    reason?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    notes?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    previousUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    assignedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProjectAssignmentHistoryOrderByWithRelationInput = {
    id?: SortOrder
    projectId?: SortOrder
    assignmentType?: SortOrder
    previousUserId?: SortOrderInput | SortOrder
    newUserId?: SortOrderInput | SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
    reason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    project?: ProjectOrderByWithRelationInput
    previousUser?: UserOrderByWithRelationInput
    assignedBy?: UserOrderByWithRelationInput
  }

  export type ProjectAssignmentHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProjectAssignmentHistoryWhereInput | ProjectAssignmentHistoryWhereInput[]
    OR?: ProjectAssignmentHistoryWhereInput[]
    NOT?: ProjectAssignmentHistoryWhereInput | ProjectAssignmentHistoryWhereInput[]
    projectId?: StringFilter<"ProjectAssignmentHistory"> | string
    assignmentType?: EnumProjectAssignmentTypeFilter<"ProjectAssignmentHistory"> | $Enums.ProjectAssignmentType
    previousUserId?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    newUserId?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    assignedById?: StringFilter<"ProjectAssignmentHistory"> | string
    assignedAt?: DateTimeFilter<"ProjectAssignmentHistory"> | Date | string
    reason?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    notes?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    project?: XOR<ProjectRelationFilter, ProjectWhereInput>
    previousUser?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    assignedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ProjectAssignmentHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    projectId?: SortOrder
    assignmentType?: SortOrder
    previousUserId?: SortOrderInput | SortOrder
    newUserId?: SortOrderInput | SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
    reason?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    _count?: ProjectAssignmentHistoryCountOrderByAggregateInput
    _max?: ProjectAssignmentHistoryMaxOrderByAggregateInput
    _min?: ProjectAssignmentHistoryMinOrderByAggregateInput
  }

  export type ProjectAssignmentHistoryScalarWhereWithAggregatesInput = {
    AND?: ProjectAssignmentHistoryScalarWhereWithAggregatesInput | ProjectAssignmentHistoryScalarWhereWithAggregatesInput[]
    OR?: ProjectAssignmentHistoryScalarWhereWithAggregatesInput[]
    NOT?: ProjectAssignmentHistoryScalarWhereWithAggregatesInput | ProjectAssignmentHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProjectAssignmentHistory"> | string
    projectId?: StringWithAggregatesFilter<"ProjectAssignmentHistory"> | string
    assignmentType?: EnumProjectAssignmentTypeWithAggregatesFilter<"ProjectAssignmentHistory"> | $Enums.ProjectAssignmentType
    previousUserId?: StringNullableWithAggregatesFilter<"ProjectAssignmentHistory"> | string | null
    newUserId?: StringNullableWithAggregatesFilter<"ProjectAssignmentHistory"> | string | null
    assignedById?: StringWithAggregatesFilter<"ProjectAssignmentHistory"> | string
    assignedAt?: DateTimeWithAggregatesFilter<"ProjectAssignmentHistory"> | Date | string
    reason?: StringNullableWithAggregatesFilter<"ProjectAssignmentHistory"> | string | null
    notes?: StringNullableWithAggregatesFilter<"ProjectAssignmentHistory"> | string | null
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectCreateInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    comments?: CommentCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryCreateNestedManyWithoutProjectInput
    owner: UserCreateNestedOneWithoutOwnedProjectsInput
    projectCoordinator?: UserCreateNestedOneWithoutCoordinatedProjectsInput
    pcTeamLead?: UserCreateNestedOneWithoutPcTeamLeadProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    pcTeamLeadId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldUncheckedCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    comments?: CommentUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateManyWithoutProjectNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedProjectsNestedInput
    projectCoordinator?: UserUpdateOneWithoutCoordinatedProjectsNestedInput
    pcTeamLead?: UserUpdateOneWithoutPcTeamLeadProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUncheckedUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectCreateManyInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    pcTeamLeadId?: string | null
  }

  export type ProjectUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutTaskInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    project: ProjectCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    assigneeId?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutTaskNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskCreateManyInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    assigneeId?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateInput = {
    id?: string
    content: string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
    task?: TaskCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    content: string
    authorId: string
    projectId?: string | null
    taskId?: string | null
    createdAt?: Date | string
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    task?: TaskUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentCreateManyInput = {
    id?: string
    content: string
    authorId: string
    projectId?: string | null
    taskId?: string | null
    createdAt?: Date | string
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomFieldCreateInput = {
    id?: string
    fieldName: string
    fieldValue: string
    project: ProjectCreateNestedOneWithoutCustomFieldsInput
  }

  export type CustomFieldUncheckedCreateInput = {
    id?: string
    fieldName: string
    fieldValue: string
    projectId: string
  }

  export type CustomFieldUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    project?: ProjectUpdateOneRequiredWithoutCustomFieldsNestedInput
  }

  export type CustomFieldUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type CustomFieldCreateManyInput = {
    id?: string
    fieldName: string
    fieldValue: string
    projectId: string
  }

  export type CustomFieldUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type CustomFieldUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectDepartmentHistoryCreateInput = {
    id?: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionCreateNestedManyWithoutDepartmentHistoryInput
    movedBy: UserCreateNestedOneWithoutDepartmentTransitionsInput
    permissionGrantedBy?: UserCreateNestedOneWithoutDepartmentPermissionsInput
    project: ProjectCreateNestedOneWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryUncheckedCreateInput = {
    id?: string
    projectId: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    permissionGrantedById?: string | null
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalUncheckedCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUpdateManyWithoutDepartmentHistoryNestedInput
    movedBy?: UserUpdateOneRequiredWithoutDepartmentTransitionsNestedInput
    permissionGrantedBy?: UserUpdateOneWithoutDepartmentPermissionsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    movedById?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    permissionGrantedById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryCreateManyInput = {
    id?: string
    projectId: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    permissionGrantedById?: string | null
    updatedAt?: Date | string
  }

  export type ProjectDepartmentHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectDepartmentHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    movedById?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    permissionGrantedById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCorrectionCreateInput = {
    id?: string
    correctionType: string
    description: string
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
    assignedTo?: UserCreateNestedOneWithoutAssignedCorrectionsInput
    departmentHistory: ProjectDepartmentHistoryCreateNestedOneWithoutCorrectionsInput
    requestedBy: UserCreateNestedOneWithoutRequestedCorrectionsInput
  }

  export type DepartmentCorrectionUncheckedCreateInput = {
    id?: string
    historyId: string
    correctionType: string
    description: string
    requestedById: string
    assignedToId?: string | null
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
  }

  export type DepartmentCorrectionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
    assignedTo?: UserUpdateOneWithoutAssignedCorrectionsNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateOneRequiredWithoutCorrectionsNestedInput
    requestedBy?: UserUpdateOneRequiredWithoutRequestedCorrectionsNestedInput
  }

  export type DepartmentCorrectionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DepartmentCorrectionCreateManyInput = {
    id?: string
    historyId: string
    correctionType: string
    description: string
    requestedById: string
    assignedToId?: string | null
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
  }

  export type DepartmentCorrectionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DepartmentCorrectionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WorkflowApprovalCreateInput = {
    id?: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
    departmentHistory: ProjectDepartmentHistoryCreateNestedOneWithoutApprovalsInput
    requestedBy: UserCreateNestedOneWithoutApprovalRequestsInput
    reviewedBy?: UserCreateNestedOneWithoutApprovalReviewsInput
  }

  export type WorkflowApprovalUncheckedCreateInput = {
    id?: string
    historyId: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedById: string
    reviewedById?: string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
  }

  export type WorkflowApprovalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
    departmentHistory?: ProjectDepartmentHistoryUpdateOneRequiredWithoutApprovalsNestedInput
    requestedBy?: UserUpdateOneRequiredWithoutApprovalRequestsNestedInput
    reviewedBy?: UserUpdateOneWithoutApprovalReviewsNestedInput
  }

  export type WorkflowApprovalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedById?: StringFieldUpdateOperationsInput | string
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
  }

  export type WorkflowApprovalCreateManyInput = {
    id?: string
    historyId: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedById: string
    reviewedById?: string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
  }

  export type WorkflowApprovalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
  }

  export type WorkflowApprovalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedById?: StringFieldUpdateOperationsInput | string
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
  }

  export type QATestingRoundCreateInput = {
    id?: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
    bugs?: QABugCreateNestedManyWithoutQaRoundInput
    departmentHistory: ProjectDepartmentHistoryCreateNestedOneWithoutQaRoundsInput
    testedBy: UserCreateNestedOneWithoutQaTestingRoundsInput
  }

  export type QATestingRoundUncheckedCreateInput = {
    id?: string
    historyId: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    testedById: string
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
    bugs?: QABugUncheckedCreateNestedManyWithoutQaRoundInput
  }

  export type QATestingRoundUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    bugs?: QABugUpdateManyWithoutQaRoundNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateOneRequiredWithoutQaRoundsNestedInput
    testedBy?: UserUpdateOneRequiredWithoutQaTestingRoundsNestedInput
  }

  export type QATestingRoundUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    testedById?: StringFieldUpdateOperationsInput | string
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    bugs?: QABugUncheckedUpdateManyWithoutQaRoundNestedInput
  }

  export type QATestingRoundCreateManyInput = {
    id?: string
    historyId: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    testedById: string
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
  }

  export type QATestingRoundUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QATestingRoundUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    testedById?: StringFieldUpdateOperationsInput | string
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QABugCreateInput = {
    id?: string
    title: string
    description: string
    severity?: $Enums.BugSeverity
    status?: $Enums.BugStatus
    foundAt?: Date | string
    fixedAt?: Date | string | null
    screenshot?: string | null
    steps?: string | null
    assignedTo?: UserCreateNestedOneWithoutBugAssignmentsInput
    qaRound: QATestingRoundCreateNestedOneWithoutBugsInput
  }

  export type QABugUncheckedCreateInput = {
    id?: string
    qaRoundId: string
    title: string
    description: string
    severity?: $Enums.BugSeverity
    status?: $Enums.BugStatus
    foundAt?: Date | string
    fixedAt?: Date | string | null
    assignedToId?: string | null
    screenshot?: string | null
    steps?: string | null
  }

  export type QABugUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: UserUpdateOneWithoutBugAssignmentsNestedInput
    qaRound?: QATestingRoundUpdateOneRequiredWithoutBugsNestedInput
  }

  export type QABugUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    qaRoundId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QABugCreateManyInput = {
    id?: string
    qaRoundId: string
    title: string
    description: string
    severity?: $Enums.BugSeverity
    status?: $Enums.BugStatus
    foundAt?: Date | string
    fixedAt?: Date | string | null
    assignedToId?: string | null
    screenshot?: string | null
    steps?: string | null
  }

  export type QABugUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QABugUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    qaRoundId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentMasterCreateInput = {
    id?: string
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: DepartmentMasterCreateNestedOneWithoutChildrenInput
    children?: DepartmentMasterCreateNestedManyWithoutParentInput
    roles?: RoleMasterCreateNestedManyWithoutDepartmentInput
    users?: UserCreateNestedManyWithoutDepartmentMasterInput
  }

  export type DepartmentMasterUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: DepartmentMasterUncheckedCreateNestedManyWithoutParentInput
    roles?: RoleMasterUncheckedCreateNestedManyWithoutDepartmentInput
    users?: UserUncheckedCreateNestedManyWithoutDepartmentMasterInput
  }

  export type DepartmentMasterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: DepartmentMasterUpdateOneWithoutChildrenNestedInput
    children?: DepartmentMasterUpdateManyWithoutParentNestedInput
    roles?: RoleMasterUpdateManyWithoutDepartmentNestedInput
    users?: UserUpdateManyWithoutDepartmentMasterNestedInput
  }

  export type DepartmentMasterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: DepartmentMasterUncheckedUpdateManyWithoutParentNestedInput
    roles?: RoleMasterUncheckedUpdateManyWithoutDepartmentNestedInput
    users?: UserUncheckedUpdateManyWithoutDepartmentMasterNestedInput
  }

  export type DepartmentMasterCreateManyInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type DepartmentMasterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentMasterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleMasterCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentMasterCreateNestedOneWithoutRolesInput
    users?: UserCreateNestedManyWithoutRoleMasterInput
  }

  export type RoleMasterUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    departmentId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutRoleMasterInput
  }

  export type RoleMasterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentMasterUpdateOneRequiredWithoutRolesNestedInput
    users?: UserUpdateManyWithoutRoleMasterNestedInput
  }

  export type RoleMasterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutRoleMasterNestedInput
  }

  export type RoleMasterCreateManyInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    departmentId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleMasterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleMasterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectAssignmentHistoryCreateInput = {
    id?: string
    assignmentType: $Enums.ProjectAssignmentType
    newUserId?: string | null
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
    project: ProjectCreateNestedOneWithoutAssignmentHistoryInput
    previousUser?: UserCreateNestedOneWithoutAssignmentHistoryInput
    assignedBy: UserCreateNestedOneWithoutAssignmentsMadeInput
  }

  export type ProjectAssignmentHistoryUncheckedCreateInput = {
    id?: string
    projectId: string
    assignmentType: $Enums.ProjectAssignmentType
    previousUserId?: string | null
    newUserId?: string | null
    assignedById: string
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
  }

  export type ProjectAssignmentHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutAssignmentHistoryNestedInput
    previousUser?: UserUpdateOneWithoutAssignmentHistoryNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignmentsMadeNestedInput
  }

  export type ProjectAssignmentHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    previousUserId?: NullableStringFieldUpdateOperationsInput | string | null
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectAssignmentHistoryCreateManyInput = {
    id?: string
    projectId: string
    assignmentType: $Enums.ProjectAssignmentType
    previousUserId?: string | null
    newUserId?: string | null
    assignedById: string
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
  }

  export type ProjectAssignmentHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectAssignmentHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    previousUserId?: NullableStringFieldUpdateOperationsInput | string | null
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type EnumDepartmentNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Department | EnumDepartmentFieldRefInput<$PrismaModel> | null
    in?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDepartmentNullableFilter<$PrismaModel> | $Enums.Department | null
  }

  export type RoleMasterNullableRelationFilter = {
    is?: RoleMasterWhereInput | null
    isNot?: RoleMasterWhereInput | null
  }

  export type DepartmentMasterNullableRelationFilter = {
    is?: DepartmentMasterWhereInput | null
    isNot?: DepartmentMasterWhereInput | null
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type DepartmentCorrectionListRelationFilter = {
    every?: DepartmentCorrectionWhereInput
    some?: DepartmentCorrectionWhereInput
    none?: DepartmentCorrectionWhereInput
  }

  export type ProjectDepartmentHistoryListRelationFilter = {
    every?: ProjectDepartmentHistoryWhereInput
    some?: ProjectDepartmentHistoryWhereInput
    none?: ProjectDepartmentHistoryWhereInput
  }

  export type ProjectListRelationFilter = {
    every?: ProjectWhereInput
    some?: ProjectWhereInput
    none?: ProjectWhereInput
  }

  export type QABugListRelationFilter = {
    every?: QABugWhereInput
    some?: QABugWhereInput
    none?: QABugWhereInput
  }

  export type QATestingRoundListRelationFilter = {
    every?: QATestingRoundWhereInput
    some?: QATestingRoundWhereInput
    none?: QATestingRoundWhereInput
  }

  export type TaskListRelationFilter = {
    every?: TaskWhereInput
    some?: TaskWhereInput
    none?: TaskWhereInput
  }

  export type WorkflowApprovalListRelationFilter = {
    every?: WorkflowApprovalWhereInput
    some?: WorkflowApprovalWhereInput
    none?: WorkflowApprovalWhereInput
  }

  export type ProjectAssignmentHistoryListRelationFilter = {
    every?: ProjectAssignmentHistoryWhereInput
    some?: ProjectAssignmentHistoryWhereInput
    none?: ProjectAssignmentHistoryWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentCorrectionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectDepartmentHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QABugOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type QATestingRoundOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TaskOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WorkflowApprovalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectAssignmentHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    department?: SortOrder
    roleId?: SortOrder
    departmentId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    department?: SortOrder
    roleId?: SortOrder
    departmentId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    role?: SortOrder
    avatar?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    department?: SortOrder
    roleId?: SortOrder
    departmentId?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumDepartmentNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Department | EnumDepartmentFieldRefInput<$PrismaModel> | null
    in?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDepartmentNullableWithAggregatesFilter<$PrismaModel> | $Enums.Department | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDepartmentNullableFilter<$PrismaModel>
    _max?: NestedEnumDepartmentNullableFilter<$PrismaModel>
  }

  export type EnumProjectCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectCategory | EnumProjectCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectCategory[] | ListEnumProjectCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectCategory[] | ListEnumProjectCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectCategoryFilter<$PrismaModel> | $Enums.ProjectCategory
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type EnumDepartmentFilter<$PrismaModel = never> = {
    equals?: $Enums.Department | EnumDepartmentFieldRefInput<$PrismaModel>
    in?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentFilter<$PrismaModel> | $Enums.Department
  }

  export type CustomFieldListRelationFilter = {
    every?: CustomFieldWhereInput
    some?: CustomFieldWhereInput
    none?: CustomFieldWhereInput
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type CustomFieldOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProjectCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    office?: SortOrder
    category?: SortOrder
    pagesCount?: SortOrder
    targetDate?: SortOrder
    status?: SortOrder
    ownerId?: SortOrder
    clientName?: SortOrder
    observations?: SortOrder
    monthsPassed?: SortOrder
    startDate?: SortOrder
    deviationReason?: SortOrder
    dependency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentDepartment?: SortOrder
    nextDepartment?: SortOrder
    projectCode?: SortOrder
    projectCoordinatorId?: SortOrder
    pcTeamLeadId?: SortOrder
  }

  export type ProjectAvgOrderByAggregateInput = {
    pagesCount?: SortOrder
    monthsPassed?: SortOrder
  }

  export type ProjectMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    office?: SortOrder
    category?: SortOrder
    pagesCount?: SortOrder
    targetDate?: SortOrder
    status?: SortOrder
    ownerId?: SortOrder
    clientName?: SortOrder
    observations?: SortOrder
    monthsPassed?: SortOrder
    startDate?: SortOrder
    deviationReason?: SortOrder
    dependency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentDepartment?: SortOrder
    nextDepartment?: SortOrder
    projectCode?: SortOrder
    projectCoordinatorId?: SortOrder
    pcTeamLeadId?: SortOrder
  }

  export type ProjectMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    office?: SortOrder
    category?: SortOrder
    pagesCount?: SortOrder
    targetDate?: SortOrder
    status?: SortOrder
    ownerId?: SortOrder
    clientName?: SortOrder
    observations?: SortOrder
    monthsPassed?: SortOrder
    startDate?: SortOrder
    deviationReason?: SortOrder
    dependency?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    currentDepartment?: SortOrder
    nextDepartment?: SortOrder
    projectCode?: SortOrder
    projectCoordinatorId?: SortOrder
    pcTeamLeadId?: SortOrder
  }

  export type ProjectSumOrderByAggregateInput = {
    pagesCount?: SortOrder
    monthsPassed?: SortOrder
  }

  export type EnumProjectCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectCategory | EnumProjectCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectCategory[] | ListEnumProjectCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectCategory[] | ListEnumProjectCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ProjectCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectCategoryFilter<$PrismaModel>
    _max?: NestedEnumProjectCategoryFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type EnumDepartmentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Department | EnumDepartmentFieldRefInput<$PrismaModel>
    in?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentWithAggregatesFilter<$PrismaModel> | $Enums.Department
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentFilter<$PrismaModel>
    _max?: NestedEnumDepartmentFilter<$PrismaModel>
  }

  export type EnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type EnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ProjectRelationFilter = {
    is?: ProjectWhereInput
    isNot?: ProjectWhereInput
  }

  export type TaskCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    assigneeId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    assigneeId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TaskMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    dueDate?: SortOrder
    assigneeId?: SortOrder
    projectId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type EnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProjectNullableRelationFilter = {
    is?: ProjectWhereInput | null
    isNot?: ProjectWhereInput | null
  }

  export type TaskNullableRelationFilter = {
    is?: TaskWhereInput | null
    isNot?: TaskWhereInput | null
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
    taskId?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
    taskId?: SortOrder
    createdAt?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    authorId?: SortOrder
    projectId?: SortOrder
    taskId?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomFieldCountOrderByAggregateInput = {
    id?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    projectId?: SortOrder
  }

  export type CustomFieldMaxOrderByAggregateInput = {
    id?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    projectId?: SortOrder
  }

  export type CustomFieldMinOrderByAggregateInput = {
    id?: SortOrder
    fieldName?: SortOrder
    fieldValue?: SortOrder
    projectId?: SortOrder
  }

  export type EnumDepartmentWorkStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentWorkStatus | EnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentWorkStatus[] | ListEnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentWorkStatus[] | ListEnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentWorkStatusFilter<$PrismaModel> | $Enums.DepartmentWorkStatus
  }

  export type ProjectDepartmentHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    fromDepartment?: SortOrder
    toDepartment?: SortOrder
    movedById?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    workStatus?: SortOrder
    workStartDate?: SortOrder
    workEndDate?: SortOrder
    estimatedDays?: SortOrder
    actualDays?: SortOrder
    correctionCount?: SortOrder
    permissionGrantedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectDepartmentHistoryAvgOrderByAggregateInput = {
    estimatedDays?: SortOrder
    actualDays?: SortOrder
    correctionCount?: SortOrder
  }

  export type ProjectDepartmentHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    fromDepartment?: SortOrder
    toDepartment?: SortOrder
    movedById?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    workStatus?: SortOrder
    workStartDate?: SortOrder
    workEndDate?: SortOrder
    estimatedDays?: SortOrder
    actualDays?: SortOrder
    correctionCount?: SortOrder
    permissionGrantedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectDepartmentHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    fromDepartment?: SortOrder
    toDepartment?: SortOrder
    movedById?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    workStatus?: SortOrder
    workStartDate?: SortOrder
    workEndDate?: SortOrder
    estimatedDays?: SortOrder
    actualDays?: SortOrder
    correctionCount?: SortOrder
    permissionGrantedById?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProjectDepartmentHistorySumOrderByAggregateInput = {
    estimatedDays?: SortOrder
    actualDays?: SortOrder
    correctionCount?: SortOrder
  }

  export type EnumDepartmentWorkStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentWorkStatus | EnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentWorkStatus[] | ListEnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentWorkStatus[] | ListEnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentWorkStatusWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentWorkStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentWorkStatusFilter<$PrismaModel>
    _max?: NestedEnumDepartmentWorkStatusFilter<$PrismaModel>
  }

  export type EnumCorrectionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CorrectionStatus | EnumCorrectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CorrectionStatus[] | ListEnumCorrectionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CorrectionStatus[] | ListEnumCorrectionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCorrectionStatusFilter<$PrismaModel> | $Enums.CorrectionStatus
  }

  export type ProjectDepartmentHistoryRelationFilter = {
    is?: ProjectDepartmentHistoryWhereInput
    isNot?: ProjectDepartmentHistoryWhereInput
  }

  export type DepartmentCorrectionCountOrderByAggregateInput = {
    id?: SortOrder
    historyId?: SortOrder
    correctionType?: SortOrder
    description?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedAt?: SortOrder
    resolvedAt?: SortOrder
    resolutionNotes?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
  }

  export type DepartmentCorrectionAvgOrderByAggregateInput = {
    estimatedHours?: SortOrder
    actualHours?: SortOrder
  }

  export type DepartmentCorrectionMaxOrderByAggregateInput = {
    id?: SortOrder
    historyId?: SortOrder
    correctionType?: SortOrder
    description?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedAt?: SortOrder
    resolvedAt?: SortOrder
    resolutionNotes?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
  }

  export type DepartmentCorrectionMinOrderByAggregateInput = {
    id?: SortOrder
    historyId?: SortOrder
    correctionType?: SortOrder
    description?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    requestedAt?: SortOrder
    resolvedAt?: SortOrder
    resolutionNotes?: SortOrder
    estimatedHours?: SortOrder
    actualHours?: SortOrder
  }

  export type DepartmentCorrectionSumOrderByAggregateInput = {
    estimatedHours?: SortOrder
    actualHours?: SortOrder
  }

  export type EnumCorrectionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CorrectionStatus | EnumCorrectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CorrectionStatus[] | ListEnumCorrectionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CorrectionStatus[] | ListEnumCorrectionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCorrectionStatusWithAggregatesFilter<$PrismaModel> | $Enums.CorrectionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCorrectionStatusFilter<$PrismaModel>
    _max?: NestedEnumCorrectionStatusFilter<$PrismaModel>
  }

  export type EnumApprovalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeFilter<$PrismaModel> | $Enums.ApprovalType
  }

  export type EnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type WorkflowApprovalCountOrderByAggregateInput = {
    id?: SortOrder
    historyId?: SortOrder
    approvalType?: SortOrder
    status?: SortOrder
    requestedById?: SortOrder
    reviewedById?: SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrder
    comments?: SortOrder
    rejectionReason?: SortOrder
    attachments?: SortOrder
  }

  export type WorkflowApprovalMaxOrderByAggregateInput = {
    id?: SortOrder
    historyId?: SortOrder
    approvalType?: SortOrder
    status?: SortOrder
    requestedById?: SortOrder
    reviewedById?: SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrder
    comments?: SortOrder
    rejectionReason?: SortOrder
  }

  export type WorkflowApprovalMinOrderByAggregateInput = {
    id?: SortOrder
    historyId?: SortOrder
    approvalType?: SortOrder
    status?: SortOrder
    requestedById?: SortOrder
    reviewedById?: SortOrder
    requestedAt?: SortOrder
    reviewedAt?: SortOrder
    comments?: SortOrder
    rejectionReason?: SortOrder
  }

  export type EnumApprovalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalTypeFilter<$PrismaModel>
    _max?: NestedEnumApprovalTypeFilter<$PrismaModel>
  }

  export type EnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type EnumQATypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QAType | EnumQATypeFieldRefInput<$PrismaModel>
    in?: $Enums.QAType[] | ListEnumQATypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QAType[] | ListEnumQATypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQATypeFilter<$PrismaModel> | $Enums.QAType
  }

  export type EnumQAStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QAStatus | EnumQAStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QAStatus[] | ListEnumQAStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QAStatus[] | ListEnumQAStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQAStatusFilter<$PrismaModel> | $Enums.QAStatus
  }

  export type QATestingRoundCountOrderByAggregateInput = {
    id?: SortOrder
    historyId?: SortOrder
    roundNumber?: SortOrder
    qaType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    testedById?: SortOrder
    bugsFound?: SortOrder
    criticalBugs?: SortOrder
    testResults?: SortOrder
    rejectionReason?: SortOrder
  }

  export type QATestingRoundAvgOrderByAggregateInput = {
    roundNumber?: SortOrder
    bugsFound?: SortOrder
    criticalBugs?: SortOrder
  }

  export type QATestingRoundMaxOrderByAggregateInput = {
    id?: SortOrder
    historyId?: SortOrder
    roundNumber?: SortOrder
    qaType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    testedById?: SortOrder
    bugsFound?: SortOrder
    criticalBugs?: SortOrder
    testResults?: SortOrder
    rejectionReason?: SortOrder
  }

  export type QATestingRoundMinOrderByAggregateInput = {
    id?: SortOrder
    historyId?: SortOrder
    roundNumber?: SortOrder
    qaType?: SortOrder
    status?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    testedById?: SortOrder
    bugsFound?: SortOrder
    criticalBugs?: SortOrder
    testResults?: SortOrder
    rejectionReason?: SortOrder
  }

  export type QATestingRoundSumOrderByAggregateInput = {
    roundNumber?: SortOrder
    bugsFound?: SortOrder
    criticalBugs?: SortOrder
  }

  export type EnumQATypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QAType | EnumQATypeFieldRefInput<$PrismaModel>
    in?: $Enums.QAType[] | ListEnumQATypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QAType[] | ListEnumQATypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQATypeWithAggregatesFilter<$PrismaModel> | $Enums.QAType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQATypeFilter<$PrismaModel>
    _max?: NestedEnumQATypeFilter<$PrismaModel>
  }

  export type EnumQAStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QAStatus | EnumQAStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QAStatus[] | ListEnumQAStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QAStatus[] | ListEnumQAStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQAStatusWithAggregatesFilter<$PrismaModel> | $Enums.QAStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQAStatusFilter<$PrismaModel>
    _max?: NestedEnumQAStatusFilter<$PrismaModel>
  }

  export type EnumBugSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.BugSeverity | EnumBugSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.BugSeverity[] | ListEnumBugSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BugSeverity[] | ListEnumBugSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumBugSeverityFilter<$PrismaModel> | $Enums.BugSeverity
  }

  export type EnumBugStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BugStatus | EnumBugStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BugStatus[] | ListEnumBugStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BugStatus[] | ListEnumBugStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBugStatusFilter<$PrismaModel> | $Enums.BugStatus
  }

  export type QATestingRoundRelationFilter = {
    is?: QATestingRoundWhereInput
    isNot?: QATestingRoundWhereInput
  }

  export type QABugCountOrderByAggregateInput = {
    id?: SortOrder
    qaRoundId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    foundAt?: SortOrder
    fixedAt?: SortOrder
    assignedToId?: SortOrder
    screenshot?: SortOrder
    steps?: SortOrder
  }

  export type QABugMaxOrderByAggregateInput = {
    id?: SortOrder
    qaRoundId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    foundAt?: SortOrder
    fixedAt?: SortOrder
    assignedToId?: SortOrder
    screenshot?: SortOrder
    steps?: SortOrder
  }

  export type QABugMinOrderByAggregateInput = {
    id?: SortOrder
    qaRoundId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    severity?: SortOrder
    status?: SortOrder
    foundAt?: SortOrder
    fixedAt?: SortOrder
    assignedToId?: SortOrder
    screenshot?: SortOrder
    steps?: SortOrder
  }

  export type EnumBugSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BugSeverity | EnumBugSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.BugSeverity[] | ListEnumBugSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BugSeverity[] | ListEnumBugSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumBugSeverityWithAggregatesFilter<$PrismaModel> | $Enums.BugSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBugSeverityFilter<$PrismaModel>
    _max?: NestedEnumBugSeverityFilter<$PrismaModel>
  }

  export type EnumBugStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BugStatus | EnumBugStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BugStatus[] | ListEnumBugStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BugStatus[] | ListEnumBugStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBugStatusWithAggregatesFilter<$PrismaModel> | $Enums.BugStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBugStatusFilter<$PrismaModel>
    _max?: NestedEnumBugStatusFilter<$PrismaModel>
  }

  export type DepartmentMasterListRelationFilter = {
    every?: DepartmentMasterWhereInput
    some?: DepartmentMasterWhereInput
    none?: DepartmentMasterWhereInput
  }

  export type RoleMasterListRelationFilter = {
    every?: RoleMasterWhereInput
    some?: RoleMasterWhereInput
    none?: RoleMasterWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type DepartmentMasterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RoleMasterOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentMasterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMasterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMasterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DepartmentMasterRelationFilter = {
    is?: DepartmentMasterWhereInput
    isNot?: DepartmentMasterWhereInput
  }

  export type RoleMasterCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    departmentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMasterMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    departmentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type RoleMasterMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    description?: SortOrder
    departmentId?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumProjectAssignmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectAssignmentType | EnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectAssignmentType[] | ListEnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectAssignmentType[] | ListEnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectAssignmentTypeFilter<$PrismaModel> | $Enums.ProjectAssignmentType
  }

  export type ProjectAssignmentHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    assignmentType?: SortOrder
    previousUserId?: SortOrder
    newUserId?: SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
  }

  export type ProjectAssignmentHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    assignmentType?: SortOrder
    previousUserId?: SortOrder
    newUserId?: SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
  }

  export type ProjectAssignmentHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    projectId?: SortOrder
    assignmentType?: SortOrder
    previousUserId?: SortOrder
    newUserId?: SortOrder
    assignedById?: SortOrder
    assignedAt?: SortOrder
    reason?: SortOrder
    notes?: SortOrder
  }

  export type EnumProjectAssignmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectAssignmentType | EnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectAssignmentType[] | ListEnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectAssignmentType[] | ListEnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectAssignmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProjectAssignmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectAssignmentTypeFilter<$PrismaModel>
    _max?: NestedEnumProjectAssignmentTypeFilter<$PrismaModel>
  }

  export type RoleMasterCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleMasterCreateWithoutUsersInput, RoleMasterUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleMasterCreateOrConnectWithoutUsersInput
    connect?: RoleMasterWhereUniqueInput
  }

  export type DepartmentMasterCreateNestedOneWithoutUsersInput = {
    create?: XOR<DepartmentMasterCreateWithoutUsersInput, DepartmentMasterUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutUsersInput
    connect?: DepartmentMasterWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DepartmentCorrectionCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutAssignedToInput, DepartmentCorrectionUncheckedCreateWithoutAssignedToInput> | DepartmentCorrectionCreateWithoutAssignedToInput[] | DepartmentCorrectionUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutAssignedToInput | DepartmentCorrectionCreateOrConnectWithoutAssignedToInput[]
    createMany?: DepartmentCorrectionCreateManyAssignedToInputEnvelope
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
  }

  export type DepartmentCorrectionCreateNestedManyWithoutRequestedByInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutRequestedByInput, DepartmentCorrectionUncheckedCreateWithoutRequestedByInput> | DepartmentCorrectionCreateWithoutRequestedByInput[] | DepartmentCorrectionUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutRequestedByInput | DepartmentCorrectionCreateOrConnectWithoutRequestedByInput[]
    createMany?: DepartmentCorrectionCreateManyRequestedByInputEnvelope
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
  }

  export type ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutMovedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput> | ProjectDepartmentHistoryCreateWithoutMovedByInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutMovedByInput | ProjectDepartmentHistoryCreateOrConnectWithoutMovedByInput[]
    createMany?: ProjectDepartmentHistoryCreateManyMovedByInputEnvelope
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
  }

  export type ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput> | ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutPermissionGrantedByInput | ProjectDepartmentHistoryCreateOrConnectWithoutPermissionGrantedByInput[]
    createMany?: ProjectDepartmentHistoryCreateManyPermissionGrantedByInputEnvelope
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput> | ProjectCreateWithoutOwnerInput[] | ProjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOwnerInput | ProjectCreateOrConnectWithoutOwnerInput[]
    createMany?: ProjectCreateManyOwnerInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutProjectCoordinatorInput = {
    create?: XOR<ProjectCreateWithoutProjectCoordinatorInput, ProjectUncheckedCreateWithoutProjectCoordinatorInput> | ProjectCreateWithoutProjectCoordinatorInput[] | ProjectUncheckedCreateWithoutProjectCoordinatorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectCoordinatorInput | ProjectCreateOrConnectWithoutProjectCoordinatorInput[]
    createMany?: ProjectCreateManyProjectCoordinatorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectCreateNestedManyWithoutPcTeamLeadInput = {
    create?: XOR<ProjectCreateWithoutPcTeamLeadInput, ProjectUncheckedCreateWithoutPcTeamLeadInput> | ProjectCreateWithoutPcTeamLeadInput[] | ProjectUncheckedCreateWithoutPcTeamLeadInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutPcTeamLeadInput | ProjectCreateOrConnectWithoutPcTeamLeadInput[]
    createMany?: ProjectCreateManyPcTeamLeadInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type QABugCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<QABugCreateWithoutAssignedToInput, QABugUncheckedCreateWithoutAssignedToInput> | QABugCreateWithoutAssignedToInput[] | QABugUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: QABugCreateOrConnectWithoutAssignedToInput | QABugCreateOrConnectWithoutAssignedToInput[]
    createMany?: QABugCreateManyAssignedToInputEnvelope
    connect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
  }

  export type QATestingRoundCreateNestedManyWithoutTestedByInput = {
    create?: XOR<QATestingRoundCreateWithoutTestedByInput, QATestingRoundUncheckedCreateWithoutTestedByInput> | QATestingRoundCreateWithoutTestedByInput[] | QATestingRoundUncheckedCreateWithoutTestedByInput[]
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutTestedByInput | QATestingRoundCreateOrConnectWithoutTestedByInput[]
    createMany?: QATestingRoundCreateManyTestedByInputEnvelope
    connect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
  }

  export type TaskCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type WorkflowApprovalCreateNestedManyWithoutRequestedByInput = {
    create?: XOR<WorkflowApprovalCreateWithoutRequestedByInput, WorkflowApprovalUncheckedCreateWithoutRequestedByInput> | WorkflowApprovalCreateWithoutRequestedByInput[] | WorkflowApprovalUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutRequestedByInput | WorkflowApprovalCreateOrConnectWithoutRequestedByInput[]
    createMany?: WorkflowApprovalCreateManyRequestedByInputEnvelope
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
  }

  export type WorkflowApprovalCreateNestedManyWithoutReviewedByInput = {
    create?: XOR<WorkflowApprovalCreateWithoutReviewedByInput, WorkflowApprovalUncheckedCreateWithoutReviewedByInput> | WorkflowApprovalCreateWithoutReviewedByInput[] | WorkflowApprovalUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutReviewedByInput | WorkflowApprovalCreateOrConnectWithoutReviewedByInput[]
    createMany?: WorkflowApprovalCreateManyReviewedByInputEnvelope
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
  }

  export type ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutPreviousUserInput, ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput> | ProjectAssignmentHistoryCreateWithoutPreviousUserInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutPreviousUserInput | ProjectAssignmentHistoryCreateOrConnectWithoutPreviousUserInput[]
    createMany?: ProjectAssignmentHistoryCreateManyPreviousUserInputEnvelope
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
  }

  export type ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutAssignedByInput, ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput> | ProjectAssignmentHistoryCreateWithoutAssignedByInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutAssignedByInput | ProjectAssignmentHistoryCreateOrConnectWithoutAssignedByInput[]
    createMany?: ProjectAssignmentHistoryCreateManyAssignedByInputEnvelope
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutAuthorInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutAssignedToInput, DepartmentCorrectionUncheckedCreateWithoutAssignedToInput> | DepartmentCorrectionCreateWithoutAssignedToInput[] | DepartmentCorrectionUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutAssignedToInput | DepartmentCorrectionCreateOrConnectWithoutAssignedToInput[]
    createMany?: DepartmentCorrectionCreateManyAssignedToInputEnvelope
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
  }

  export type DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutRequestedByInput, DepartmentCorrectionUncheckedCreateWithoutRequestedByInput> | DepartmentCorrectionCreateWithoutRequestedByInput[] | DepartmentCorrectionUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutRequestedByInput | DepartmentCorrectionCreateOrConnectWithoutRequestedByInput[]
    createMany?: DepartmentCorrectionCreateManyRequestedByInputEnvelope
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
  }

  export type ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutMovedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput> | ProjectDepartmentHistoryCreateWithoutMovedByInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutMovedByInput | ProjectDepartmentHistoryCreateOrConnectWithoutMovedByInput[]
    createMany?: ProjectDepartmentHistoryCreateManyMovedByInputEnvelope
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
  }

  export type ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput> | ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutPermissionGrantedByInput | ProjectDepartmentHistoryCreateOrConnectWithoutPermissionGrantedByInput[]
    createMany?: ProjectDepartmentHistoryCreateManyPermissionGrantedByInputEnvelope
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutOwnerInput = {
    create?: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput> | ProjectCreateWithoutOwnerInput[] | ProjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOwnerInput | ProjectCreateOrConnectWithoutOwnerInput[]
    createMany?: ProjectCreateManyOwnerInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput = {
    create?: XOR<ProjectCreateWithoutProjectCoordinatorInput, ProjectUncheckedCreateWithoutProjectCoordinatorInput> | ProjectCreateWithoutProjectCoordinatorInput[] | ProjectUncheckedCreateWithoutProjectCoordinatorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectCoordinatorInput | ProjectCreateOrConnectWithoutProjectCoordinatorInput[]
    createMany?: ProjectCreateManyProjectCoordinatorInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput = {
    create?: XOR<ProjectCreateWithoutPcTeamLeadInput, ProjectUncheckedCreateWithoutPcTeamLeadInput> | ProjectCreateWithoutPcTeamLeadInput[] | ProjectUncheckedCreateWithoutPcTeamLeadInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutPcTeamLeadInput | ProjectCreateOrConnectWithoutPcTeamLeadInput[]
    createMany?: ProjectCreateManyPcTeamLeadInputEnvelope
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
  }

  export type QABugUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<QABugCreateWithoutAssignedToInput, QABugUncheckedCreateWithoutAssignedToInput> | QABugCreateWithoutAssignedToInput[] | QABugUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: QABugCreateOrConnectWithoutAssignedToInput | QABugCreateOrConnectWithoutAssignedToInput[]
    createMany?: QABugCreateManyAssignedToInputEnvelope
    connect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
  }

  export type QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput = {
    create?: XOR<QATestingRoundCreateWithoutTestedByInput, QATestingRoundUncheckedCreateWithoutTestedByInput> | QATestingRoundCreateWithoutTestedByInput[] | QATestingRoundUncheckedCreateWithoutTestedByInput[]
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutTestedByInput | QATestingRoundCreateOrConnectWithoutTestedByInput[]
    createMany?: QATestingRoundCreateManyTestedByInputEnvelope
    connect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutAssigneeInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput = {
    create?: XOR<WorkflowApprovalCreateWithoutRequestedByInput, WorkflowApprovalUncheckedCreateWithoutRequestedByInput> | WorkflowApprovalCreateWithoutRequestedByInput[] | WorkflowApprovalUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutRequestedByInput | WorkflowApprovalCreateOrConnectWithoutRequestedByInput[]
    createMany?: WorkflowApprovalCreateManyRequestedByInputEnvelope
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
  }

  export type WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput = {
    create?: XOR<WorkflowApprovalCreateWithoutReviewedByInput, WorkflowApprovalUncheckedCreateWithoutReviewedByInput> | WorkflowApprovalCreateWithoutReviewedByInput[] | WorkflowApprovalUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutReviewedByInput | WorkflowApprovalCreateOrConnectWithoutReviewedByInput[]
    createMany?: WorkflowApprovalCreateManyReviewedByInputEnvelope
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
  }

  export type ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutPreviousUserInput, ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput> | ProjectAssignmentHistoryCreateWithoutPreviousUserInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutPreviousUserInput | ProjectAssignmentHistoryCreateOrConnectWithoutPreviousUserInput[]
    createMany?: ProjectAssignmentHistoryCreateManyPreviousUserInputEnvelope
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
  }

  export type ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutAssignedByInput, ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput> | ProjectAssignmentHistoryCreateWithoutAssignedByInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutAssignedByInput | ProjectAssignmentHistoryCreateOrConnectWithoutAssignedByInput[]
    createMany?: ProjectAssignmentHistoryCreateManyAssignedByInputEnvelope
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableEnumDepartmentFieldUpdateOperationsInput = {
    set?: $Enums.Department | null
  }

  export type RoleMasterUpdateOneWithoutUsersNestedInput = {
    create?: XOR<RoleMasterCreateWithoutUsersInput, RoleMasterUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleMasterCreateOrConnectWithoutUsersInput
    upsert?: RoleMasterUpsertWithoutUsersInput
    disconnect?: RoleMasterWhereInput | boolean
    delete?: RoleMasterWhereInput | boolean
    connect?: RoleMasterWhereUniqueInput
    update?: XOR<XOR<RoleMasterUpdateToOneWithWhereWithoutUsersInput, RoleMasterUpdateWithoutUsersInput>, RoleMasterUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentMasterUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DepartmentMasterCreateWithoutUsersInput, DepartmentMasterUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutUsersInput
    upsert?: DepartmentMasterUpsertWithoutUsersInput
    disconnect?: DepartmentMasterWhereInput | boolean
    delete?: DepartmentMasterWhereInput | boolean
    connect?: DepartmentMasterWhereUniqueInput
    update?: XOR<XOR<DepartmentMasterUpdateToOneWithWhereWithoutUsersInput, DepartmentMasterUpdateWithoutUsersInput>, DepartmentMasterUncheckedUpdateWithoutUsersInput>
  }

  export type CommentUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutAssignedToInput, DepartmentCorrectionUncheckedCreateWithoutAssignedToInput> | DepartmentCorrectionCreateWithoutAssignedToInput[] | DepartmentCorrectionUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutAssignedToInput | DepartmentCorrectionCreateOrConnectWithoutAssignedToInput[]
    upsert?: DepartmentCorrectionUpsertWithWhereUniqueWithoutAssignedToInput | DepartmentCorrectionUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: DepartmentCorrectionCreateManyAssignedToInputEnvelope
    set?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    disconnect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    delete?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    update?: DepartmentCorrectionUpdateWithWhereUniqueWithoutAssignedToInput | DepartmentCorrectionUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: DepartmentCorrectionUpdateManyWithWhereWithoutAssignedToInput | DepartmentCorrectionUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: DepartmentCorrectionScalarWhereInput | DepartmentCorrectionScalarWhereInput[]
  }

  export type DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutRequestedByInput, DepartmentCorrectionUncheckedCreateWithoutRequestedByInput> | DepartmentCorrectionCreateWithoutRequestedByInput[] | DepartmentCorrectionUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutRequestedByInput | DepartmentCorrectionCreateOrConnectWithoutRequestedByInput[]
    upsert?: DepartmentCorrectionUpsertWithWhereUniqueWithoutRequestedByInput | DepartmentCorrectionUpsertWithWhereUniqueWithoutRequestedByInput[]
    createMany?: DepartmentCorrectionCreateManyRequestedByInputEnvelope
    set?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    disconnect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    delete?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    update?: DepartmentCorrectionUpdateWithWhereUniqueWithoutRequestedByInput | DepartmentCorrectionUpdateWithWhereUniqueWithoutRequestedByInput[]
    updateMany?: DepartmentCorrectionUpdateManyWithWhereWithoutRequestedByInput | DepartmentCorrectionUpdateManyWithWhereWithoutRequestedByInput[]
    deleteMany?: DepartmentCorrectionScalarWhereInput | DepartmentCorrectionScalarWhereInput[]
  }

  export type ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutMovedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput> | ProjectDepartmentHistoryCreateWithoutMovedByInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutMovedByInput | ProjectDepartmentHistoryCreateOrConnectWithoutMovedByInput[]
    upsert?: ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutMovedByInput | ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutMovedByInput[]
    createMany?: ProjectDepartmentHistoryCreateManyMovedByInputEnvelope
    set?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    disconnect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    delete?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    update?: ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutMovedByInput | ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutMovedByInput[]
    updateMany?: ProjectDepartmentHistoryUpdateManyWithWhereWithoutMovedByInput | ProjectDepartmentHistoryUpdateManyWithWhereWithoutMovedByInput[]
    deleteMany?: ProjectDepartmentHistoryScalarWhereInput | ProjectDepartmentHistoryScalarWhereInput[]
  }

  export type ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput> | ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutPermissionGrantedByInput | ProjectDepartmentHistoryCreateOrConnectWithoutPermissionGrantedByInput[]
    upsert?: ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutPermissionGrantedByInput | ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutPermissionGrantedByInput[]
    createMany?: ProjectDepartmentHistoryCreateManyPermissionGrantedByInputEnvelope
    set?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    disconnect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    delete?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    update?: ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutPermissionGrantedByInput | ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutPermissionGrantedByInput[]
    updateMany?: ProjectDepartmentHistoryUpdateManyWithWhereWithoutPermissionGrantedByInput | ProjectDepartmentHistoryUpdateManyWithWhereWithoutPermissionGrantedByInput[]
    deleteMany?: ProjectDepartmentHistoryScalarWhereInput | ProjectDepartmentHistoryScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput> | ProjectCreateWithoutOwnerInput[] | ProjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOwnerInput | ProjectCreateOrConnectWithoutOwnerInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOwnerInput | ProjectUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProjectCreateManyOwnerInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOwnerInput | ProjectUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOwnerInput | ProjectUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutProjectCoordinatorNestedInput = {
    create?: XOR<ProjectCreateWithoutProjectCoordinatorInput, ProjectUncheckedCreateWithoutProjectCoordinatorInput> | ProjectCreateWithoutProjectCoordinatorInput[] | ProjectUncheckedCreateWithoutProjectCoordinatorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectCoordinatorInput | ProjectCreateOrConnectWithoutProjectCoordinatorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutProjectCoordinatorInput | ProjectUpsertWithWhereUniqueWithoutProjectCoordinatorInput[]
    createMany?: ProjectCreateManyProjectCoordinatorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutProjectCoordinatorInput | ProjectUpdateWithWhereUniqueWithoutProjectCoordinatorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutProjectCoordinatorInput | ProjectUpdateManyWithWhereWithoutProjectCoordinatorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUpdateManyWithoutPcTeamLeadNestedInput = {
    create?: XOR<ProjectCreateWithoutPcTeamLeadInput, ProjectUncheckedCreateWithoutPcTeamLeadInput> | ProjectCreateWithoutPcTeamLeadInput[] | ProjectUncheckedCreateWithoutPcTeamLeadInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutPcTeamLeadInput | ProjectCreateOrConnectWithoutPcTeamLeadInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutPcTeamLeadInput | ProjectUpsertWithWhereUniqueWithoutPcTeamLeadInput[]
    createMany?: ProjectCreateManyPcTeamLeadInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutPcTeamLeadInput | ProjectUpdateWithWhereUniqueWithoutPcTeamLeadInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutPcTeamLeadInput | ProjectUpdateManyWithWhereWithoutPcTeamLeadInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type QABugUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<QABugCreateWithoutAssignedToInput, QABugUncheckedCreateWithoutAssignedToInput> | QABugCreateWithoutAssignedToInput[] | QABugUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: QABugCreateOrConnectWithoutAssignedToInput | QABugCreateOrConnectWithoutAssignedToInput[]
    upsert?: QABugUpsertWithWhereUniqueWithoutAssignedToInput | QABugUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: QABugCreateManyAssignedToInputEnvelope
    set?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    disconnect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    delete?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    connect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    update?: QABugUpdateWithWhereUniqueWithoutAssignedToInput | QABugUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: QABugUpdateManyWithWhereWithoutAssignedToInput | QABugUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: QABugScalarWhereInput | QABugScalarWhereInput[]
  }

  export type QATestingRoundUpdateManyWithoutTestedByNestedInput = {
    create?: XOR<QATestingRoundCreateWithoutTestedByInput, QATestingRoundUncheckedCreateWithoutTestedByInput> | QATestingRoundCreateWithoutTestedByInput[] | QATestingRoundUncheckedCreateWithoutTestedByInput[]
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutTestedByInput | QATestingRoundCreateOrConnectWithoutTestedByInput[]
    upsert?: QATestingRoundUpsertWithWhereUniqueWithoutTestedByInput | QATestingRoundUpsertWithWhereUniqueWithoutTestedByInput[]
    createMany?: QATestingRoundCreateManyTestedByInputEnvelope
    set?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    disconnect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    delete?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    connect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    update?: QATestingRoundUpdateWithWhereUniqueWithoutTestedByInput | QATestingRoundUpdateWithWhereUniqueWithoutTestedByInput[]
    updateMany?: QATestingRoundUpdateManyWithWhereWithoutTestedByInput | QATestingRoundUpdateManyWithWhereWithoutTestedByInput[]
    deleteMany?: QATestingRoundScalarWhereInput | QATestingRoundScalarWhereInput[]
  }

  export type TaskUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type WorkflowApprovalUpdateManyWithoutRequestedByNestedInput = {
    create?: XOR<WorkflowApprovalCreateWithoutRequestedByInput, WorkflowApprovalUncheckedCreateWithoutRequestedByInput> | WorkflowApprovalCreateWithoutRequestedByInput[] | WorkflowApprovalUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutRequestedByInput | WorkflowApprovalCreateOrConnectWithoutRequestedByInput[]
    upsert?: WorkflowApprovalUpsertWithWhereUniqueWithoutRequestedByInput | WorkflowApprovalUpsertWithWhereUniqueWithoutRequestedByInput[]
    createMany?: WorkflowApprovalCreateManyRequestedByInputEnvelope
    set?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    disconnect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    delete?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    update?: WorkflowApprovalUpdateWithWhereUniqueWithoutRequestedByInput | WorkflowApprovalUpdateWithWhereUniqueWithoutRequestedByInput[]
    updateMany?: WorkflowApprovalUpdateManyWithWhereWithoutRequestedByInput | WorkflowApprovalUpdateManyWithWhereWithoutRequestedByInput[]
    deleteMany?: WorkflowApprovalScalarWhereInput | WorkflowApprovalScalarWhereInput[]
  }

  export type WorkflowApprovalUpdateManyWithoutReviewedByNestedInput = {
    create?: XOR<WorkflowApprovalCreateWithoutReviewedByInput, WorkflowApprovalUncheckedCreateWithoutReviewedByInput> | WorkflowApprovalCreateWithoutReviewedByInput[] | WorkflowApprovalUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutReviewedByInput | WorkflowApprovalCreateOrConnectWithoutReviewedByInput[]
    upsert?: WorkflowApprovalUpsertWithWhereUniqueWithoutReviewedByInput | WorkflowApprovalUpsertWithWhereUniqueWithoutReviewedByInput[]
    createMany?: WorkflowApprovalCreateManyReviewedByInputEnvelope
    set?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    disconnect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    delete?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    update?: WorkflowApprovalUpdateWithWhereUniqueWithoutReviewedByInput | WorkflowApprovalUpdateWithWhereUniqueWithoutReviewedByInput[]
    updateMany?: WorkflowApprovalUpdateManyWithWhereWithoutReviewedByInput | WorkflowApprovalUpdateManyWithWhereWithoutReviewedByInput[]
    deleteMany?: WorkflowApprovalScalarWhereInput | WorkflowApprovalScalarWhereInput[]
  }

  export type ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutPreviousUserInput, ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput> | ProjectAssignmentHistoryCreateWithoutPreviousUserInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutPreviousUserInput | ProjectAssignmentHistoryCreateOrConnectWithoutPreviousUserInput[]
    upsert?: ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutPreviousUserInput | ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutPreviousUserInput[]
    createMany?: ProjectAssignmentHistoryCreateManyPreviousUserInputEnvelope
    set?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    disconnect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    delete?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    update?: ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutPreviousUserInput | ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutPreviousUserInput[]
    updateMany?: ProjectAssignmentHistoryUpdateManyWithWhereWithoutPreviousUserInput | ProjectAssignmentHistoryUpdateManyWithWhereWithoutPreviousUserInput[]
    deleteMany?: ProjectAssignmentHistoryScalarWhereInput | ProjectAssignmentHistoryScalarWhereInput[]
  }

  export type ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutAssignedByInput, ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput> | ProjectAssignmentHistoryCreateWithoutAssignedByInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutAssignedByInput | ProjectAssignmentHistoryCreateOrConnectWithoutAssignedByInput[]
    upsert?: ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutAssignedByInput | ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: ProjectAssignmentHistoryCreateManyAssignedByInputEnvelope
    set?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    disconnect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    delete?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    update?: ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutAssignedByInput | ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: ProjectAssignmentHistoryUpdateManyWithWhereWithoutAssignedByInput | ProjectAssignmentHistoryUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: ProjectAssignmentHistoryScalarWhereInput | ProjectAssignmentHistoryScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutAuthorNestedInput = {
    create?: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput> | CommentCreateWithoutAuthorInput[] | CommentUncheckedCreateWithoutAuthorInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutAuthorInput | CommentCreateOrConnectWithoutAuthorInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutAuthorInput | CommentUpsertWithWhereUniqueWithoutAuthorInput[]
    createMany?: CommentCreateManyAuthorInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutAuthorInput | CommentUpdateWithWhereUniqueWithoutAuthorInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutAuthorInput | CommentUpdateManyWithWhereWithoutAuthorInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutAssignedToInput, DepartmentCorrectionUncheckedCreateWithoutAssignedToInput> | DepartmentCorrectionCreateWithoutAssignedToInput[] | DepartmentCorrectionUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutAssignedToInput | DepartmentCorrectionCreateOrConnectWithoutAssignedToInput[]
    upsert?: DepartmentCorrectionUpsertWithWhereUniqueWithoutAssignedToInput | DepartmentCorrectionUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: DepartmentCorrectionCreateManyAssignedToInputEnvelope
    set?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    disconnect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    delete?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    update?: DepartmentCorrectionUpdateWithWhereUniqueWithoutAssignedToInput | DepartmentCorrectionUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: DepartmentCorrectionUpdateManyWithWhereWithoutAssignedToInput | DepartmentCorrectionUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: DepartmentCorrectionScalarWhereInput | DepartmentCorrectionScalarWhereInput[]
  }

  export type DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutRequestedByInput, DepartmentCorrectionUncheckedCreateWithoutRequestedByInput> | DepartmentCorrectionCreateWithoutRequestedByInput[] | DepartmentCorrectionUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutRequestedByInput | DepartmentCorrectionCreateOrConnectWithoutRequestedByInput[]
    upsert?: DepartmentCorrectionUpsertWithWhereUniqueWithoutRequestedByInput | DepartmentCorrectionUpsertWithWhereUniqueWithoutRequestedByInput[]
    createMany?: DepartmentCorrectionCreateManyRequestedByInputEnvelope
    set?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    disconnect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    delete?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    update?: DepartmentCorrectionUpdateWithWhereUniqueWithoutRequestedByInput | DepartmentCorrectionUpdateWithWhereUniqueWithoutRequestedByInput[]
    updateMany?: DepartmentCorrectionUpdateManyWithWhereWithoutRequestedByInput | DepartmentCorrectionUpdateManyWithWhereWithoutRequestedByInput[]
    deleteMany?: DepartmentCorrectionScalarWhereInput | DepartmentCorrectionScalarWhereInput[]
  }

  export type ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutMovedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput> | ProjectDepartmentHistoryCreateWithoutMovedByInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutMovedByInput | ProjectDepartmentHistoryCreateOrConnectWithoutMovedByInput[]
    upsert?: ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutMovedByInput | ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutMovedByInput[]
    createMany?: ProjectDepartmentHistoryCreateManyMovedByInputEnvelope
    set?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    disconnect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    delete?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    update?: ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutMovedByInput | ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutMovedByInput[]
    updateMany?: ProjectDepartmentHistoryUpdateManyWithWhereWithoutMovedByInput | ProjectDepartmentHistoryUpdateManyWithWhereWithoutMovedByInput[]
    deleteMany?: ProjectDepartmentHistoryScalarWhereInput | ProjectDepartmentHistoryScalarWhereInput[]
  }

  export type ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput> | ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutPermissionGrantedByInput | ProjectDepartmentHistoryCreateOrConnectWithoutPermissionGrantedByInput[]
    upsert?: ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutPermissionGrantedByInput | ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutPermissionGrantedByInput[]
    createMany?: ProjectDepartmentHistoryCreateManyPermissionGrantedByInputEnvelope
    set?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    disconnect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    delete?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    update?: ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutPermissionGrantedByInput | ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutPermissionGrantedByInput[]
    updateMany?: ProjectDepartmentHistoryUpdateManyWithWhereWithoutPermissionGrantedByInput | ProjectDepartmentHistoryUpdateManyWithWhereWithoutPermissionGrantedByInput[]
    deleteMany?: ProjectDepartmentHistoryScalarWhereInput | ProjectDepartmentHistoryScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutOwnerNestedInput = {
    create?: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput> | ProjectCreateWithoutOwnerInput[] | ProjectUncheckedCreateWithoutOwnerInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutOwnerInput | ProjectCreateOrConnectWithoutOwnerInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutOwnerInput | ProjectUpsertWithWhereUniqueWithoutOwnerInput[]
    createMany?: ProjectCreateManyOwnerInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutOwnerInput | ProjectUpdateWithWhereUniqueWithoutOwnerInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutOwnerInput | ProjectUpdateManyWithWhereWithoutOwnerInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput = {
    create?: XOR<ProjectCreateWithoutProjectCoordinatorInput, ProjectUncheckedCreateWithoutProjectCoordinatorInput> | ProjectCreateWithoutProjectCoordinatorInput[] | ProjectUncheckedCreateWithoutProjectCoordinatorInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutProjectCoordinatorInput | ProjectCreateOrConnectWithoutProjectCoordinatorInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutProjectCoordinatorInput | ProjectUpsertWithWhereUniqueWithoutProjectCoordinatorInput[]
    createMany?: ProjectCreateManyProjectCoordinatorInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutProjectCoordinatorInput | ProjectUpdateWithWhereUniqueWithoutProjectCoordinatorInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutProjectCoordinatorInput | ProjectUpdateManyWithWhereWithoutProjectCoordinatorInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput = {
    create?: XOR<ProjectCreateWithoutPcTeamLeadInput, ProjectUncheckedCreateWithoutPcTeamLeadInput> | ProjectCreateWithoutPcTeamLeadInput[] | ProjectUncheckedCreateWithoutPcTeamLeadInput[]
    connectOrCreate?: ProjectCreateOrConnectWithoutPcTeamLeadInput | ProjectCreateOrConnectWithoutPcTeamLeadInput[]
    upsert?: ProjectUpsertWithWhereUniqueWithoutPcTeamLeadInput | ProjectUpsertWithWhereUniqueWithoutPcTeamLeadInput[]
    createMany?: ProjectCreateManyPcTeamLeadInputEnvelope
    set?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    disconnect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    delete?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    connect?: ProjectWhereUniqueInput | ProjectWhereUniqueInput[]
    update?: ProjectUpdateWithWhereUniqueWithoutPcTeamLeadInput | ProjectUpdateWithWhereUniqueWithoutPcTeamLeadInput[]
    updateMany?: ProjectUpdateManyWithWhereWithoutPcTeamLeadInput | ProjectUpdateManyWithWhereWithoutPcTeamLeadInput[]
    deleteMany?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
  }

  export type QABugUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<QABugCreateWithoutAssignedToInput, QABugUncheckedCreateWithoutAssignedToInput> | QABugCreateWithoutAssignedToInput[] | QABugUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: QABugCreateOrConnectWithoutAssignedToInput | QABugCreateOrConnectWithoutAssignedToInput[]
    upsert?: QABugUpsertWithWhereUniqueWithoutAssignedToInput | QABugUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: QABugCreateManyAssignedToInputEnvelope
    set?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    disconnect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    delete?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    connect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    update?: QABugUpdateWithWhereUniqueWithoutAssignedToInput | QABugUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: QABugUpdateManyWithWhereWithoutAssignedToInput | QABugUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: QABugScalarWhereInput | QABugScalarWhereInput[]
  }

  export type QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput = {
    create?: XOR<QATestingRoundCreateWithoutTestedByInput, QATestingRoundUncheckedCreateWithoutTestedByInput> | QATestingRoundCreateWithoutTestedByInput[] | QATestingRoundUncheckedCreateWithoutTestedByInput[]
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutTestedByInput | QATestingRoundCreateOrConnectWithoutTestedByInput[]
    upsert?: QATestingRoundUpsertWithWhereUniqueWithoutTestedByInput | QATestingRoundUpsertWithWhereUniqueWithoutTestedByInput[]
    createMany?: QATestingRoundCreateManyTestedByInputEnvelope
    set?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    disconnect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    delete?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    connect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    update?: QATestingRoundUpdateWithWhereUniqueWithoutTestedByInput | QATestingRoundUpdateWithWhereUniqueWithoutTestedByInput[]
    updateMany?: QATestingRoundUpdateManyWithWhereWithoutTestedByInput | QATestingRoundUpdateManyWithWhereWithoutTestedByInput[]
    deleteMany?: QATestingRoundScalarWhereInput | QATestingRoundScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeNestedInput = {
    create?: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput> | TaskCreateWithoutAssigneeInput[] | TaskUncheckedCreateWithoutAssigneeInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutAssigneeInput | TaskCreateOrConnectWithoutAssigneeInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutAssigneeInput | TaskUpsertWithWhereUniqueWithoutAssigneeInput[]
    createMany?: TaskCreateManyAssigneeInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutAssigneeInput | TaskUpdateWithWhereUniqueWithoutAssigneeInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutAssigneeInput | TaskUpdateManyWithWhereWithoutAssigneeInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput = {
    create?: XOR<WorkflowApprovalCreateWithoutRequestedByInput, WorkflowApprovalUncheckedCreateWithoutRequestedByInput> | WorkflowApprovalCreateWithoutRequestedByInput[] | WorkflowApprovalUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutRequestedByInput | WorkflowApprovalCreateOrConnectWithoutRequestedByInput[]
    upsert?: WorkflowApprovalUpsertWithWhereUniqueWithoutRequestedByInput | WorkflowApprovalUpsertWithWhereUniqueWithoutRequestedByInput[]
    createMany?: WorkflowApprovalCreateManyRequestedByInputEnvelope
    set?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    disconnect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    delete?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    update?: WorkflowApprovalUpdateWithWhereUniqueWithoutRequestedByInput | WorkflowApprovalUpdateWithWhereUniqueWithoutRequestedByInput[]
    updateMany?: WorkflowApprovalUpdateManyWithWhereWithoutRequestedByInput | WorkflowApprovalUpdateManyWithWhereWithoutRequestedByInput[]
    deleteMany?: WorkflowApprovalScalarWhereInput | WorkflowApprovalScalarWhereInput[]
  }

  export type WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput = {
    create?: XOR<WorkflowApprovalCreateWithoutReviewedByInput, WorkflowApprovalUncheckedCreateWithoutReviewedByInput> | WorkflowApprovalCreateWithoutReviewedByInput[] | WorkflowApprovalUncheckedCreateWithoutReviewedByInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutReviewedByInput | WorkflowApprovalCreateOrConnectWithoutReviewedByInput[]
    upsert?: WorkflowApprovalUpsertWithWhereUniqueWithoutReviewedByInput | WorkflowApprovalUpsertWithWhereUniqueWithoutReviewedByInput[]
    createMany?: WorkflowApprovalCreateManyReviewedByInputEnvelope
    set?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    disconnect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    delete?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    update?: WorkflowApprovalUpdateWithWhereUniqueWithoutReviewedByInput | WorkflowApprovalUpdateWithWhereUniqueWithoutReviewedByInput[]
    updateMany?: WorkflowApprovalUpdateManyWithWhereWithoutReviewedByInput | WorkflowApprovalUpdateManyWithWhereWithoutReviewedByInput[]
    deleteMany?: WorkflowApprovalScalarWhereInput | WorkflowApprovalScalarWhereInput[]
  }

  export type ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutPreviousUserInput, ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput> | ProjectAssignmentHistoryCreateWithoutPreviousUserInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutPreviousUserInput | ProjectAssignmentHistoryCreateOrConnectWithoutPreviousUserInput[]
    upsert?: ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutPreviousUserInput | ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutPreviousUserInput[]
    createMany?: ProjectAssignmentHistoryCreateManyPreviousUserInputEnvelope
    set?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    disconnect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    delete?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    update?: ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutPreviousUserInput | ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutPreviousUserInput[]
    updateMany?: ProjectAssignmentHistoryUpdateManyWithWhereWithoutPreviousUserInput | ProjectAssignmentHistoryUpdateManyWithWhereWithoutPreviousUserInput[]
    deleteMany?: ProjectAssignmentHistoryScalarWhereInput | ProjectAssignmentHistoryScalarWhereInput[]
  }

  export type ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutAssignedByInput, ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput> | ProjectAssignmentHistoryCreateWithoutAssignedByInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutAssignedByInput | ProjectAssignmentHistoryCreateOrConnectWithoutAssignedByInput[]
    upsert?: ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutAssignedByInput | ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutAssignedByInput[]
    createMany?: ProjectAssignmentHistoryCreateManyAssignedByInputEnvelope
    set?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    disconnect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    delete?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    update?: ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutAssignedByInput | ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutAssignedByInput[]
    updateMany?: ProjectAssignmentHistoryUpdateManyWithWhereWithoutAssignedByInput | ProjectAssignmentHistoryUpdateManyWithWhereWithoutAssignedByInput[]
    deleteMany?: ProjectAssignmentHistoryScalarWhereInput | ProjectAssignmentHistoryScalarWhereInput[]
  }

  export type CommentCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CustomFieldCreateNestedManyWithoutProjectInput = {
    create?: XOR<CustomFieldCreateWithoutProjectInput, CustomFieldUncheckedCreateWithoutProjectInput> | CustomFieldCreateWithoutProjectInput[] | CustomFieldUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CustomFieldCreateOrConnectWithoutProjectInput | CustomFieldCreateOrConnectWithoutProjectInput[]
    createMany?: CustomFieldCreateManyProjectInputEnvelope
    connect?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
  }

  export type ProjectDepartmentHistoryCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutProjectInput, ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput> | ProjectDepartmentHistoryCreateWithoutProjectInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutProjectInput | ProjectDepartmentHistoryCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectDepartmentHistoryCreateManyProjectInputEnvelope
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutOwnedProjectsInput = {
    create?: XOR<UserCreateWithoutOwnedProjectsInput, UserUncheckedCreateWithoutOwnedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCoordinatedProjectsInput = {
    create?: XOR<UserCreateWithoutCoordinatedProjectsInput, UserUncheckedCreateWithoutCoordinatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoordinatedProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPcTeamLeadProjectsInput = {
    create?: XOR<UserCreateWithoutPcTeamLeadProjectsInput, UserUncheckedCreateWithoutPcTeamLeadProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPcTeamLeadProjectsInput
    connect?: UserWhereUniqueInput
  }

  export type TaskCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ProjectAssignmentHistoryCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutProjectInput, ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput> | ProjectAssignmentHistoryCreateWithoutProjectInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutProjectInput | ProjectAssignmentHistoryCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectAssignmentHistoryCreateManyProjectInputEnvelope
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type CustomFieldUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<CustomFieldCreateWithoutProjectInput, CustomFieldUncheckedCreateWithoutProjectInput> | CustomFieldCreateWithoutProjectInput[] | CustomFieldUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CustomFieldCreateOrConnectWithoutProjectInput | CustomFieldCreateOrConnectWithoutProjectInput[]
    createMany?: CustomFieldCreateManyProjectInputEnvelope
    connect?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
  }

  export type ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutProjectInput, ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput> | ProjectDepartmentHistoryCreateWithoutProjectInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutProjectInput | ProjectDepartmentHistoryCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectDepartmentHistoryCreateManyProjectInputEnvelope
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
  }

  export type TaskUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
  }

  export type ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutProjectInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutProjectInput, ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput> | ProjectAssignmentHistoryCreateWithoutProjectInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutProjectInput | ProjectAssignmentHistoryCreateOrConnectWithoutProjectInput[]
    createMany?: ProjectAssignmentHistoryCreateManyProjectInputEnvelope
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
  }

  export type EnumProjectCategoryFieldUpdateOperationsInput = {
    set?: $Enums.ProjectCategory
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumProjectStatusFieldUpdateOperationsInput = {
    set?: $Enums.ProjectStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type EnumDepartmentFieldUpdateOperationsInput = {
    set?: $Enums.Department
  }

  export type CommentUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CustomFieldUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CustomFieldCreateWithoutProjectInput, CustomFieldUncheckedCreateWithoutProjectInput> | CustomFieldCreateWithoutProjectInput[] | CustomFieldUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CustomFieldCreateOrConnectWithoutProjectInput | CustomFieldCreateOrConnectWithoutProjectInput[]
    upsert?: CustomFieldUpsertWithWhereUniqueWithoutProjectInput | CustomFieldUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CustomFieldCreateManyProjectInputEnvelope
    set?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
    disconnect?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
    delete?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
    connect?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
    update?: CustomFieldUpdateWithWhereUniqueWithoutProjectInput | CustomFieldUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CustomFieldUpdateManyWithWhereWithoutProjectInput | CustomFieldUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CustomFieldScalarWhereInput | CustomFieldScalarWhereInput[]
  }

  export type ProjectDepartmentHistoryUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutProjectInput, ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput> | ProjectDepartmentHistoryCreateWithoutProjectInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutProjectInput | ProjectDepartmentHistoryCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutProjectInput | ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectDepartmentHistoryCreateManyProjectInputEnvelope
    set?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    disconnect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    delete?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    update?: ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutProjectInput | ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectDepartmentHistoryUpdateManyWithWhereWithoutProjectInput | ProjectDepartmentHistoryUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectDepartmentHistoryScalarWhereInput | ProjectDepartmentHistoryScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutOwnedProjectsNestedInput = {
    create?: XOR<UserCreateWithoutOwnedProjectsInput, UserUncheckedCreateWithoutOwnedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutOwnedProjectsInput
    upsert?: UserUpsertWithoutOwnedProjectsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOwnedProjectsInput, UserUpdateWithoutOwnedProjectsInput>, UserUncheckedUpdateWithoutOwnedProjectsInput>
  }

  export type UserUpdateOneWithoutCoordinatedProjectsNestedInput = {
    create?: XOR<UserCreateWithoutCoordinatedProjectsInput, UserUncheckedCreateWithoutCoordinatedProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoordinatedProjectsInput
    upsert?: UserUpsertWithoutCoordinatedProjectsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCoordinatedProjectsInput, UserUpdateWithoutCoordinatedProjectsInput>, UserUncheckedUpdateWithoutCoordinatedProjectsInput>
  }

  export type UserUpdateOneWithoutPcTeamLeadProjectsNestedInput = {
    create?: XOR<UserCreateWithoutPcTeamLeadProjectsInput, UserUncheckedCreateWithoutPcTeamLeadProjectsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPcTeamLeadProjectsInput
    upsert?: UserUpsertWithoutPcTeamLeadProjectsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPcTeamLeadProjectsInput, UserUpdateWithoutPcTeamLeadProjectsInput>, UserUncheckedUpdateWithoutPcTeamLeadProjectsInput>
  }

  export type TaskUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectAssignmentHistoryUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutProjectInput, ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput> | ProjectAssignmentHistoryCreateWithoutProjectInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutProjectInput | ProjectAssignmentHistoryCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutProjectInput | ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectAssignmentHistoryCreateManyProjectInputEnvelope
    set?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    disconnect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    delete?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    update?: ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutProjectInput | ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectAssignmentHistoryUpdateManyWithWhereWithoutProjectInput | ProjectAssignmentHistoryUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectAssignmentHistoryScalarWhereInput | ProjectAssignmentHistoryScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput> | CommentCreateWithoutProjectInput[] | CommentUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutProjectInput | CommentCreateOrConnectWithoutProjectInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutProjectInput | CommentUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CommentCreateManyProjectInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutProjectInput | CommentUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutProjectInput | CommentUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type CustomFieldUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<CustomFieldCreateWithoutProjectInput, CustomFieldUncheckedCreateWithoutProjectInput> | CustomFieldCreateWithoutProjectInput[] | CustomFieldUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: CustomFieldCreateOrConnectWithoutProjectInput | CustomFieldCreateOrConnectWithoutProjectInput[]
    upsert?: CustomFieldUpsertWithWhereUniqueWithoutProjectInput | CustomFieldUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: CustomFieldCreateManyProjectInputEnvelope
    set?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
    disconnect?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
    delete?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
    connect?: CustomFieldWhereUniqueInput | CustomFieldWhereUniqueInput[]
    update?: CustomFieldUpdateWithWhereUniqueWithoutProjectInput | CustomFieldUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: CustomFieldUpdateManyWithWhereWithoutProjectInput | CustomFieldUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: CustomFieldScalarWhereInput | CustomFieldScalarWhereInput[]
  }

  export type ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutProjectInput, ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput> | ProjectDepartmentHistoryCreateWithoutProjectInput[] | ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutProjectInput | ProjectDepartmentHistoryCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutProjectInput | ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectDepartmentHistoryCreateManyProjectInputEnvelope
    set?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    disconnect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    delete?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    connect?: ProjectDepartmentHistoryWhereUniqueInput | ProjectDepartmentHistoryWhereUniqueInput[]
    update?: ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutProjectInput | ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectDepartmentHistoryUpdateManyWithWhereWithoutProjectInput | ProjectDepartmentHistoryUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectDepartmentHistoryScalarWhereInput | ProjectDepartmentHistoryScalarWhereInput[]
  }

  export type TaskUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput> | TaskCreateWithoutProjectInput[] | TaskUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: TaskCreateOrConnectWithoutProjectInput | TaskCreateOrConnectWithoutProjectInput[]
    upsert?: TaskUpsertWithWhereUniqueWithoutProjectInput | TaskUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: TaskCreateManyProjectInputEnvelope
    set?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    disconnect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    delete?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    connect?: TaskWhereUniqueInput | TaskWhereUniqueInput[]
    update?: TaskUpdateWithWhereUniqueWithoutProjectInput | TaskUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: TaskUpdateManyWithWhereWithoutProjectInput | TaskUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: TaskScalarWhereInput | TaskScalarWhereInput[]
  }

  export type ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectNestedInput = {
    create?: XOR<ProjectAssignmentHistoryCreateWithoutProjectInput, ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput> | ProjectAssignmentHistoryCreateWithoutProjectInput[] | ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput[]
    connectOrCreate?: ProjectAssignmentHistoryCreateOrConnectWithoutProjectInput | ProjectAssignmentHistoryCreateOrConnectWithoutProjectInput[]
    upsert?: ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutProjectInput | ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutProjectInput[]
    createMany?: ProjectAssignmentHistoryCreateManyProjectInputEnvelope
    set?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    disconnect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    delete?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    connect?: ProjectAssignmentHistoryWhereUniqueInput | ProjectAssignmentHistoryWhereUniqueInput[]
    update?: ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutProjectInput | ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutProjectInput[]
    updateMany?: ProjectAssignmentHistoryUpdateManyWithWhereWithoutProjectInput | ProjectAssignmentHistoryUpdateManyWithWhereWithoutProjectInput[]
    deleteMany?: ProjectAssignmentHistoryScalarWhereInput | ProjectAssignmentHistoryScalarWhereInput[]
  }

  export type CommentCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutAssignedTasksInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutTasksInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    connect?: ProjectWhereUniqueInput
  }

  export type CommentUncheckedCreateNestedManyWithoutTaskInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type EnumTaskStatusFieldUpdateOperationsInput = {
    set?: $Enums.TaskStatus
  }

  export type EnumPriorityFieldUpdateOperationsInput = {
    set?: $Enums.Priority
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CommentUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTaskInput | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTaskInput | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTaskInput | CommentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserUpdateOneWithoutAssignedTasksNestedInput = {
    create?: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedTasksInput
    upsert?: UserUpsertWithoutAssignedTasksInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedTasksInput, UserUpdateWithoutAssignedTasksInput>, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type ProjectUpdateOneRequiredWithoutTasksNestedInput = {
    create?: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutTasksInput
    upsert?: ProjectUpsertWithoutTasksInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutTasksInput, ProjectUpdateWithoutTasksInput>, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type CommentUncheckedUpdateManyWithoutTaskNestedInput = {
    create?: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput> | CommentCreateWithoutTaskInput[] | CommentUncheckedCreateWithoutTaskInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutTaskInput | CommentCreateOrConnectWithoutTaskInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutTaskInput | CommentUpsertWithWhereUniqueWithoutTaskInput[]
    createMany?: CommentCreateManyTaskInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutTaskInput | CommentUpdateWithWhereUniqueWithoutTaskInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutTaskInput | CommentUpdateManyWithWhereWithoutTaskInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutCommentsInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    connect?: ProjectWhereUniqueInput
  }

  export type TaskCreateNestedOneWithoutCommentsInput = {
    create?: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCommentsInput
    connect?: TaskWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCommentsInput
    upsert?: ProjectUpsertWithoutCommentsInput
    disconnect?: ProjectWhereInput | boolean
    delete?: ProjectWhereInput | boolean
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutCommentsInput, ProjectUpdateWithoutCommentsInput>, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type TaskUpdateOneWithoutCommentsNestedInput = {
    create?: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: TaskCreateOrConnectWithoutCommentsInput
    upsert?: TaskUpsertWithoutCommentsInput
    disconnect?: TaskWhereInput | boolean
    delete?: TaskWhereInput | boolean
    connect?: TaskWhereUniqueInput
    update?: XOR<XOR<TaskUpdateToOneWithWhereWithoutCommentsInput, TaskUpdateWithoutCommentsInput>, TaskUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectCreateNestedOneWithoutCustomFieldsInput = {
    create?: XOR<ProjectCreateWithoutCustomFieldsInput, ProjectUncheckedCreateWithoutCustomFieldsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCustomFieldsInput
    connect?: ProjectWhereUniqueInput
  }

  export type ProjectUpdateOneRequiredWithoutCustomFieldsNestedInput = {
    create?: XOR<ProjectCreateWithoutCustomFieldsInput, ProjectUncheckedCreateWithoutCustomFieldsInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutCustomFieldsInput
    upsert?: ProjectUpsertWithoutCustomFieldsInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutCustomFieldsInput, ProjectUpdateWithoutCustomFieldsInput>, ProjectUncheckedUpdateWithoutCustomFieldsInput>
  }

  export type DepartmentCorrectionCreateNestedManyWithoutDepartmentHistoryInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutDepartmentHistoryInput, DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput> | DepartmentCorrectionCreateWithoutDepartmentHistoryInput[] | DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutDepartmentHistoryInput | DepartmentCorrectionCreateOrConnectWithoutDepartmentHistoryInput[]
    createMany?: DepartmentCorrectionCreateManyDepartmentHistoryInputEnvelope
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutDepartmentTransitionsInput = {
    create?: XOR<UserCreateWithoutDepartmentTransitionsInput, UserUncheckedCreateWithoutDepartmentTransitionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentTransitionsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutDepartmentPermissionsInput = {
    create?: XOR<UserCreateWithoutDepartmentPermissionsInput, UserUncheckedCreateWithoutDepartmentPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectCreateNestedOneWithoutDepartmentHistoryInput = {
    create?: XOR<ProjectCreateWithoutDepartmentHistoryInput, ProjectUncheckedCreateWithoutDepartmentHistoryInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDepartmentHistoryInput
    connect?: ProjectWhereUniqueInput
  }

  export type QATestingRoundCreateNestedManyWithoutDepartmentHistoryInput = {
    create?: XOR<QATestingRoundCreateWithoutDepartmentHistoryInput, QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput> | QATestingRoundCreateWithoutDepartmentHistoryInput[] | QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutDepartmentHistoryInput | QATestingRoundCreateOrConnectWithoutDepartmentHistoryInput[]
    createMany?: QATestingRoundCreateManyDepartmentHistoryInputEnvelope
    connect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
  }

  export type WorkflowApprovalCreateNestedManyWithoutDepartmentHistoryInput = {
    create?: XOR<WorkflowApprovalCreateWithoutDepartmentHistoryInput, WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput> | WorkflowApprovalCreateWithoutDepartmentHistoryInput[] | WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutDepartmentHistoryInput | WorkflowApprovalCreateOrConnectWithoutDepartmentHistoryInput[]
    createMany?: WorkflowApprovalCreateManyDepartmentHistoryInputEnvelope
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
  }

  export type DepartmentCorrectionUncheckedCreateNestedManyWithoutDepartmentHistoryInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutDepartmentHistoryInput, DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput> | DepartmentCorrectionCreateWithoutDepartmentHistoryInput[] | DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutDepartmentHistoryInput | DepartmentCorrectionCreateOrConnectWithoutDepartmentHistoryInput[]
    createMany?: DepartmentCorrectionCreateManyDepartmentHistoryInputEnvelope
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
  }

  export type QATestingRoundUncheckedCreateNestedManyWithoutDepartmentHistoryInput = {
    create?: XOR<QATestingRoundCreateWithoutDepartmentHistoryInput, QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput> | QATestingRoundCreateWithoutDepartmentHistoryInput[] | QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutDepartmentHistoryInput | QATestingRoundCreateOrConnectWithoutDepartmentHistoryInput[]
    createMany?: QATestingRoundCreateManyDepartmentHistoryInputEnvelope
    connect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
  }

  export type WorkflowApprovalUncheckedCreateNestedManyWithoutDepartmentHistoryInput = {
    create?: XOR<WorkflowApprovalCreateWithoutDepartmentHistoryInput, WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput> | WorkflowApprovalCreateWithoutDepartmentHistoryInput[] | WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutDepartmentHistoryInput | WorkflowApprovalCreateOrConnectWithoutDepartmentHistoryInput[]
    createMany?: WorkflowApprovalCreateManyDepartmentHistoryInputEnvelope
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
  }

  export type EnumDepartmentWorkStatusFieldUpdateOperationsInput = {
    set?: $Enums.DepartmentWorkStatus
  }

  export type DepartmentCorrectionUpdateManyWithoutDepartmentHistoryNestedInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutDepartmentHistoryInput, DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput> | DepartmentCorrectionCreateWithoutDepartmentHistoryInput[] | DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutDepartmentHistoryInput | DepartmentCorrectionCreateOrConnectWithoutDepartmentHistoryInput[]
    upsert?: DepartmentCorrectionUpsertWithWhereUniqueWithoutDepartmentHistoryInput | DepartmentCorrectionUpsertWithWhereUniqueWithoutDepartmentHistoryInput[]
    createMany?: DepartmentCorrectionCreateManyDepartmentHistoryInputEnvelope
    set?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    disconnect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    delete?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    update?: DepartmentCorrectionUpdateWithWhereUniqueWithoutDepartmentHistoryInput | DepartmentCorrectionUpdateWithWhereUniqueWithoutDepartmentHistoryInput[]
    updateMany?: DepartmentCorrectionUpdateManyWithWhereWithoutDepartmentHistoryInput | DepartmentCorrectionUpdateManyWithWhereWithoutDepartmentHistoryInput[]
    deleteMany?: DepartmentCorrectionScalarWhereInput | DepartmentCorrectionScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutDepartmentTransitionsNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentTransitionsInput, UserUncheckedCreateWithoutDepartmentTransitionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentTransitionsInput
    upsert?: UserUpsertWithoutDepartmentTransitionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDepartmentTransitionsInput, UserUpdateWithoutDepartmentTransitionsInput>, UserUncheckedUpdateWithoutDepartmentTransitionsInput>
  }

  export type UserUpdateOneWithoutDepartmentPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentPermissionsInput, UserUncheckedCreateWithoutDepartmentPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentPermissionsInput
    upsert?: UserUpsertWithoutDepartmentPermissionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDepartmentPermissionsInput, UserUpdateWithoutDepartmentPermissionsInput>, UserUncheckedUpdateWithoutDepartmentPermissionsInput>
  }

  export type ProjectUpdateOneRequiredWithoutDepartmentHistoryNestedInput = {
    create?: XOR<ProjectCreateWithoutDepartmentHistoryInput, ProjectUncheckedCreateWithoutDepartmentHistoryInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutDepartmentHistoryInput
    upsert?: ProjectUpsertWithoutDepartmentHistoryInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutDepartmentHistoryInput, ProjectUpdateWithoutDepartmentHistoryInput>, ProjectUncheckedUpdateWithoutDepartmentHistoryInput>
  }

  export type QATestingRoundUpdateManyWithoutDepartmentHistoryNestedInput = {
    create?: XOR<QATestingRoundCreateWithoutDepartmentHistoryInput, QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput> | QATestingRoundCreateWithoutDepartmentHistoryInput[] | QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutDepartmentHistoryInput | QATestingRoundCreateOrConnectWithoutDepartmentHistoryInput[]
    upsert?: QATestingRoundUpsertWithWhereUniqueWithoutDepartmentHistoryInput | QATestingRoundUpsertWithWhereUniqueWithoutDepartmentHistoryInput[]
    createMany?: QATestingRoundCreateManyDepartmentHistoryInputEnvelope
    set?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    disconnect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    delete?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    connect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    update?: QATestingRoundUpdateWithWhereUniqueWithoutDepartmentHistoryInput | QATestingRoundUpdateWithWhereUniqueWithoutDepartmentHistoryInput[]
    updateMany?: QATestingRoundUpdateManyWithWhereWithoutDepartmentHistoryInput | QATestingRoundUpdateManyWithWhereWithoutDepartmentHistoryInput[]
    deleteMany?: QATestingRoundScalarWhereInput | QATestingRoundScalarWhereInput[]
  }

  export type WorkflowApprovalUpdateManyWithoutDepartmentHistoryNestedInput = {
    create?: XOR<WorkflowApprovalCreateWithoutDepartmentHistoryInput, WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput> | WorkflowApprovalCreateWithoutDepartmentHistoryInput[] | WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutDepartmentHistoryInput | WorkflowApprovalCreateOrConnectWithoutDepartmentHistoryInput[]
    upsert?: WorkflowApprovalUpsertWithWhereUniqueWithoutDepartmentHistoryInput | WorkflowApprovalUpsertWithWhereUniqueWithoutDepartmentHistoryInput[]
    createMany?: WorkflowApprovalCreateManyDepartmentHistoryInputEnvelope
    set?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    disconnect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    delete?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    update?: WorkflowApprovalUpdateWithWhereUniqueWithoutDepartmentHistoryInput | WorkflowApprovalUpdateWithWhereUniqueWithoutDepartmentHistoryInput[]
    updateMany?: WorkflowApprovalUpdateManyWithWhereWithoutDepartmentHistoryInput | WorkflowApprovalUpdateManyWithWhereWithoutDepartmentHistoryInput[]
    deleteMany?: WorkflowApprovalScalarWhereInput | WorkflowApprovalScalarWhereInput[]
  }

  export type DepartmentCorrectionUncheckedUpdateManyWithoutDepartmentHistoryNestedInput = {
    create?: XOR<DepartmentCorrectionCreateWithoutDepartmentHistoryInput, DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput> | DepartmentCorrectionCreateWithoutDepartmentHistoryInput[] | DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: DepartmentCorrectionCreateOrConnectWithoutDepartmentHistoryInput | DepartmentCorrectionCreateOrConnectWithoutDepartmentHistoryInput[]
    upsert?: DepartmentCorrectionUpsertWithWhereUniqueWithoutDepartmentHistoryInput | DepartmentCorrectionUpsertWithWhereUniqueWithoutDepartmentHistoryInput[]
    createMany?: DepartmentCorrectionCreateManyDepartmentHistoryInputEnvelope
    set?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    disconnect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    delete?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    connect?: DepartmentCorrectionWhereUniqueInput | DepartmentCorrectionWhereUniqueInput[]
    update?: DepartmentCorrectionUpdateWithWhereUniqueWithoutDepartmentHistoryInput | DepartmentCorrectionUpdateWithWhereUniqueWithoutDepartmentHistoryInput[]
    updateMany?: DepartmentCorrectionUpdateManyWithWhereWithoutDepartmentHistoryInput | DepartmentCorrectionUpdateManyWithWhereWithoutDepartmentHistoryInput[]
    deleteMany?: DepartmentCorrectionScalarWhereInput | DepartmentCorrectionScalarWhereInput[]
  }

  export type QATestingRoundUncheckedUpdateManyWithoutDepartmentHistoryNestedInput = {
    create?: XOR<QATestingRoundCreateWithoutDepartmentHistoryInput, QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput> | QATestingRoundCreateWithoutDepartmentHistoryInput[] | QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutDepartmentHistoryInput | QATestingRoundCreateOrConnectWithoutDepartmentHistoryInput[]
    upsert?: QATestingRoundUpsertWithWhereUniqueWithoutDepartmentHistoryInput | QATestingRoundUpsertWithWhereUniqueWithoutDepartmentHistoryInput[]
    createMany?: QATestingRoundCreateManyDepartmentHistoryInputEnvelope
    set?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    disconnect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    delete?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    connect?: QATestingRoundWhereUniqueInput | QATestingRoundWhereUniqueInput[]
    update?: QATestingRoundUpdateWithWhereUniqueWithoutDepartmentHistoryInput | QATestingRoundUpdateWithWhereUniqueWithoutDepartmentHistoryInput[]
    updateMany?: QATestingRoundUpdateManyWithWhereWithoutDepartmentHistoryInput | QATestingRoundUpdateManyWithWhereWithoutDepartmentHistoryInput[]
    deleteMany?: QATestingRoundScalarWhereInput | QATestingRoundScalarWhereInput[]
  }

  export type WorkflowApprovalUncheckedUpdateManyWithoutDepartmentHistoryNestedInput = {
    create?: XOR<WorkflowApprovalCreateWithoutDepartmentHistoryInput, WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput> | WorkflowApprovalCreateWithoutDepartmentHistoryInput[] | WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput[]
    connectOrCreate?: WorkflowApprovalCreateOrConnectWithoutDepartmentHistoryInput | WorkflowApprovalCreateOrConnectWithoutDepartmentHistoryInput[]
    upsert?: WorkflowApprovalUpsertWithWhereUniqueWithoutDepartmentHistoryInput | WorkflowApprovalUpsertWithWhereUniqueWithoutDepartmentHistoryInput[]
    createMany?: WorkflowApprovalCreateManyDepartmentHistoryInputEnvelope
    set?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    disconnect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    delete?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    connect?: WorkflowApprovalWhereUniqueInput | WorkflowApprovalWhereUniqueInput[]
    update?: WorkflowApprovalUpdateWithWhereUniqueWithoutDepartmentHistoryInput | WorkflowApprovalUpdateWithWhereUniqueWithoutDepartmentHistoryInput[]
    updateMany?: WorkflowApprovalUpdateManyWithWhereWithoutDepartmentHistoryInput | WorkflowApprovalUpdateManyWithWhereWithoutDepartmentHistoryInput[]
    deleteMany?: WorkflowApprovalScalarWhereInput | WorkflowApprovalScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAssignedCorrectionsInput = {
    create?: XOR<UserCreateWithoutAssignedCorrectionsInput, UserUncheckedCreateWithoutAssignedCorrectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedCorrectionsInput
    connect?: UserWhereUniqueInput
  }

  export type ProjectDepartmentHistoryCreateNestedOneWithoutCorrectionsInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutCorrectionsInput, ProjectDepartmentHistoryUncheckedCreateWithoutCorrectionsInput>
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutCorrectionsInput
    connect?: ProjectDepartmentHistoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutRequestedCorrectionsInput = {
    create?: XOR<UserCreateWithoutRequestedCorrectionsInput, UserUncheckedCreateWithoutRequestedCorrectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestedCorrectionsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumCorrectionStatusFieldUpdateOperationsInput = {
    set?: $Enums.CorrectionStatus
  }

  export type UserUpdateOneWithoutAssignedCorrectionsNestedInput = {
    create?: XOR<UserCreateWithoutAssignedCorrectionsInput, UserUncheckedCreateWithoutAssignedCorrectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignedCorrectionsInput
    upsert?: UserUpsertWithoutAssignedCorrectionsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignedCorrectionsInput, UserUpdateWithoutAssignedCorrectionsInput>, UserUncheckedUpdateWithoutAssignedCorrectionsInput>
  }

  export type ProjectDepartmentHistoryUpdateOneRequiredWithoutCorrectionsNestedInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutCorrectionsInput, ProjectDepartmentHistoryUncheckedCreateWithoutCorrectionsInput>
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutCorrectionsInput
    upsert?: ProjectDepartmentHistoryUpsertWithoutCorrectionsInput
    connect?: ProjectDepartmentHistoryWhereUniqueInput
    update?: XOR<XOR<ProjectDepartmentHistoryUpdateToOneWithWhereWithoutCorrectionsInput, ProjectDepartmentHistoryUpdateWithoutCorrectionsInput>, ProjectDepartmentHistoryUncheckedUpdateWithoutCorrectionsInput>
  }

  export type UserUpdateOneRequiredWithoutRequestedCorrectionsNestedInput = {
    create?: XOR<UserCreateWithoutRequestedCorrectionsInput, UserUncheckedCreateWithoutRequestedCorrectionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutRequestedCorrectionsInput
    upsert?: UserUpsertWithoutRequestedCorrectionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutRequestedCorrectionsInput, UserUpdateWithoutRequestedCorrectionsInput>, UserUncheckedUpdateWithoutRequestedCorrectionsInput>
  }

  export type WorkflowApprovalCreateattachmentsInput = {
    set: string[]
  }

  export type ProjectDepartmentHistoryCreateNestedOneWithoutApprovalsInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutApprovalsInput, ProjectDepartmentHistoryUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutApprovalsInput
    connect?: ProjectDepartmentHistoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovalRequestsInput = {
    create?: XOR<UserCreateWithoutApprovalRequestsInput, UserUncheckedCreateWithoutApprovalRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalRequestsInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutApprovalReviewsInput = {
    create?: XOR<UserCreateWithoutApprovalReviewsInput, UserUncheckedCreateWithoutApprovalReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalReviewsInput
    connect?: UserWhereUniqueInput
  }

  export type EnumApprovalTypeFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalType
  }

  export type EnumApprovalStatusFieldUpdateOperationsInput = {
    set?: $Enums.ApprovalStatus
  }

  export type WorkflowApprovalUpdateattachmentsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type ProjectDepartmentHistoryUpdateOneRequiredWithoutApprovalsNestedInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutApprovalsInput, ProjectDepartmentHistoryUncheckedCreateWithoutApprovalsInput>
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutApprovalsInput
    upsert?: ProjectDepartmentHistoryUpsertWithoutApprovalsInput
    connect?: ProjectDepartmentHistoryWhereUniqueInput
    update?: XOR<XOR<ProjectDepartmentHistoryUpdateToOneWithWhereWithoutApprovalsInput, ProjectDepartmentHistoryUpdateWithoutApprovalsInput>, ProjectDepartmentHistoryUncheckedUpdateWithoutApprovalsInput>
  }

  export type UserUpdateOneRequiredWithoutApprovalRequestsNestedInput = {
    create?: XOR<UserCreateWithoutApprovalRequestsInput, UserUncheckedCreateWithoutApprovalRequestsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalRequestsInput
    upsert?: UserUpsertWithoutApprovalRequestsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovalRequestsInput, UserUpdateWithoutApprovalRequestsInput>, UserUncheckedUpdateWithoutApprovalRequestsInput>
  }

  export type UserUpdateOneWithoutApprovalReviewsNestedInput = {
    create?: XOR<UserCreateWithoutApprovalReviewsInput, UserUncheckedCreateWithoutApprovalReviewsInput>
    connectOrCreate?: UserCreateOrConnectWithoutApprovalReviewsInput
    upsert?: UserUpsertWithoutApprovalReviewsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutApprovalReviewsInput, UserUpdateWithoutApprovalReviewsInput>, UserUncheckedUpdateWithoutApprovalReviewsInput>
  }

  export type QABugCreateNestedManyWithoutQaRoundInput = {
    create?: XOR<QABugCreateWithoutQaRoundInput, QABugUncheckedCreateWithoutQaRoundInput> | QABugCreateWithoutQaRoundInput[] | QABugUncheckedCreateWithoutQaRoundInput[]
    connectOrCreate?: QABugCreateOrConnectWithoutQaRoundInput | QABugCreateOrConnectWithoutQaRoundInput[]
    createMany?: QABugCreateManyQaRoundInputEnvelope
    connect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
  }

  export type ProjectDepartmentHistoryCreateNestedOneWithoutQaRoundsInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutQaRoundsInput, ProjectDepartmentHistoryUncheckedCreateWithoutQaRoundsInput>
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutQaRoundsInput
    connect?: ProjectDepartmentHistoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQaTestingRoundsInput = {
    create?: XOR<UserCreateWithoutQaTestingRoundsInput, UserUncheckedCreateWithoutQaTestingRoundsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQaTestingRoundsInput
    connect?: UserWhereUniqueInput
  }

  export type QABugUncheckedCreateNestedManyWithoutQaRoundInput = {
    create?: XOR<QABugCreateWithoutQaRoundInput, QABugUncheckedCreateWithoutQaRoundInput> | QABugCreateWithoutQaRoundInput[] | QABugUncheckedCreateWithoutQaRoundInput[]
    connectOrCreate?: QABugCreateOrConnectWithoutQaRoundInput | QABugCreateOrConnectWithoutQaRoundInput[]
    createMany?: QABugCreateManyQaRoundInputEnvelope
    connect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
  }

  export type EnumQATypeFieldUpdateOperationsInput = {
    set?: $Enums.QAType
  }

  export type EnumQAStatusFieldUpdateOperationsInput = {
    set?: $Enums.QAStatus
  }

  export type QABugUpdateManyWithoutQaRoundNestedInput = {
    create?: XOR<QABugCreateWithoutQaRoundInput, QABugUncheckedCreateWithoutQaRoundInput> | QABugCreateWithoutQaRoundInput[] | QABugUncheckedCreateWithoutQaRoundInput[]
    connectOrCreate?: QABugCreateOrConnectWithoutQaRoundInput | QABugCreateOrConnectWithoutQaRoundInput[]
    upsert?: QABugUpsertWithWhereUniqueWithoutQaRoundInput | QABugUpsertWithWhereUniqueWithoutQaRoundInput[]
    createMany?: QABugCreateManyQaRoundInputEnvelope
    set?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    disconnect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    delete?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    connect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    update?: QABugUpdateWithWhereUniqueWithoutQaRoundInput | QABugUpdateWithWhereUniqueWithoutQaRoundInput[]
    updateMany?: QABugUpdateManyWithWhereWithoutQaRoundInput | QABugUpdateManyWithWhereWithoutQaRoundInput[]
    deleteMany?: QABugScalarWhereInput | QABugScalarWhereInput[]
  }

  export type ProjectDepartmentHistoryUpdateOneRequiredWithoutQaRoundsNestedInput = {
    create?: XOR<ProjectDepartmentHistoryCreateWithoutQaRoundsInput, ProjectDepartmentHistoryUncheckedCreateWithoutQaRoundsInput>
    connectOrCreate?: ProjectDepartmentHistoryCreateOrConnectWithoutQaRoundsInput
    upsert?: ProjectDepartmentHistoryUpsertWithoutQaRoundsInput
    connect?: ProjectDepartmentHistoryWhereUniqueInput
    update?: XOR<XOR<ProjectDepartmentHistoryUpdateToOneWithWhereWithoutQaRoundsInput, ProjectDepartmentHistoryUpdateWithoutQaRoundsInput>, ProjectDepartmentHistoryUncheckedUpdateWithoutQaRoundsInput>
  }

  export type UserUpdateOneRequiredWithoutQaTestingRoundsNestedInput = {
    create?: XOR<UserCreateWithoutQaTestingRoundsInput, UserUncheckedCreateWithoutQaTestingRoundsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQaTestingRoundsInput
    upsert?: UserUpsertWithoutQaTestingRoundsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQaTestingRoundsInput, UserUpdateWithoutQaTestingRoundsInput>, UserUncheckedUpdateWithoutQaTestingRoundsInput>
  }

  export type QABugUncheckedUpdateManyWithoutQaRoundNestedInput = {
    create?: XOR<QABugCreateWithoutQaRoundInput, QABugUncheckedCreateWithoutQaRoundInput> | QABugCreateWithoutQaRoundInput[] | QABugUncheckedCreateWithoutQaRoundInput[]
    connectOrCreate?: QABugCreateOrConnectWithoutQaRoundInput | QABugCreateOrConnectWithoutQaRoundInput[]
    upsert?: QABugUpsertWithWhereUniqueWithoutQaRoundInput | QABugUpsertWithWhereUniqueWithoutQaRoundInput[]
    createMany?: QABugCreateManyQaRoundInputEnvelope
    set?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    disconnect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    delete?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    connect?: QABugWhereUniqueInput | QABugWhereUniqueInput[]
    update?: QABugUpdateWithWhereUniqueWithoutQaRoundInput | QABugUpdateWithWhereUniqueWithoutQaRoundInput[]
    updateMany?: QABugUpdateManyWithWhereWithoutQaRoundInput | QABugUpdateManyWithWhereWithoutQaRoundInput[]
    deleteMany?: QABugScalarWhereInput | QABugScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBugAssignmentsInput = {
    create?: XOR<UserCreateWithoutBugAssignmentsInput, UserUncheckedCreateWithoutBugAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBugAssignmentsInput
    connect?: UserWhereUniqueInput
  }

  export type QATestingRoundCreateNestedOneWithoutBugsInput = {
    create?: XOR<QATestingRoundCreateWithoutBugsInput, QATestingRoundUncheckedCreateWithoutBugsInput>
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutBugsInput
    connect?: QATestingRoundWhereUniqueInput
  }

  export type EnumBugSeverityFieldUpdateOperationsInput = {
    set?: $Enums.BugSeverity
  }

  export type EnumBugStatusFieldUpdateOperationsInput = {
    set?: $Enums.BugStatus
  }

  export type UserUpdateOneWithoutBugAssignmentsNestedInput = {
    create?: XOR<UserCreateWithoutBugAssignmentsInput, UserUncheckedCreateWithoutBugAssignmentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBugAssignmentsInput
    upsert?: UserUpsertWithoutBugAssignmentsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBugAssignmentsInput, UserUpdateWithoutBugAssignmentsInput>, UserUncheckedUpdateWithoutBugAssignmentsInput>
  }

  export type QATestingRoundUpdateOneRequiredWithoutBugsNestedInput = {
    create?: XOR<QATestingRoundCreateWithoutBugsInput, QATestingRoundUncheckedCreateWithoutBugsInput>
    connectOrCreate?: QATestingRoundCreateOrConnectWithoutBugsInput
    upsert?: QATestingRoundUpsertWithoutBugsInput
    connect?: QATestingRoundWhereUniqueInput
    update?: XOR<XOR<QATestingRoundUpdateToOneWithWhereWithoutBugsInput, QATestingRoundUpdateWithoutBugsInput>, QATestingRoundUncheckedUpdateWithoutBugsInput>
  }

  export type DepartmentMasterCreateNestedOneWithoutChildrenInput = {
    create?: XOR<DepartmentMasterCreateWithoutChildrenInput, DepartmentMasterUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutChildrenInput
    connect?: DepartmentMasterWhereUniqueInput
  }

  export type DepartmentMasterCreateNestedManyWithoutParentInput = {
    create?: XOR<DepartmentMasterCreateWithoutParentInput, DepartmentMasterUncheckedCreateWithoutParentInput> | DepartmentMasterCreateWithoutParentInput[] | DepartmentMasterUncheckedCreateWithoutParentInput[]
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutParentInput | DepartmentMasterCreateOrConnectWithoutParentInput[]
    createMany?: DepartmentMasterCreateManyParentInputEnvelope
    connect?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
  }

  export type RoleMasterCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<RoleMasterCreateWithoutDepartmentInput, RoleMasterUncheckedCreateWithoutDepartmentInput> | RoleMasterCreateWithoutDepartmentInput[] | RoleMasterUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: RoleMasterCreateOrConnectWithoutDepartmentInput | RoleMasterCreateOrConnectWithoutDepartmentInput[]
    createMany?: RoleMasterCreateManyDepartmentInputEnvelope
    connect?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutDepartmentMasterInput = {
    create?: XOR<UserCreateWithoutDepartmentMasterInput, UserUncheckedCreateWithoutDepartmentMasterInput> | UserCreateWithoutDepartmentMasterInput[] | UserUncheckedCreateWithoutDepartmentMasterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentMasterInput | UserCreateOrConnectWithoutDepartmentMasterInput[]
    createMany?: UserCreateManyDepartmentMasterInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentMasterUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<DepartmentMasterCreateWithoutParentInput, DepartmentMasterUncheckedCreateWithoutParentInput> | DepartmentMasterCreateWithoutParentInput[] | DepartmentMasterUncheckedCreateWithoutParentInput[]
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutParentInput | DepartmentMasterCreateOrConnectWithoutParentInput[]
    createMany?: DepartmentMasterCreateManyParentInputEnvelope
    connect?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
  }

  export type RoleMasterUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<RoleMasterCreateWithoutDepartmentInput, RoleMasterUncheckedCreateWithoutDepartmentInput> | RoleMasterCreateWithoutDepartmentInput[] | RoleMasterUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: RoleMasterCreateOrConnectWithoutDepartmentInput | RoleMasterCreateOrConnectWithoutDepartmentInput[]
    createMany?: RoleMasterCreateManyDepartmentInputEnvelope
    connect?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentMasterInput = {
    create?: XOR<UserCreateWithoutDepartmentMasterInput, UserUncheckedCreateWithoutDepartmentMasterInput> | UserCreateWithoutDepartmentMasterInput[] | UserUncheckedCreateWithoutDepartmentMasterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentMasterInput | UserCreateOrConnectWithoutDepartmentMasterInput[]
    createMany?: UserCreateManyDepartmentMasterInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentMasterUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<DepartmentMasterCreateWithoutChildrenInput, DepartmentMasterUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutChildrenInput
    upsert?: DepartmentMasterUpsertWithoutChildrenInput
    disconnect?: DepartmentMasterWhereInput | boolean
    delete?: DepartmentMasterWhereInput | boolean
    connect?: DepartmentMasterWhereUniqueInput
    update?: XOR<XOR<DepartmentMasterUpdateToOneWithWhereWithoutChildrenInput, DepartmentMasterUpdateWithoutChildrenInput>, DepartmentMasterUncheckedUpdateWithoutChildrenInput>
  }

  export type DepartmentMasterUpdateManyWithoutParentNestedInput = {
    create?: XOR<DepartmentMasterCreateWithoutParentInput, DepartmentMasterUncheckedCreateWithoutParentInput> | DepartmentMasterCreateWithoutParentInput[] | DepartmentMasterUncheckedCreateWithoutParentInput[]
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutParentInput | DepartmentMasterCreateOrConnectWithoutParentInput[]
    upsert?: DepartmentMasterUpsertWithWhereUniqueWithoutParentInput | DepartmentMasterUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: DepartmentMasterCreateManyParentInputEnvelope
    set?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
    disconnect?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
    delete?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
    connect?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
    update?: DepartmentMasterUpdateWithWhereUniqueWithoutParentInput | DepartmentMasterUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: DepartmentMasterUpdateManyWithWhereWithoutParentInput | DepartmentMasterUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: DepartmentMasterScalarWhereInput | DepartmentMasterScalarWhereInput[]
  }

  export type RoleMasterUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<RoleMasterCreateWithoutDepartmentInput, RoleMasterUncheckedCreateWithoutDepartmentInput> | RoleMasterCreateWithoutDepartmentInput[] | RoleMasterUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: RoleMasterCreateOrConnectWithoutDepartmentInput | RoleMasterCreateOrConnectWithoutDepartmentInput[]
    upsert?: RoleMasterUpsertWithWhereUniqueWithoutDepartmentInput | RoleMasterUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: RoleMasterCreateManyDepartmentInputEnvelope
    set?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
    disconnect?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
    delete?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
    connect?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
    update?: RoleMasterUpdateWithWhereUniqueWithoutDepartmentInput | RoleMasterUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: RoleMasterUpdateManyWithWhereWithoutDepartmentInput | RoleMasterUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: RoleMasterScalarWhereInput | RoleMasterScalarWhereInput[]
  }

  export type UserUpdateManyWithoutDepartmentMasterNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentMasterInput, UserUncheckedCreateWithoutDepartmentMasterInput> | UserCreateWithoutDepartmentMasterInput[] | UserUncheckedCreateWithoutDepartmentMasterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentMasterInput | UserCreateOrConnectWithoutDepartmentMasterInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentMasterInput | UserUpsertWithWhereUniqueWithoutDepartmentMasterInput[]
    createMany?: UserCreateManyDepartmentMasterInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentMasterInput | UserUpdateWithWhereUniqueWithoutDepartmentMasterInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentMasterInput | UserUpdateManyWithWhereWithoutDepartmentMasterInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentMasterUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<DepartmentMasterCreateWithoutParentInput, DepartmentMasterUncheckedCreateWithoutParentInput> | DepartmentMasterCreateWithoutParentInput[] | DepartmentMasterUncheckedCreateWithoutParentInput[]
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutParentInput | DepartmentMasterCreateOrConnectWithoutParentInput[]
    upsert?: DepartmentMasterUpsertWithWhereUniqueWithoutParentInput | DepartmentMasterUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: DepartmentMasterCreateManyParentInputEnvelope
    set?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
    disconnect?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
    delete?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
    connect?: DepartmentMasterWhereUniqueInput | DepartmentMasterWhereUniqueInput[]
    update?: DepartmentMasterUpdateWithWhereUniqueWithoutParentInput | DepartmentMasterUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: DepartmentMasterUpdateManyWithWhereWithoutParentInput | DepartmentMasterUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: DepartmentMasterScalarWhereInput | DepartmentMasterScalarWhereInput[]
  }

  export type RoleMasterUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<RoleMasterCreateWithoutDepartmentInput, RoleMasterUncheckedCreateWithoutDepartmentInput> | RoleMasterCreateWithoutDepartmentInput[] | RoleMasterUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: RoleMasterCreateOrConnectWithoutDepartmentInput | RoleMasterCreateOrConnectWithoutDepartmentInput[]
    upsert?: RoleMasterUpsertWithWhereUniqueWithoutDepartmentInput | RoleMasterUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: RoleMasterCreateManyDepartmentInputEnvelope
    set?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
    disconnect?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
    delete?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
    connect?: RoleMasterWhereUniqueInput | RoleMasterWhereUniqueInput[]
    update?: RoleMasterUpdateWithWhereUniqueWithoutDepartmentInput | RoleMasterUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: RoleMasterUpdateManyWithWhereWithoutDepartmentInput | RoleMasterUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: RoleMasterScalarWhereInput | RoleMasterScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentMasterNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentMasterInput, UserUncheckedCreateWithoutDepartmentMasterInput> | UserCreateWithoutDepartmentMasterInput[] | UserUncheckedCreateWithoutDepartmentMasterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentMasterInput | UserCreateOrConnectWithoutDepartmentMasterInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentMasterInput | UserUpsertWithWhereUniqueWithoutDepartmentMasterInput[]
    createMany?: UserCreateManyDepartmentMasterInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentMasterInput | UserUpdateWithWhereUniqueWithoutDepartmentMasterInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentMasterInput | UserUpdateManyWithWhereWithoutDepartmentMasterInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentMasterCreateNestedOneWithoutRolesInput = {
    create?: XOR<DepartmentMasterCreateWithoutRolesInput, DepartmentMasterUncheckedCreateWithoutRolesInput>
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutRolesInput
    connect?: DepartmentMasterWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutRoleMasterInput = {
    create?: XOR<UserCreateWithoutRoleMasterInput, UserUncheckedCreateWithoutRoleMasterInput> | UserCreateWithoutRoleMasterInput[] | UserUncheckedCreateWithoutRoleMasterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleMasterInput | UserCreateOrConnectWithoutRoleMasterInput[]
    createMany?: UserCreateManyRoleMasterInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleMasterInput = {
    create?: XOR<UserCreateWithoutRoleMasterInput, UserUncheckedCreateWithoutRoleMasterInput> | UserCreateWithoutRoleMasterInput[] | UserUncheckedCreateWithoutRoleMasterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleMasterInput | UserCreateOrConnectWithoutRoleMasterInput[]
    createMany?: UserCreateManyRoleMasterInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentMasterUpdateOneRequiredWithoutRolesNestedInput = {
    create?: XOR<DepartmentMasterCreateWithoutRolesInput, DepartmentMasterUncheckedCreateWithoutRolesInput>
    connectOrCreate?: DepartmentMasterCreateOrConnectWithoutRolesInput
    upsert?: DepartmentMasterUpsertWithoutRolesInput
    connect?: DepartmentMasterWhereUniqueInput
    update?: XOR<XOR<DepartmentMasterUpdateToOneWithWhereWithoutRolesInput, DepartmentMasterUpdateWithoutRolesInput>, DepartmentMasterUncheckedUpdateWithoutRolesInput>
  }

  export type UserUpdateManyWithoutRoleMasterNestedInput = {
    create?: XOR<UserCreateWithoutRoleMasterInput, UserUncheckedCreateWithoutRoleMasterInput> | UserCreateWithoutRoleMasterInput[] | UserUncheckedCreateWithoutRoleMasterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleMasterInput | UserCreateOrConnectWithoutRoleMasterInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleMasterInput | UserUpsertWithWhereUniqueWithoutRoleMasterInput[]
    createMany?: UserCreateManyRoleMasterInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleMasterInput | UserUpdateWithWhereUniqueWithoutRoleMasterInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleMasterInput | UserUpdateManyWithWhereWithoutRoleMasterInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleMasterNestedInput = {
    create?: XOR<UserCreateWithoutRoleMasterInput, UserUncheckedCreateWithoutRoleMasterInput> | UserCreateWithoutRoleMasterInput[] | UserUncheckedCreateWithoutRoleMasterInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleMasterInput | UserCreateOrConnectWithoutRoleMasterInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleMasterInput | UserUpsertWithWhereUniqueWithoutRoleMasterInput[]
    createMany?: UserCreateManyRoleMasterInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleMasterInput | UserUpdateWithWhereUniqueWithoutRoleMasterInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleMasterInput | UserUpdateManyWithWhereWithoutRoleMasterInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ProjectCreateNestedOneWithoutAssignmentHistoryInput = {
    create?: XOR<ProjectCreateWithoutAssignmentHistoryInput, ProjectUncheckedCreateWithoutAssignmentHistoryInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAssignmentHistoryInput
    connect?: ProjectWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignmentHistoryInput = {
    create?: XOR<UserCreateWithoutAssignmentHistoryInput, UserUncheckedCreateWithoutAssignmentHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentHistoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutAssignmentsMadeInput = {
    create?: XOR<UserCreateWithoutAssignmentsMadeInput, UserUncheckedCreateWithoutAssignmentsMadeInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsMadeInput
    connect?: UserWhereUniqueInput
  }

  export type EnumProjectAssignmentTypeFieldUpdateOperationsInput = {
    set?: $Enums.ProjectAssignmentType
  }

  export type ProjectUpdateOneRequiredWithoutAssignmentHistoryNestedInput = {
    create?: XOR<ProjectCreateWithoutAssignmentHistoryInput, ProjectUncheckedCreateWithoutAssignmentHistoryInput>
    connectOrCreate?: ProjectCreateOrConnectWithoutAssignmentHistoryInput
    upsert?: ProjectUpsertWithoutAssignmentHistoryInput
    connect?: ProjectWhereUniqueInput
    update?: XOR<XOR<ProjectUpdateToOneWithWhereWithoutAssignmentHistoryInput, ProjectUpdateWithoutAssignmentHistoryInput>, ProjectUncheckedUpdateWithoutAssignmentHistoryInput>
  }

  export type UserUpdateOneWithoutAssignmentHistoryNestedInput = {
    create?: XOR<UserCreateWithoutAssignmentHistoryInput, UserUncheckedCreateWithoutAssignmentHistoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentHistoryInput
    upsert?: UserUpsertWithoutAssignmentHistoryInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignmentHistoryInput, UserUpdateWithoutAssignmentHistoryInput>, UserUncheckedUpdateWithoutAssignmentHistoryInput>
  }

  export type UserUpdateOneRequiredWithoutAssignmentsMadeNestedInput = {
    create?: XOR<UserCreateWithoutAssignmentsMadeInput, UserUncheckedCreateWithoutAssignmentsMadeInput>
    connectOrCreate?: UserCreateOrConnectWithoutAssignmentsMadeInput
    upsert?: UserUpsertWithoutAssignmentsMadeInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAssignmentsMadeInput, UserUpdateWithoutAssignmentsMadeInput>, UserUncheckedUpdateWithoutAssignmentsMadeInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumDepartmentNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Department | EnumDepartmentFieldRefInput<$PrismaModel> | null
    in?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDepartmentNullableFilter<$PrismaModel> | $Enums.Department | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumDepartmentNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Department | EnumDepartmentFieldRefInput<$PrismaModel> | null
    in?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel> | null
    not?: NestedEnumDepartmentNullableWithAggregatesFilter<$PrismaModel> | $Enums.Department | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumDepartmentNullableFilter<$PrismaModel>
    _max?: NestedEnumDepartmentNullableFilter<$PrismaModel>
  }

  export type NestedEnumProjectCategoryFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectCategory | EnumProjectCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectCategory[] | ListEnumProjectCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectCategory[] | ListEnumProjectCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectCategoryFilter<$PrismaModel> | $Enums.ProjectCategory
  }

  export type NestedEnumProjectStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusFilter<$PrismaModel> | $Enums.ProjectStatus
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumDepartmentFilter<$PrismaModel = never> = {
    equals?: $Enums.Department | EnumDepartmentFieldRefInput<$PrismaModel>
    in?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentFilter<$PrismaModel> | $Enums.Department
  }

  export type NestedEnumProjectCategoryWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectCategory | EnumProjectCategoryFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectCategory[] | ListEnumProjectCategoryFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectCategory[] | ListEnumProjectCategoryFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectCategoryWithAggregatesFilter<$PrismaModel> | $Enums.ProjectCategory
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectCategoryFilter<$PrismaModel>
    _max?: NestedEnumProjectCategoryFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectStatus | EnumProjectStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectStatus[] | ListEnumProjectStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectStatusWithAggregatesFilter<$PrismaModel> | $Enums.ProjectStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectStatusFilter<$PrismaModel>
    _max?: NestedEnumProjectStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedEnumDepartmentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Department | EnumDepartmentFieldRefInput<$PrismaModel>
    in?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Department[] | ListEnumDepartmentFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentWithAggregatesFilter<$PrismaModel> | $Enums.Department
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentFilter<$PrismaModel>
    _max?: NestedEnumDepartmentFilter<$PrismaModel>
  }

  export type NestedEnumTaskStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusFilter<$PrismaModel> | $Enums.TaskStatus
  }

  export type NestedEnumPriorityFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityFilter<$PrismaModel> | $Enums.Priority
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TaskStatus | EnumTaskStatusFieldRefInput<$PrismaModel>
    in?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.TaskStatus[] | ListEnumTaskStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumTaskStatusWithAggregatesFilter<$PrismaModel> | $Enums.TaskStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTaskStatusFilter<$PrismaModel>
    _max?: NestedEnumTaskStatusFilter<$PrismaModel>
  }

  export type NestedEnumPriorityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Priority | EnumPriorityFieldRefInput<$PrismaModel>
    in?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    notIn?: $Enums.Priority[] | ListEnumPriorityFieldRefInput<$PrismaModel>
    not?: NestedEnumPriorityWithAggregatesFilter<$PrismaModel> | $Enums.Priority
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPriorityFilter<$PrismaModel>
    _max?: NestedEnumPriorityFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumDepartmentWorkStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentWorkStatus | EnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentWorkStatus[] | ListEnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentWorkStatus[] | ListEnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentWorkStatusFilter<$PrismaModel> | $Enums.DepartmentWorkStatus
  }

  export type NestedEnumDepartmentWorkStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.DepartmentWorkStatus | EnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    in?: $Enums.DepartmentWorkStatus[] | ListEnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.DepartmentWorkStatus[] | ListEnumDepartmentWorkStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumDepartmentWorkStatusWithAggregatesFilter<$PrismaModel> | $Enums.DepartmentWorkStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumDepartmentWorkStatusFilter<$PrismaModel>
    _max?: NestedEnumDepartmentWorkStatusFilter<$PrismaModel>
  }

  export type NestedEnumCorrectionStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CorrectionStatus | EnumCorrectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CorrectionStatus[] | ListEnumCorrectionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CorrectionStatus[] | ListEnumCorrectionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCorrectionStatusFilter<$PrismaModel> | $Enums.CorrectionStatus
  }

  export type NestedEnumCorrectionStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CorrectionStatus | EnumCorrectionStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CorrectionStatus[] | ListEnumCorrectionStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CorrectionStatus[] | ListEnumCorrectionStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCorrectionStatusWithAggregatesFilter<$PrismaModel> | $Enums.CorrectionStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCorrectionStatusFilter<$PrismaModel>
    _max?: NestedEnumCorrectionStatusFilter<$PrismaModel>
  }

  export type NestedEnumApprovalTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeFilter<$PrismaModel> | $Enums.ApprovalType
  }

  export type NestedEnumApprovalStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusFilter<$PrismaModel> | $Enums.ApprovalStatus
  }

  export type NestedEnumApprovalTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalType | EnumApprovalTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalType[] | ListEnumApprovalTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalTypeWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalTypeFilter<$PrismaModel>
    _max?: NestedEnumApprovalTypeFilter<$PrismaModel>
  }

  export type NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ApprovalStatus | EnumApprovalStatusFieldRefInput<$PrismaModel>
    in?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.ApprovalStatus[] | ListEnumApprovalStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumApprovalStatusWithAggregatesFilter<$PrismaModel> | $Enums.ApprovalStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumApprovalStatusFilter<$PrismaModel>
    _max?: NestedEnumApprovalStatusFilter<$PrismaModel>
  }

  export type NestedEnumQATypeFilter<$PrismaModel = never> = {
    equals?: $Enums.QAType | EnumQATypeFieldRefInput<$PrismaModel>
    in?: $Enums.QAType[] | ListEnumQATypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QAType[] | ListEnumQATypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQATypeFilter<$PrismaModel> | $Enums.QAType
  }

  export type NestedEnumQAStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.QAStatus | EnumQAStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QAStatus[] | ListEnumQAStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QAStatus[] | ListEnumQAStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQAStatusFilter<$PrismaModel> | $Enums.QAStatus
  }

  export type NestedEnumQATypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QAType | EnumQATypeFieldRefInput<$PrismaModel>
    in?: $Enums.QAType[] | ListEnumQATypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.QAType[] | ListEnumQATypeFieldRefInput<$PrismaModel>
    not?: NestedEnumQATypeWithAggregatesFilter<$PrismaModel> | $Enums.QAType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQATypeFilter<$PrismaModel>
    _max?: NestedEnumQATypeFilter<$PrismaModel>
  }

  export type NestedEnumQAStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.QAStatus | EnumQAStatusFieldRefInput<$PrismaModel>
    in?: $Enums.QAStatus[] | ListEnumQAStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.QAStatus[] | ListEnumQAStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumQAStatusWithAggregatesFilter<$PrismaModel> | $Enums.QAStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumQAStatusFilter<$PrismaModel>
    _max?: NestedEnumQAStatusFilter<$PrismaModel>
  }

  export type NestedEnumBugSeverityFilter<$PrismaModel = never> = {
    equals?: $Enums.BugSeverity | EnumBugSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.BugSeverity[] | ListEnumBugSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BugSeverity[] | ListEnumBugSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumBugSeverityFilter<$PrismaModel> | $Enums.BugSeverity
  }

  export type NestedEnumBugStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.BugStatus | EnumBugStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BugStatus[] | ListEnumBugStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BugStatus[] | ListEnumBugStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBugStatusFilter<$PrismaModel> | $Enums.BugStatus
  }

  export type NestedEnumBugSeverityWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BugSeverity | EnumBugSeverityFieldRefInput<$PrismaModel>
    in?: $Enums.BugSeverity[] | ListEnumBugSeverityFieldRefInput<$PrismaModel>
    notIn?: $Enums.BugSeverity[] | ListEnumBugSeverityFieldRefInput<$PrismaModel>
    not?: NestedEnumBugSeverityWithAggregatesFilter<$PrismaModel> | $Enums.BugSeverity
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBugSeverityFilter<$PrismaModel>
    _max?: NestedEnumBugSeverityFilter<$PrismaModel>
  }

  export type NestedEnumBugStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.BugStatus | EnumBugStatusFieldRefInput<$PrismaModel>
    in?: $Enums.BugStatus[] | ListEnumBugStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.BugStatus[] | ListEnumBugStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumBugStatusWithAggregatesFilter<$PrismaModel> | $Enums.BugStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumBugStatusFilter<$PrismaModel>
    _max?: NestedEnumBugStatusFilter<$PrismaModel>
  }

  export type NestedEnumProjectAssignmentTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectAssignmentType | EnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectAssignmentType[] | ListEnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectAssignmentType[] | ListEnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectAssignmentTypeFilter<$PrismaModel> | $Enums.ProjectAssignmentType
  }

  export type NestedEnumProjectAssignmentTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ProjectAssignmentType | EnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    in?: $Enums.ProjectAssignmentType[] | ListEnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ProjectAssignmentType[] | ListEnumProjectAssignmentTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumProjectAssignmentTypeWithAggregatesFilter<$PrismaModel> | $Enums.ProjectAssignmentType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumProjectAssignmentTypeFilter<$PrismaModel>
    _max?: NestedEnumProjectAssignmentTypeFilter<$PrismaModel>
  }

  export type RoleMasterCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    department: DepartmentMasterCreateNestedOneWithoutRolesInput
  }

  export type RoleMasterUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    departmentId: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleMasterCreateOrConnectWithoutUsersInput = {
    where: RoleMasterWhereUniqueInput
    create: XOR<RoleMasterCreateWithoutUsersInput, RoleMasterUncheckedCreateWithoutUsersInput>
  }

  export type DepartmentMasterCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: DepartmentMasterCreateNestedOneWithoutChildrenInput
    children?: DepartmentMasterCreateNestedManyWithoutParentInput
    roles?: RoleMasterCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentMasterUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: DepartmentMasterUncheckedCreateNestedManyWithoutParentInput
    roles?: RoleMasterUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentMasterCreateOrConnectWithoutUsersInput = {
    where: DepartmentMasterWhereUniqueInput
    create: XOR<DepartmentMasterCreateWithoutUsersInput, DepartmentMasterUncheckedCreateWithoutUsersInput>
  }

  export type CommentCreateWithoutAuthorInput = {
    id?: string
    content: string
    createdAt?: Date | string
    project?: ProjectCreateNestedOneWithoutCommentsInput
    task?: TaskCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutAuthorInput = {
    id?: string
    content: string
    projectId?: string | null
    taskId?: string | null
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentCreateManyAuthorInputEnvelope = {
    data: CommentCreateManyAuthorInput | CommentCreateManyAuthorInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCorrectionCreateWithoutAssignedToInput = {
    id?: string
    correctionType: string
    description: string
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
    departmentHistory: ProjectDepartmentHistoryCreateNestedOneWithoutCorrectionsInput
    requestedBy: UserCreateNestedOneWithoutRequestedCorrectionsInput
  }

  export type DepartmentCorrectionUncheckedCreateWithoutAssignedToInput = {
    id?: string
    historyId: string
    correctionType: string
    description: string
    requestedById: string
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
  }

  export type DepartmentCorrectionCreateOrConnectWithoutAssignedToInput = {
    where: DepartmentCorrectionWhereUniqueInput
    create: XOR<DepartmentCorrectionCreateWithoutAssignedToInput, DepartmentCorrectionUncheckedCreateWithoutAssignedToInput>
  }

  export type DepartmentCorrectionCreateManyAssignedToInputEnvelope = {
    data: DepartmentCorrectionCreateManyAssignedToInput | DepartmentCorrectionCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCorrectionCreateWithoutRequestedByInput = {
    id?: string
    correctionType: string
    description: string
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
    assignedTo?: UserCreateNestedOneWithoutAssignedCorrectionsInput
    departmentHistory: ProjectDepartmentHistoryCreateNestedOneWithoutCorrectionsInput
  }

  export type DepartmentCorrectionUncheckedCreateWithoutRequestedByInput = {
    id?: string
    historyId: string
    correctionType: string
    description: string
    assignedToId?: string | null
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
  }

  export type DepartmentCorrectionCreateOrConnectWithoutRequestedByInput = {
    where: DepartmentCorrectionWhereUniqueInput
    create: XOR<DepartmentCorrectionCreateWithoutRequestedByInput, DepartmentCorrectionUncheckedCreateWithoutRequestedByInput>
  }

  export type DepartmentCorrectionCreateManyRequestedByInputEnvelope = {
    data: DepartmentCorrectionCreateManyRequestedByInput | DepartmentCorrectionCreateManyRequestedByInput[]
    skipDuplicates?: boolean
  }

  export type ProjectDepartmentHistoryCreateWithoutMovedByInput = {
    id?: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionCreateNestedManyWithoutDepartmentHistoryInput
    permissionGrantedBy?: UserCreateNestedOneWithoutDepartmentPermissionsInput
    project: ProjectCreateNestedOneWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput = {
    id?: string
    projectId: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    permissionGrantedById?: string | null
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalUncheckedCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryCreateOrConnectWithoutMovedByInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    create: XOR<ProjectDepartmentHistoryCreateWithoutMovedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput>
  }

  export type ProjectDepartmentHistoryCreateManyMovedByInputEnvelope = {
    data: ProjectDepartmentHistoryCreateManyMovedByInput | ProjectDepartmentHistoryCreateManyMovedByInput[]
    skipDuplicates?: boolean
  }

  export type ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput = {
    id?: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionCreateNestedManyWithoutDepartmentHistoryInput
    movedBy: UserCreateNestedOneWithoutDepartmentTransitionsInput
    project: ProjectCreateNestedOneWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput = {
    id?: string
    projectId: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalUncheckedCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryCreateOrConnectWithoutPermissionGrantedByInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    create: XOR<ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput>
  }

  export type ProjectDepartmentHistoryCreateManyPermissionGrantedByInputEnvelope = {
    data: ProjectDepartmentHistoryCreateManyPermissionGrantedByInput | ProjectDepartmentHistoryCreateManyPermissionGrantedByInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutOwnerInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    comments?: CommentCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryCreateNestedManyWithoutProjectInput
    projectCoordinator?: UserCreateNestedOneWithoutCoordinatedProjectsInput
    pcTeamLead?: UserCreateNestedOneWithoutPcTeamLeadProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutOwnerInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    pcTeamLeadId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldUncheckedCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutOwnerInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput>
  }

  export type ProjectCreateManyOwnerInputEnvelope = {
    data: ProjectCreateManyOwnerInput | ProjectCreateManyOwnerInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutProjectCoordinatorInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    comments?: CommentCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryCreateNestedManyWithoutProjectInput
    owner: UserCreateNestedOneWithoutOwnedProjectsInput
    pcTeamLead?: UserCreateNestedOneWithoutPcTeamLeadProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutProjectCoordinatorInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    pcTeamLeadId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldUncheckedCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutProjectCoordinatorInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutProjectCoordinatorInput, ProjectUncheckedCreateWithoutProjectCoordinatorInput>
  }

  export type ProjectCreateManyProjectCoordinatorInputEnvelope = {
    data: ProjectCreateManyProjectCoordinatorInput | ProjectCreateManyProjectCoordinatorInput[]
    skipDuplicates?: boolean
  }

  export type ProjectCreateWithoutPcTeamLeadInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    comments?: CommentCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryCreateNestedManyWithoutProjectInput
    owner: UserCreateNestedOneWithoutOwnedProjectsInput
    projectCoordinator?: UserCreateNestedOneWithoutCoordinatedProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutPcTeamLeadInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldUncheckedCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutPcTeamLeadInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutPcTeamLeadInput, ProjectUncheckedCreateWithoutPcTeamLeadInput>
  }

  export type ProjectCreateManyPcTeamLeadInputEnvelope = {
    data: ProjectCreateManyPcTeamLeadInput | ProjectCreateManyPcTeamLeadInput[]
    skipDuplicates?: boolean
  }

  export type QABugCreateWithoutAssignedToInput = {
    id?: string
    title: string
    description: string
    severity?: $Enums.BugSeverity
    status?: $Enums.BugStatus
    foundAt?: Date | string
    fixedAt?: Date | string | null
    screenshot?: string | null
    steps?: string | null
    qaRound: QATestingRoundCreateNestedOneWithoutBugsInput
  }

  export type QABugUncheckedCreateWithoutAssignedToInput = {
    id?: string
    qaRoundId: string
    title: string
    description: string
    severity?: $Enums.BugSeverity
    status?: $Enums.BugStatus
    foundAt?: Date | string
    fixedAt?: Date | string | null
    screenshot?: string | null
    steps?: string | null
  }

  export type QABugCreateOrConnectWithoutAssignedToInput = {
    where: QABugWhereUniqueInput
    create: XOR<QABugCreateWithoutAssignedToInput, QABugUncheckedCreateWithoutAssignedToInput>
  }

  export type QABugCreateManyAssignedToInputEnvelope = {
    data: QABugCreateManyAssignedToInput | QABugCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type QATestingRoundCreateWithoutTestedByInput = {
    id?: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
    bugs?: QABugCreateNestedManyWithoutQaRoundInput
    departmentHistory: ProjectDepartmentHistoryCreateNestedOneWithoutQaRoundsInput
  }

  export type QATestingRoundUncheckedCreateWithoutTestedByInput = {
    id?: string
    historyId: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
    bugs?: QABugUncheckedCreateNestedManyWithoutQaRoundInput
  }

  export type QATestingRoundCreateOrConnectWithoutTestedByInput = {
    where: QATestingRoundWhereUniqueInput
    create: XOR<QATestingRoundCreateWithoutTestedByInput, QATestingRoundUncheckedCreateWithoutTestedByInput>
  }

  export type QATestingRoundCreateManyTestedByInputEnvelope = {
    data: QATestingRoundCreateManyTestedByInput | QATestingRoundCreateManyTestedByInput[]
    skipDuplicates?: boolean
  }

  export type TaskCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutTaskInput
    project: ProjectCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskCreateManyAssigneeInputEnvelope = {
    data: TaskCreateManyAssigneeInput | TaskCreateManyAssigneeInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowApprovalCreateWithoutRequestedByInput = {
    id?: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
    departmentHistory: ProjectDepartmentHistoryCreateNestedOneWithoutApprovalsInput
    reviewedBy?: UserCreateNestedOneWithoutApprovalReviewsInput
  }

  export type WorkflowApprovalUncheckedCreateWithoutRequestedByInput = {
    id?: string
    historyId: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    reviewedById?: string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
  }

  export type WorkflowApprovalCreateOrConnectWithoutRequestedByInput = {
    where: WorkflowApprovalWhereUniqueInput
    create: XOR<WorkflowApprovalCreateWithoutRequestedByInput, WorkflowApprovalUncheckedCreateWithoutRequestedByInput>
  }

  export type WorkflowApprovalCreateManyRequestedByInputEnvelope = {
    data: WorkflowApprovalCreateManyRequestedByInput | WorkflowApprovalCreateManyRequestedByInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowApprovalCreateWithoutReviewedByInput = {
    id?: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
    departmentHistory: ProjectDepartmentHistoryCreateNestedOneWithoutApprovalsInput
    requestedBy: UserCreateNestedOneWithoutApprovalRequestsInput
  }

  export type WorkflowApprovalUncheckedCreateWithoutReviewedByInput = {
    id?: string
    historyId: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedById: string
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
  }

  export type WorkflowApprovalCreateOrConnectWithoutReviewedByInput = {
    where: WorkflowApprovalWhereUniqueInput
    create: XOR<WorkflowApprovalCreateWithoutReviewedByInput, WorkflowApprovalUncheckedCreateWithoutReviewedByInput>
  }

  export type WorkflowApprovalCreateManyReviewedByInputEnvelope = {
    data: WorkflowApprovalCreateManyReviewedByInput | WorkflowApprovalCreateManyReviewedByInput[]
    skipDuplicates?: boolean
  }

  export type ProjectAssignmentHistoryCreateWithoutPreviousUserInput = {
    id?: string
    assignmentType: $Enums.ProjectAssignmentType
    newUserId?: string | null
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
    project: ProjectCreateNestedOneWithoutAssignmentHistoryInput
    assignedBy: UserCreateNestedOneWithoutAssignmentsMadeInput
  }

  export type ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput = {
    id?: string
    projectId: string
    assignmentType: $Enums.ProjectAssignmentType
    newUserId?: string | null
    assignedById: string
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
  }

  export type ProjectAssignmentHistoryCreateOrConnectWithoutPreviousUserInput = {
    where: ProjectAssignmentHistoryWhereUniqueInput
    create: XOR<ProjectAssignmentHistoryCreateWithoutPreviousUserInput, ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput>
  }

  export type ProjectAssignmentHistoryCreateManyPreviousUserInputEnvelope = {
    data: ProjectAssignmentHistoryCreateManyPreviousUserInput | ProjectAssignmentHistoryCreateManyPreviousUserInput[]
    skipDuplicates?: boolean
  }

  export type ProjectAssignmentHistoryCreateWithoutAssignedByInput = {
    id?: string
    assignmentType: $Enums.ProjectAssignmentType
    newUserId?: string | null
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
    project: ProjectCreateNestedOneWithoutAssignmentHistoryInput
    previousUser?: UserCreateNestedOneWithoutAssignmentHistoryInput
  }

  export type ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput = {
    id?: string
    projectId: string
    assignmentType: $Enums.ProjectAssignmentType
    previousUserId?: string | null
    newUserId?: string | null
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
  }

  export type ProjectAssignmentHistoryCreateOrConnectWithoutAssignedByInput = {
    where: ProjectAssignmentHistoryWhereUniqueInput
    create: XOR<ProjectAssignmentHistoryCreateWithoutAssignedByInput, ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput>
  }

  export type ProjectAssignmentHistoryCreateManyAssignedByInputEnvelope = {
    data: ProjectAssignmentHistoryCreateManyAssignedByInput | ProjectAssignmentHistoryCreateManyAssignedByInput[]
    skipDuplicates?: boolean
  }

  export type RoleMasterUpsertWithoutUsersInput = {
    update: XOR<RoleMasterUpdateWithoutUsersInput, RoleMasterUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleMasterCreateWithoutUsersInput, RoleMasterUncheckedCreateWithoutUsersInput>
    where?: RoleMasterWhereInput
  }

  export type RoleMasterUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleMasterWhereInput
    data: XOR<RoleMasterUpdateWithoutUsersInput, RoleMasterUncheckedUpdateWithoutUsersInput>
  }

  export type RoleMasterUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: DepartmentMasterUpdateOneRequiredWithoutRolesNestedInput
  }

  export type RoleMasterUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentMasterUpsertWithoutUsersInput = {
    update: XOR<DepartmentMasterUpdateWithoutUsersInput, DepartmentMasterUncheckedUpdateWithoutUsersInput>
    create: XOR<DepartmentMasterCreateWithoutUsersInput, DepartmentMasterUncheckedCreateWithoutUsersInput>
    where?: DepartmentMasterWhereInput
  }

  export type DepartmentMasterUpdateToOneWithWhereWithoutUsersInput = {
    where?: DepartmentMasterWhereInput
    data: XOR<DepartmentMasterUpdateWithoutUsersInput, DepartmentMasterUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentMasterUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: DepartmentMasterUpdateOneWithoutChildrenNestedInput
    children?: DepartmentMasterUpdateManyWithoutParentNestedInput
    roles?: RoleMasterUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentMasterUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: DepartmentMasterUncheckedUpdateManyWithoutParentNestedInput
    roles?: RoleMasterUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
    create: XOR<CommentCreateWithoutAuthorInput, CommentUncheckedCreateWithoutAuthorInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutAuthorInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutAuthorInput, CommentUncheckedUpdateWithoutAuthorInput>
  }

  export type CommentUpdateManyWithWhereWithoutAuthorInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutAuthorInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    content?: StringFilter<"Comment"> | string
    authorId?: StringFilter<"Comment"> | string
    projectId?: StringNullableFilter<"Comment"> | string | null
    taskId?: StringNullableFilter<"Comment"> | string | null
    createdAt?: DateTimeFilter<"Comment"> | Date | string
  }

  export type DepartmentCorrectionUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: DepartmentCorrectionWhereUniqueInput
    update: XOR<DepartmentCorrectionUpdateWithoutAssignedToInput, DepartmentCorrectionUncheckedUpdateWithoutAssignedToInput>
    create: XOR<DepartmentCorrectionCreateWithoutAssignedToInput, DepartmentCorrectionUncheckedCreateWithoutAssignedToInput>
  }

  export type DepartmentCorrectionUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: DepartmentCorrectionWhereUniqueInput
    data: XOR<DepartmentCorrectionUpdateWithoutAssignedToInput, DepartmentCorrectionUncheckedUpdateWithoutAssignedToInput>
  }

  export type DepartmentCorrectionUpdateManyWithWhereWithoutAssignedToInput = {
    where: DepartmentCorrectionScalarWhereInput
    data: XOR<DepartmentCorrectionUpdateManyMutationInput, DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type DepartmentCorrectionScalarWhereInput = {
    AND?: DepartmentCorrectionScalarWhereInput | DepartmentCorrectionScalarWhereInput[]
    OR?: DepartmentCorrectionScalarWhereInput[]
    NOT?: DepartmentCorrectionScalarWhereInput | DepartmentCorrectionScalarWhereInput[]
    id?: StringFilter<"DepartmentCorrection"> | string
    historyId?: StringFilter<"DepartmentCorrection"> | string
    correctionType?: StringFilter<"DepartmentCorrection"> | string
    description?: StringFilter<"DepartmentCorrection"> | string
    requestedById?: StringFilter<"DepartmentCorrection"> | string
    assignedToId?: StringNullableFilter<"DepartmentCorrection"> | string | null
    status?: EnumCorrectionStatusFilter<"DepartmentCorrection"> | $Enums.CorrectionStatus
    priority?: EnumPriorityFilter<"DepartmentCorrection"> | $Enums.Priority
    requestedAt?: DateTimeFilter<"DepartmentCorrection"> | Date | string
    resolvedAt?: DateTimeNullableFilter<"DepartmentCorrection"> | Date | string | null
    resolutionNotes?: StringNullableFilter<"DepartmentCorrection"> | string | null
    estimatedHours?: IntNullableFilter<"DepartmentCorrection"> | number | null
    actualHours?: IntNullableFilter<"DepartmentCorrection"> | number | null
  }

  export type DepartmentCorrectionUpsertWithWhereUniqueWithoutRequestedByInput = {
    where: DepartmentCorrectionWhereUniqueInput
    update: XOR<DepartmentCorrectionUpdateWithoutRequestedByInput, DepartmentCorrectionUncheckedUpdateWithoutRequestedByInput>
    create: XOR<DepartmentCorrectionCreateWithoutRequestedByInput, DepartmentCorrectionUncheckedCreateWithoutRequestedByInput>
  }

  export type DepartmentCorrectionUpdateWithWhereUniqueWithoutRequestedByInput = {
    where: DepartmentCorrectionWhereUniqueInput
    data: XOR<DepartmentCorrectionUpdateWithoutRequestedByInput, DepartmentCorrectionUncheckedUpdateWithoutRequestedByInput>
  }

  export type DepartmentCorrectionUpdateManyWithWhereWithoutRequestedByInput = {
    where: DepartmentCorrectionScalarWhereInput
    data: XOR<DepartmentCorrectionUpdateManyMutationInput, DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByInput>
  }

  export type ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutMovedByInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    update: XOR<ProjectDepartmentHistoryUpdateWithoutMovedByInput, ProjectDepartmentHistoryUncheckedUpdateWithoutMovedByInput>
    create: XOR<ProjectDepartmentHistoryCreateWithoutMovedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutMovedByInput>
  }

  export type ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutMovedByInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    data: XOR<ProjectDepartmentHistoryUpdateWithoutMovedByInput, ProjectDepartmentHistoryUncheckedUpdateWithoutMovedByInput>
  }

  export type ProjectDepartmentHistoryUpdateManyWithWhereWithoutMovedByInput = {
    where: ProjectDepartmentHistoryScalarWhereInput
    data: XOR<ProjectDepartmentHistoryUpdateManyMutationInput, ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByInput>
  }

  export type ProjectDepartmentHistoryScalarWhereInput = {
    AND?: ProjectDepartmentHistoryScalarWhereInput | ProjectDepartmentHistoryScalarWhereInput[]
    OR?: ProjectDepartmentHistoryScalarWhereInput[]
    NOT?: ProjectDepartmentHistoryScalarWhereInput | ProjectDepartmentHistoryScalarWhereInput[]
    id?: StringFilter<"ProjectDepartmentHistory"> | string
    projectId?: StringFilter<"ProjectDepartmentHistory"> | string
    fromDepartment?: EnumDepartmentNullableFilter<"ProjectDepartmentHistory"> | $Enums.Department | null
    toDepartment?: EnumDepartmentFilter<"ProjectDepartmentHistory"> | $Enums.Department
    movedById?: StringFilter<"ProjectDepartmentHistory"> | string
    notes?: StringNullableFilter<"ProjectDepartmentHistory"> | string | null
    createdAt?: DateTimeFilter<"ProjectDepartmentHistory"> | Date | string
    workStatus?: EnumDepartmentWorkStatusFilter<"ProjectDepartmentHistory"> | $Enums.DepartmentWorkStatus
    workStartDate?: DateTimeNullableFilter<"ProjectDepartmentHistory"> | Date | string | null
    workEndDate?: DateTimeNullableFilter<"ProjectDepartmentHistory"> | Date | string | null
    estimatedDays?: IntNullableFilter<"ProjectDepartmentHistory"> | number | null
    actualDays?: IntNullableFilter<"ProjectDepartmentHistory"> | number | null
    correctionCount?: IntFilter<"ProjectDepartmentHistory"> | number
    permissionGrantedById?: StringNullableFilter<"ProjectDepartmentHistory"> | string | null
    updatedAt?: DateTimeFilter<"ProjectDepartmentHistory"> | Date | string
  }

  export type ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutPermissionGrantedByInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    update: XOR<ProjectDepartmentHistoryUpdateWithoutPermissionGrantedByInput, ProjectDepartmentHistoryUncheckedUpdateWithoutPermissionGrantedByInput>
    create: XOR<ProjectDepartmentHistoryCreateWithoutPermissionGrantedByInput, ProjectDepartmentHistoryUncheckedCreateWithoutPermissionGrantedByInput>
  }

  export type ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutPermissionGrantedByInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    data: XOR<ProjectDepartmentHistoryUpdateWithoutPermissionGrantedByInput, ProjectDepartmentHistoryUncheckedUpdateWithoutPermissionGrantedByInput>
  }

  export type ProjectDepartmentHistoryUpdateManyWithWhereWithoutPermissionGrantedByInput = {
    where: ProjectDepartmentHistoryScalarWhereInput
    data: XOR<ProjectDepartmentHistoryUpdateManyMutationInput, ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutOwnerInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutOwnerInput, ProjectUncheckedUpdateWithoutOwnerInput>
    create: XOR<ProjectCreateWithoutOwnerInput, ProjectUncheckedCreateWithoutOwnerInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutOwnerInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutOwnerInput, ProjectUncheckedUpdateWithoutOwnerInput>
  }

  export type ProjectUpdateManyWithWhereWithoutOwnerInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutOwnerInput>
  }

  export type ProjectScalarWhereInput = {
    AND?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    OR?: ProjectScalarWhereInput[]
    NOT?: ProjectScalarWhereInput | ProjectScalarWhereInput[]
    id?: StringFilter<"Project"> | string
    name?: StringFilter<"Project"> | string
    office?: StringFilter<"Project"> | string
    category?: EnumProjectCategoryFilter<"Project"> | $Enums.ProjectCategory
    pagesCount?: IntNullableFilter<"Project"> | number | null
    targetDate?: DateTimeFilter<"Project"> | Date | string
    status?: EnumProjectStatusFilter<"Project"> | $Enums.ProjectStatus
    ownerId?: StringFilter<"Project"> | string
    clientName?: StringNullableFilter<"Project"> | string | null
    observations?: StringNullableFilter<"Project"> | string | null
    monthsPassed?: IntFilter<"Project"> | number
    startDate?: DateTimeFilter<"Project"> | Date | string
    deviationReason?: StringNullableFilter<"Project"> | string | null
    dependency?: BoolFilter<"Project"> | boolean
    createdAt?: DateTimeFilter<"Project"> | Date | string
    updatedAt?: DateTimeFilter<"Project"> | Date | string
    currentDepartment?: EnumDepartmentFilter<"Project"> | $Enums.Department
    nextDepartment?: EnumDepartmentNullableFilter<"Project"> | $Enums.Department | null
    projectCode?: StringFilter<"Project"> | string
    projectCoordinatorId?: StringNullableFilter<"Project"> | string | null
    pcTeamLeadId?: StringNullableFilter<"Project"> | string | null
  }

  export type ProjectUpsertWithWhereUniqueWithoutProjectCoordinatorInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutProjectCoordinatorInput, ProjectUncheckedUpdateWithoutProjectCoordinatorInput>
    create: XOR<ProjectCreateWithoutProjectCoordinatorInput, ProjectUncheckedCreateWithoutProjectCoordinatorInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutProjectCoordinatorInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutProjectCoordinatorInput, ProjectUncheckedUpdateWithoutProjectCoordinatorInput>
  }

  export type ProjectUpdateManyWithWhereWithoutProjectCoordinatorInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutProjectCoordinatorInput>
  }

  export type ProjectUpsertWithWhereUniqueWithoutPcTeamLeadInput = {
    where: ProjectWhereUniqueInput
    update: XOR<ProjectUpdateWithoutPcTeamLeadInput, ProjectUncheckedUpdateWithoutPcTeamLeadInput>
    create: XOR<ProjectCreateWithoutPcTeamLeadInput, ProjectUncheckedCreateWithoutPcTeamLeadInput>
  }

  export type ProjectUpdateWithWhereUniqueWithoutPcTeamLeadInput = {
    where: ProjectWhereUniqueInput
    data: XOR<ProjectUpdateWithoutPcTeamLeadInput, ProjectUncheckedUpdateWithoutPcTeamLeadInput>
  }

  export type ProjectUpdateManyWithWhereWithoutPcTeamLeadInput = {
    where: ProjectScalarWhereInput
    data: XOR<ProjectUpdateManyMutationInput, ProjectUncheckedUpdateManyWithoutPcTeamLeadInput>
  }

  export type QABugUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: QABugWhereUniqueInput
    update: XOR<QABugUpdateWithoutAssignedToInput, QABugUncheckedUpdateWithoutAssignedToInput>
    create: XOR<QABugCreateWithoutAssignedToInput, QABugUncheckedCreateWithoutAssignedToInput>
  }

  export type QABugUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: QABugWhereUniqueInput
    data: XOR<QABugUpdateWithoutAssignedToInput, QABugUncheckedUpdateWithoutAssignedToInput>
  }

  export type QABugUpdateManyWithWhereWithoutAssignedToInput = {
    where: QABugScalarWhereInput
    data: XOR<QABugUpdateManyMutationInput, QABugUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type QABugScalarWhereInput = {
    AND?: QABugScalarWhereInput | QABugScalarWhereInput[]
    OR?: QABugScalarWhereInput[]
    NOT?: QABugScalarWhereInput | QABugScalarWhereInput[]
    id?: StringFilter<"QABug"> | string
    qaRoundId?: StringFilter<"QABug"> | string
    title?: StringFilter<"QABug"> | string
    description?: StringFilter<"QABug"> | string
    severity?: EnumBugSeverityFilter<"QABug"> | $Enums.BugSeverity
    status?: EnumBugStatusFilter<"QABug"> | $Enums.BugStatus
    foundAt?: DateTimeFilter<"QABug"> | Date | string
    fixedAt?: DateTimeNullableFilter<"QABug"> | Date | string | null
    assignedToId?: StringNullableFilter<"QABug"> | string | null
    screenshot?: StringNullableFilter<"QABug"> | string | null
    steps?: StringNullableFilter<"QABug"> | string | null
  }

  export type QATestingRoundUpsertWithWhereUniqueWithoutTestedByInput = {
    where: QATestingRoundWhereUniqueInput
    update: XOR<QATestingRoundUpdateWithoutTestedByInput, QATestingRoundUncheckedUpdateWithoutTestedByInput>
    create: XOR<QATestingRoundCreateWithoutTestedByInput, QATestingRoundUncheckedCreateWithoutTestedByInput>
  }

  export type QATestingRoundUpdateWithWhereUniqueWithoutTestedByInput = {
    where: QATestingRoundWhereUniqueInput
    data: XOR<QATestingRoundUpdateWithoutTestedByInput, QATestingRoundUncheckedUpdateWithoutTestedByInput>
  }

  export type QATestingRoundUpdateManyWithWhereWithoutTestedByInput = {
    where: QATestingRoundScalarWhereInput
    data: XOR<QATestingRoundUpdateManyMutationInput, QATestingRoundUncheckedUpdateManyWithoutTestedByInput>
  }

  export type QATestingRoundScalarWhereInput = {
    AND?: QATestingRoundScalarWhereInput | QATestingRoundScalarWhereInput[]
    OR?: QATestingRoundScalarWhereInput[]
    NOT?: QATestingRoundScalarWhereInput | QATestingRoundScalarWhereInput[]
    id?: StringFilter<"QATestingRound"> | string
    historyId?: StringFilter<"QATestingRound"> | string
    roundNumber?: IntFilter<"QATestingRound"> | number
    qaType?: EnumQATypeFilter<"QATestingRound"> | $Enums.QAType
    status?: EnumQAStatusFilter<"QATestingRound"> | $Enums.QAStatus
    startedAt?: DateTimeFilter<"QATestingRound"> | Date | string
    completedAt?: DateTimeNullableFilter<"QATestingRound"> | Date | string | null
    testedById?: StringFilter<"QATestingRound"> | string
    bugsFound?: IntFilter<"QATestingRound"> | number
    criticalBugs?: IntFilter<"QATestingRound"> | number
    testResults?: StringNullableFilter<"QATestingRound"> | string | null
    rejectionReason?: StringNullableFilter<"QATestingRound"> | string | null
  }

  export type TaskUpsertWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
    create: XOR<TaskCreateWithoutAssigneeInput, TaskUncheckedCreateWithoutAssigneeInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutAssigneeInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutAssigneeInput, TaskUncheckedUpdateWithoutAssigneeInput>
  }

  export type TaskUpdateManyWithWhereWithoutAssigneeInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutAssigneeInput>
  }

  export type TaskScalarWhereInput = {
    AND?: TaskScalarWhereInput | TaskScalarWhereInput[]
    OR?: TaskScalarWhereInput[]
    NOT?: TaskScalarWhereInput | TaskScalarWhereInput[]
    id?: StringFilter<"Task"> | string
    title?: StringFilter<"Task"> | string
    description?: StringNullableFilter<"Task"> | string | null
    status?: EnumTaskStatusFilter<"Task"> | $Enums.TaskStatus
    priority?: EnumPriorityFilter<"Task"> | $Enums.Priority
    dueDate?: DateTimeNullableFilter<"Task"> | Date | string | null
    assigneeId?: StringNullableFilter<"Task"> | string | null
    projectId?: StringFilter<"Task"> | string
    createdAt?: DateTimeFilter<"Task"> | Date | string
    updatedAt?: DateTimeFilter<"Task"> | Date | string
  }

  export type WorkflowApprovalUpsertWithWhereUniqueWithoutRequestedByInput = {
    where: WorkflowApprovalWhereUniqueInput
    update: XOR<WorkflowApprovalUpdateWithoutRequestedByInput, WorkflowApprovalUncheckedUpdateWithoutRequestedByInput>
    create: XOR<WorkflowApprovalCreateWithoutRequestedByInput, WorkflowApprovalUncheckedCreateWithoutRequestedByInput>
  }

  export type WorkflowApprovalUpdateWithWhereUniqueWithoutRequestedByInput = {
    where: WorkflowApprovalWhereUniqueInput
    data: XOR<WorkflowApprovalUpdateWithoutRequestedByInput, WorkflowApprovalUncheckedUpdateWithoutRequestedByInput>
  }

  export type WorkflowApprovalUpdateManyWithWhereWithoutRequestedByInput = {
    where: WorkflowApprovalScalarWhereInput
    data: XOR<WorkflowApprovalUpdateManyMutationInput, WorkflowApprovalUncheckedUpdateManyWithoutRequestedByInput>
  }

  export type WorkflowApprovalScalarWhereInput = {
    AND?: WorkflowApprovalScalarWhereInput | WorkflowApprovalScalarWhereInput[]
    OR?: WorkflowApprovalScalarWhereInput[]
    NOT?: WorkflowApprovalScalarWhereInput | WorkflowApprovalScalarWhereInput[]
    id?: StringFilter<"WorkflowApproval"> | string
    historyId?: StringFilter<"WorkflowApproval"> | string
    approvalType?: EnumApprovalTypeFilter<"WorkflowApproval"> | $Enums.ApprovalType
    status?: EnumApprovalStatusFilter<"WorkflowApproval"> | $Enums.ApprovalStatus
    requestedById?: StringFilter<"WorkflowApproval"> | string
    reviewedById?: StringNullableFilter<"WorkflowApproval"> | string | null
    requestedAt?: DateTimeFilter<"WorkflowApproval"> | Date | string
    reviewedAt?: DateTimeNullableFilter<"WorkflowApproval"> | Date | string | null
    comments?: StringNullableFilter<"WorkflowApproval"> | string | null
    rejectionReason?: StringNullableFilter<"WorkflowApproval"> | string | null
    attachments?: StringNullableListFilter<"WorkflowApproval">
  }

  export type WorkflowApprovalUpsertWithWhereUniqueWithoutReviewedByInput = {
    where: WorkflowApprovalWhereUniqueInput
    update: XOR<WorkflowApprovalUpdateWithoutReviewedByInput, WorkflowApprovalUncheckedUpdateWithoutReviewedByInput>
    create: XOR<WorkflowApprovalCreateWithoutReviewedByInput, WorkflowApprovalUncheckedCreateWithoutReviewedByInput>
  }

  export type WorkflowApprovalUpdateWithWhereUniqueWithoutReviewedByInput = {
    where: WorkflowApprovalWhereUniqueInput
    data: XOR<WorkflowApprovalUpdateWithoutReviewedByInput, WorkflowApprovalUncheckedUpdateWithoutReviewedByInput>
  }

  export type WorkflowApprovalUpdateManyWithWhereWithoutReviewedByInput = {
    where: WorkflowApprovalScalarWhereInput
    data: XOR<WorkflowApprovalUpdateManyMutationInput, WorkflowApprovalUncheckedUpdateManyWithoutReviewedByInput>
  }

  export type ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutPreviousUserInput = {
    where: ProjectAssignmentHistoryWhereUniqueInput
    update: XOR<ProjectAssignmentHistoryUpdateWithoutPreviousUserInput, ProjectAssignmentHistoryUncheckedUpdateWithoutPreviousUserInput>
    create: XOR<ProjectAssignmentHistoryCreateWithoutPreviousUserInput, ProjectAssignmentHistoryUncheckedCreateWithoutPreviousUserInput>
  }

  export type ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutPreviousUserInput = {
    where: ProjectAssignmentHistoryWhereUniqueInput
    data: XOR<ProjectAssignmentHistoryUpdateWithoutPreviousUserInput, ProjectAssignmentHistoryUncheckedUpdateWithoutPreviousUserInput>
  }

  export type ProjectAssignmentHistoryUpdateManyWithWhereWithoutPreviousUserInput = {
    where: ProjectAssignmentHistoryScalarWhereInput
    data: XOR<ProjectAssignmentHistoryUpdateManyMutationInput, ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserInput>
  }

  export type ProjectAssignmentHistoryScalarWhereInput = {
    AND?: ProjectAssignmentHistoryScalarWhereInput | ProjectAssignmentHistoryScalarWhereInput[]
    OR?: ProjectAssignmentHistoryScalarWhereInput[]
    NOT?: ProjectAssignmentHistoryScalarWhereInput | ProjectAssignmentHistoryScalarWhereInput[]
    id?: StringFilter<"ProjectAssignmentHistory"> | string
    projectId?: StringFilter<"ProjectAssignmentHistory"> | string
    assignmentType?: EnumProjectAssignmentTypeFilter<"ProjectAssignmentHistory"> | $Enums.ProjectAssignmentType
    previousUserId?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    newUserId?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    assignedById?: StringFilter<"ProjectAssignmentHistory"> | string
    assignedAt?: DateTimeFilter<"ProjectAssignmentHistory"> | Date | string
    reason?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
    notes?: StringNullableFilter<"ProjectAssignmentHistory"> | string | null
  }

  export type ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutAssignedByInput = {
    where: ProjectAssignmentHistoryWhereUniqueInput
    update: XOR<ProjectAssignmentHistoryUpdateWithoutAssignedByInput, ProjectAssignmentHistoryUncheckedUpdateWithoutAssignedByInput>
    create: XOR<ProjectAssignmentHistoryCreateWithoutAssignedByInput, ProjectAssignmentHistoryUncheckedCreateWithoutAssignedByInput>
  }

  export type ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutAssignedByInput = {
    where: ProjectAssignmentHistoryWhereUniqueInput
    data: XOR<ProjectAssignmentHistoryUpdateWithoutAssignedByInput, ProjectAssignmentHistoryUncheckedUpdateWithoutAssignedByInput>
  }

  export type ProjectAssignmentHistoryUpdateManyWithWhereWithoutAssignedByInput = {
    where: ProjectAssignmentHistoryScalarWhereInput
    data: XOR<ProjectAssignmentHistoryUpdateManyMutationInput, ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByInput>
  }

  export type CommentCreateWithoutProjectInput = {
    id?: string
    content: string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    task?: TaskCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutProjectInput = {
    id?: string
    content: string
    authorId: string
    taskId?: string | null
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutProjectInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentCreateManyProjectInputEnvelope = {
    data: CommentCreateManyProjectInput | CommentCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type CustomFieldCreateWithoutProjectInput = {
    id?: string
    fieldName: string
    fieldValue: string
  }

  export type CustomFieldUncheckedCreateWithoutProjectInput = {
    id?: string
    fieldName: string
    fieldValue: string
  }

  export type CustomFieldCreateOrConnectWithoutProjectInput = {
    where: CustomFieldWhereUniqueInput
    create: XOR<CustomFieldCreateWithoutProjectInput, CustomFieldUncheckedCreateWithoutProjectInput>
  }

  export type CustomFieldCreateManyProjectInputEnvelope = {
    data: CustomFieldCreateManyProjectInput | CustomFieldCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ProjectDepartmentHistoryCreateWithoutProjectInput = {
    id?: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionCreateNestedManyWithoutDepartmentHistoryInput
    movedBy: UserCreateNestedOneWithoutDepartmentTransitionsInput
    permissionGrantedBy?: UserCreateNestedOneWithoutDepartmentPermissionsInput
    qaRounds?: QATestingRoundCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput = {
    id?: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    permissionGrantedById?: string | null
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalUncheckedCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryCreateOrConnectWithoutProjectInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    create: XOR<ProjectDepartmentHistoryCreateWithoutProjectInput, ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput>
  }

  export type ProjectDepartmentHistoryCreateManyProjectInputEnvelope = {
    data: ProjectDepartmentHistoryCreateManyProjectInput | ProjectDepartmentHistoryCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutOwnedProjectsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutOwnedProjectsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutOwnedProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOwnedProjectsInput, UserUncheckedCreateWithoutOwnedProjectsInput>
  }

  export type UserCreateWithoutCoordinatedProjectsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutCoordinatedProjectsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutCoordinatedProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCoordinatedProjectsInput, UserUncheckedCreateWithoutCoordinatedProjectsInput>
  }

  export type UserCreateWithoutPcTeamLeadProjectsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutPcTeamLeadProjectsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutPcTeamLeadProjectsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPcTeamLeadProjectsInput, UserUncheckedCreateWithoutPcTeamLeadProjectsInput>
  }

  export type TaskCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentCreateNestedManyWithoutTaskInput
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
  }

  export type TaskUncheckedCreateWithoutProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    assigneeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    comments?: CommentUncheckedCreateNestedManyWithoutTaskInput
  }

  export type TaskCreateOrConnectWithoutProjectInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskCreateManyProjectInputEnvelope = {
    data: TaskCreateManyProjectInput | TaskCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type ProjectAssignmentHistoryCreateWithoutProjectInput = {
    id?: string
    assignmentType: $Enums.ProjectAssignmentType
    newUserId?: string | null
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
    previousUser?: UserCreateNestedOneWithoutAssignmentHistoryInput
    assignedBy: UserCreateNestedOneWithoutAssignmentsMadeInput
  }

  export type ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput = {
    id?: string
    assignmentType: $Enums.ProjectAssignmentType
    previousUserId?: string | null
    newUserId?: string | null
    assignedById: string
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
  }

  export type ProjectAssignmentHistoryCreateOrConnectWithoutProjectInput = {
    where: ProjectAssignmentHistoryWhereUniqueInput
    create: XOR<ProjectAssignmentHistoryCreateWithoutProjectInput, ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput>
  }

  export type ProjectAssignmentHistoryCreateManyProjectInputEnvelope = {
    data: ProjectAssignmentHistoryCreateManyProjectInput | ProjectAssignmentHistoryCreateManyProjectInput[]
    skipDuplicates?: boolean
  }

  export type CommentUpsertWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
    create: XOR<CommentCreateWithoutProjectInput, CommentUncheckedCreateWithoutProjectInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutProjectInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutProjectInput, CommentUncheckedUpdateWithoutProjectInput>
  }

  export type CommentUpdateManyWithWhereWithoutProjectInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutProjectInput>
  }

  export type CustomFieldUpsertWithWhereUniqueWithoutProjectInput = {
    where: CustomFieldWhereUniqueInput
    update: XOR<CustomFieldUpdateWithoutProjectInput, CustomFieldUncheckedUpdateWithoutProjectInput>
    create: XOR<CustomFieldCreateWithoutProjectInput, CustomFieldUncheckedCreateWithoutProjectInput>
  }

  export type CustomFieldUpdateWithWhereUniqueWithoutProjectInput = {
    where: CustomFieldWhereUniqueInput
    data: XOR<CustomFieldUpdateWithoutProjectInput, CustomFieldUncheckedUpdateWithoutProjectInput>
  }

  export type CustomFieldUpdateManyWithWhereWithoutProjectInput = {
    where: CustomFieldScalarWhereInput
    data: XOR<CustomFieldUpdateManyMutationInput, CustomFieldUncheckedUpdateManyWithoutProjectInput>
  }

  export type CustomFieldScalarWhereInput = {
    AND?: CustomFieldScalarWhereInput | CustomFieldScalarWhereInput[]
    OR?: CustomFieldScalarWhereInput[]
    NOT?: CustomFieldScalarWhereInput | CustomFieldScalarWhereInput[]
    id?: StringFilter<"CustomField"> | string
    fieldName?: StringFilter<"CustomField"> | string
    fieldValue?: StringFilter<"CustomField"> | string
    projectId?: StringFilter<"CustomField"> | string
  }

  export type ProjectDepartmentHistoryUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    update: XOR<ProjectDepartmentHistoryUpdateWithoutProjectInput, ProjectDepartmentHistoryUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectDepartmentHistoryCreateWithoutProjectInput, ProjectDepartmentHistoryUncheckedCreateWithoutProjectInput>
  }

  export type ProjectDepartmentHistoryUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    data: XOR<ProjectDepartmentHistoryUpdateWithoutProjectInput, ProjectDepartmentHistoryUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectDepartmentHistoryUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectDepartmentHistoryScalarWhereInput
    data: XOR<ProjectDepartmentHistoryUpdateManyMutationInput, ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectInput>
  }

  export type UserUpsertWithoutOwnedProjectsInput = {
    update: XOR<UserUpdateWithoutOwnedProjectsInput, UserUncheckedUpdateWithoutOwnedProjectsInput>
    create: XOR<UserCreateWithoutOwnedProjectsInput, UserUncheckedCreateWithoutOwnedProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOwnedProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOwnedProjectsInput, UserUncheckedUpdateWithoutOwnedProjectsInput>
  }

  export type UserUpdateWithoutOwnedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutOwnedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUpsertWithoutCoordinatedProjectsInput = {
    update: XOR<UserUpdateWithoutCoordinatedProjectsInput, UserUncheckedUpdateWithoutCoordinatedProjectsInput>
    create: XOR<UserCreateWithoutCoordinatedProjectsInput, UserUncheckedCreateWithoutCoordinatedProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCoordinatedProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCoordinatedProjectsInput, UserUncheckedUpdateWithoutCoordinatedProjectsInput>
  }

  export type UserUpdateWithoutCoordinatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCoordinatedProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUpsertWithoutPcTeamLeadProjectsInput = {
    update: XOR<UserUpdateWithoutPcTeamLeadProjectsInput, UserUncheckedUpdateWithoutPcTeamLeadProjectsInput>
    create: XOR<UserCreateWithoutPcTeamLeadProjectsInput, UserUncheckedCreateWithoutPcTeamLeadProjectsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPcTeamLeadProjectsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPcTeamLeadProjectsInput, UserUncheckedUpdateWithoutPcTeamLeadProjectsInput>
  }

  export type UserUpdateWithoutPcTeamLeadProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutPcTeamLeadProjectsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type TaskUpsertWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    update: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
    create: XOR<TaskCreateWithoutProjectInput, TaskUncheckedCreateWithoutProjectInput>
  }

  export type TaskUpdateWithWhereUniqueWithoutProjectInput = {
    where: TaskWhereUniqueInput
    data: XOR<TaskUpdateWithoutProjectInput, TaskUncheckedUpdateWithoutProjectInput>
  }

  export type TaskUpdateManyWithWhereWithoutProjectInput = {
    where: TaskScalarWhereInput
    data: XOR<TaskUpdateManyMutationInput, TaskUncheckedUpdateManyWithoutProjectInput>
  }

  export type ProjectAssignmentHistoryUpsertWithWhereUniqueWithoutProjectInput = {
    where: ProjectAssignmentHistoryWhereUniqueInput
    update: XOR<ProjectAssignmentHistoryUpdateWithoutProjectInput, ProjectAssignmentHistoryUncheckedUpdateWithoutProjectInput>
    create: XOR<ProjectAssignmentHistoryCreateWithoutProjectInput, ProjectAssignmentHistoryUncheckedCreateWithoutProjectInput>
  }

  export type ProjectAssignmentHistoryUpdateWithWhereUniqueWithoutProjectInput = {
    where: ProjectAssignmentHistoryWhereUniqueInput
    data: XOR<ProjectAssignmentHistoryUpdateWithoutProjectInput, ProjectAssignmentHistoryUncheckedUpdateWithoutProjectInput>
  }

  export type ProjectAssignmentHistoryUpdateManyWithWhereWithoutProjectInput = {
    where: ProjectAssignmentHistoryScalarWhereInput
    data: XOR<ProjectAssignmentHistoryUpdateManyMutationInput, ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectInput>
  }

  export type CommentCreateWithoutTaskInput = {
    id?: string
    content: string
    createdAt?: Date | string
    author: UserCreateNestedOneWithoutCommentsInput
    project?: ProjectCreateNestedOneWithoutCommentsInput
  }

  export type CommentUncheckedCreateWithoutTaskInput = {
    id?: string
    content: string
    authorId: string
    projectId?: string | null
    createdAt?: Date | string
  }

  export type CommentCreateOrConnectWithoutTaskInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput>
  }

  export type CommentCreateManyTaskInputEnvelope = {
    data: CommentCreateManyTaskInput | CommentCreateManyTaskInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutAssignedTasksInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutAssignedTasksInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutAssignedTasksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
  }

  export type ProjectCreateWithoutTasksInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    comments?: CommentCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryCreateNestedManyWithoutProjectInput
    owner: UserCreateNestedOneWithoutOwnedProjectsInput
    projectCoordinator?: UserCreateNestedOneWithoutCoordinatedProjectsInput
    pcTeamLead?: UserCreateNestedOneWithoutPcTeamLeadProjectsInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutTasksInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    pcTeamLeadId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldUncheckedCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutTasksInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
  }

  export type CommentUpsertWithWhereUniqueWithoutTaskInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutTaskInput, CommentUncheckedUpdateWithoutTaskInput>
    create: XOR<CommentCreateWithoutTaskInput, CommentUncheckedCreateWithoutTaskInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutTaskInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutTaskInput, CommentUncheckedUpdateWithoutTaskInput>
  }

  export type CommentUpdateManyWithWhereWithoutTaskInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutTaskInput>
  }

  export type UserUpsertWithoutAssignedTasksInput = {
    update: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
    create: XOR<UserCreateWithoutAssignedTasksInput, UserUncheckedCreateWithoutAssignedTasksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedTasksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedTasksInput, UserUncheckedUpdateWithoutAssignedTasksInput>
  }

  export type UserUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type ProjectUpsertWithoutTasksInput = {
    update: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
    create: XOR<ProjectCreateWithoutTasksInput, ProjectUncheckedCreateWithoutTasksInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutTasksInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutTasksInput, ProjectUncheckedUpdateWithoutTasksInput>
  }

  export type ProjectUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    comments?: CommentUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateManyWithoutProjectNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedProjectsNestedInput
    projectCoordinator?: UserUpdateOneWithoutCoordinatedProjectsNestedInput
    pcTeamLead?: UserUpdateOneWithoutPcTeamLeadProjectsNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutTasksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUncheckedUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type ProjectCreateWithoutCommentsInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    customFields?: CustomFieldCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryCreateNestedManyWithoutProjectInput
    owner: UserCreateNestedOneWithoutOwnedProjectsInput
    projectCoordinator?: UserCreateNestedOneWithoutCoordinatedProjectsInput
    pcTeamLead?: UserCreateNestedOneWithoutPcTeamLeadProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCommentsInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    pcTeamLeadId?: string | null
    customFields?: CustomFieldUncheckedCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCommentsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
  }

  export type TaskCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    assignee?: UserCreateNestedOneWithoutAssignedTasksInput
    project: ProjectCreateNestedOneWithoutTasksInput
  }

  export type TaskUncheckedCreateWithoutCommentsInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    assigneeId?: string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TaskCreateOrConnectWithoutCommentsInput = {
    where: TaskWhereUniqueInput
    create: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type ProjectUpsertWithoutCommentsInput = {
    update: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
    create: XOR<ProjectCreateWithoutCommentsInput, ProjectUncheckedCreateWithoutCommentsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutCommentsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutCommentsInput, ProjectUncheckedUpdateWithoutCommentsInput>
  }

  export type ProjectUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    customFields?: CustomFieldUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateManyWithoutProjectNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedProjectsNestedInput
    projectCoordinator?: UserUpdateOneWithoutCoordinatedProjectsNestedInput
    pcTeamLead?: UserUpdateOneWithoutPcTeamLeadProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    customFields?: CustomFieldUncheckedUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type TaskUpsertWithoutCommentsInput = {
    update: XOR<TaskUpdateWithoutCommentsInput, TaskUncheckedUpdateWithoutCommentsInput>
    create: XOR<TaskCreateWithoutCommentsInput, TaskUncheckedCreateWithoutCommentsInput>
    where?: TaskWhereInput
  }

  export type TaskUpdateToOneWithWhereWithoutCommentsInput = {
    where?: TaskWhereInput
    data: XOR<TaskUpdateWithoutCommentsInput, TaskUncheckedUpdateWithoutCommentsInput>
  }

  export type TaskUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectCreateWithoutCustomFieldsInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    comments?: CommentCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryCreateNestedManyWithoutProjectInput
    owner: UserCreateNestedOneWithoutOwnedProjectsInput
    projectCoordinator?: UserCreateNestedOneWithoutCoordinatedProjectsInput
    pcTeamLead?: UserCreateNestedOneWithoutPcTeamLeadProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutCustomFieldsInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    pcTeamLeadId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutCustomFieldsInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutCustomFieldsInput, ProjectUncheckedCreateWithoutCustomFieldsInput>
  }

  export type ProjectUpsertWithoutCustomFieldsInput = {
    update: XOR<ProjectUpdateWithoutCustomFieldsInput, ProjectUncheckedUpdateWithoutCustomFieldsInput>
    create: XOR<ProjectCreateWithoutCustomFieldsInput, ProjectUncheckedCreateWithoutCustomFieldsInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutCustomFieldsInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutCustomFieldsInput, ProjectUncheckedUpdateWithoutCustomFieldsInput>
  }

  export type ProjectUpdateWithoutCustomFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    comments?: CommentUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateManyWithoutProjectNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedProjectsNestedInput
    projectCoordinator?: UserUpdateOneWithoutCoordinatedProjectsNestedInput
    pcTeamLead?: UserUpdateOneWithoutPcTeamLeadProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutCustomFieldsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type DepartmentCorrectionCreateWithoutDepartmentHistoryInput = {
    id?: string
    correctionType: string
    description: string
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
    assignedTo?: UserCreateNestedOneWithoutAssignedCorrectionsInput
    requestedBy: UserCreateNestedOneWithoutRequestedCorrectionsInput
  }

  export type DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput = {
    id?: string
    correctionType: string
    description: string
    requestedById: string
    assignedToId?: string | null
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
  }

  export type DepartmentCorrectionCreateOrConnectWithoutDepartmentHistoryInput = {
    where: DepartmentCorrectionWhereUniqueInput
    create: XOR<DepartmentCorrectionCreateWithoutDepartmentHistoryInput, DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput>
  }

  export type DepartmentCorrectionCreateManyDepartmentHistoryInputEnvelope = {
    data: DepartmentCorrectionCreateManyDepartmentHistoryInput | DepartmentCorrectionCreateManyDepartmentHistoryInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDepartmentTransitionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutDepartmentTransitionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutDepartmentTransitionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentTransitionsInput, UserUncheckedCreateWithoutDepartmentTransitionsInput>
  }

  export type UserCreateWithoutDepartmentPermissionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutDepartmentPermissionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutDepartmentPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentPermissionsInput, UserUncheckedCreateWithoutDepartmentPermissionsInput>
  }

  export type ProjectCreateWithoutDepartmentHistoryInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    comments?: CommentCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldCreateNestedManyWithoutProjectInput
    owner: UserCreateNestedOneWithoutOwnedProjectsInput
    projectCoordinator?: UserCreateNestedOneWithoutCoordinatedProjectsInput
    pcTeamLead?: UserCreateNestedOneWithoutPcTeamLeadProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutDepartmentHistoryInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    pcTeamLeadId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutDepartmentHistoryInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutDepartmentHistoryInput, ProjectUncheckedCreateWithoutDepartmentHistoryInput>
  }

  export type QATestingRoundCreateWithoutDepartmentHistoryInput = {
    id?: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
    bugs?: QABugCreateNestedManyWithoutQaRoundInput
    testedBy: UserCreateNestedOneWithoutQaTestingRoundsInput
  }

  export type QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput = {
    id?: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    testedById: string
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
    bugs?: QABugUncheckedCreateNestedManyWithoutQaRoundInput
  }

  export type QATestingRoundCreateOrConnectWithoutDepartmentHistoryInput = {
    where: QATestingRoundWhereUniqueInput
    create: XOR<QATestingRoundCreateWithoutDepartmentHistoryInput, QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput>
  }

  export type QATestingRoundCreateManyDepartmentHistoryInputEnvelope = {
    data: QATestingRoundCreateManyDepartmentHistoryInput | QATestingRoundCreateManyDepartmentHistoryInput[]
    skipDuplicates?: boolean
  }

  export type WorkflowApprovalCreateWithoutDepartmentHistoryInput = {
    id?: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
    requestedBy: UserCreateNestedOneWithoutApprovalRequestsInput
    reviewedBy?: UserCreateNestedOneWithoutApprovalReviewsInput
  }

  export type WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput = {
    id?: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedById: string
    reviewedById?: string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
  }

  export type WorkflowApprovalCreateOrConnectWithoutDepartmentHistoryInput = {
    where: WorkflowApprovalWhereUniqueInput
    create: XOR<WorkflowApprovalCreateWithoutDepartmentHistoryInput, WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput>
  }

  export type WorkflowApprovalCreateManyDepartmentHistoryInputEnvelope = {
    data: WorkflowApprovalCreateManyDepartmentHistoryInput | WorkflowApprovalCreateManyDepartmentHistoryInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCorrectionUpsertWithWhereUniqueWithoutDepartmentHistoryInput = {
    where: DepartmentCorrectionWhereUniqueInput
    update: XOR<DepartmentCorrectionUpdateWithoutDepartmentHistoryInput, DepartmentCorrectionUncheckedUpdateWithoutDepartmentHistoryInput>
    create: XOR<DepartmentCorrectionCreateWithoutDepartmentHistoryInput, DepartmentCorrectionUncheckedCreateWithoutDepartmentHistoryInput>
  }

  export type DepartmentCorrectionUpdateWithWhereUniqueWithoutDepartmentHistoryInput = {
    where: DepartmentCorrectionWhereUniqueInput
    data: XOR<DepartmentCorrectionUpdateWithoutDepartmentHistoryInput, DepartmentCorrectionUncheckedUpdateWithoutDepartmentHistoryInput>
  }

  export type DepartmentCorrectionUpdateManyWithWhereWithoutDepartmentHistoryInput = {
    where: DepartmentCorrectionScalarWhereInput
    data: XOR<DepartmentCorrectionUpdateManyMutationInput, DepartmentCorrectionUncheckedUpdateManyWithoutDepartmentHistoryInput>
  }

  export type UserUpsertWithoutDepartmentTransitionsInput = {
    update: XOR<UserUpdateWithoutDepartmentTransitionsInput, UserUncheckedUpdateWithoutDepartmentTransitionsInput>
    create: XOR<UserCreateWithoutDepartmentTransitionsInput, UserUncheckedCreateWithoutDepartmentTransitionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDepartmentTransitionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDepartmentTransitionsInput, UserUncheckedUpdateWithoutDepartmentTransitionsInput>
  }

  export type UserUpdateWithoutDepartmentTransitionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentTransitionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUpsertWithoutDepartmentPermissionsInput = {
    update: XOR<UserUpdateWithoutDepartmentPermissionsInput, UserUncheckedUpdateWithoutDepartmentPermissionsInput>
    create: XOR<UserCreateWithoutDepartmentPermissionsInput, UserUncheckedCreateWithoutDepartmentPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDepartmentPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDepartmentPermissionsInput, UserUncheckedUpdateWithoutDepartmentPermissionsInput>
  }

  export type UserUpdateWithoutDepartmentPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type ProjectUpsertWithoutDepartmentHistoryInput = {
    update: XOR<ProjectUpdateWithoutDepartmentHistoryInput, ProjectUncheckedUpdateWithoutDepartmentHistoryInput>
    create: XOR<ProjectCreateWithoutDepartmentHistoryInput, ProjectUncheckedCreateWithoutDepartmentHistoryInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutDepartmentHistoryInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutDepartmentHistoryInput, ProjectUncheckedUpdateWithoutDepartmentHistoryInput>
  }

  export type ProjectUpdateWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    comments?: CommentUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUpdateManyWithoutProjectNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedProjectsNestedInput
    projectCoordinator?: UserUpdateOneWithoutCoordinatedProjectsNestedInput
    pcTeamLead?: UserUpdateOneWithoutPcTeamLeadProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type QATestingRoundUpsertWithWhereUniqueWithoutDepartmentHistoryInput = {
    where: QATestingRoundWhereUniqueInput
    update: XOR<QATestingRoundUpdateWithoutDepartmentHistoryInput, QATestingRoundUncheckedUpdateWithoutDepartmentHistoryInput>
    create: XOR<QATestingRoundCreateWithoutDepartmentHistoryInput, QATestingRoundUncheckedCreateWithoutDepartmentHistoryInput>
  }

  export type QATestingRoundUpdateWithWhereUniqueWithoutDepartmentHistoryInput = {
    where: QATestingRoundWhereUniqueInput
    data: XOR<QATestingRoundUpdateWithoutDepartmentHistoryInput, QATestingRoundUncheckedUpdateWithoutDepartmentHistoryInput>
  }

  export type QATestingRoundUpdateManyWithWhereWithoutDepartmentHistoryInput = {
    where: QATestingRoundScalarWhereInput
    data: XOR<QATestingRoundUpdateManyMutationInput, QATestingRoundUncheckedUpdateManyWithoutDepartmentHistoryInput>
  }

  export type WorkflowApprovalUpsertWithWhereUniqueWithoutDepartmentHistoryInput = {
    where: WorkflowApprovalWhereUniqueInput
    update: XOR<WorkflowApprovalUpdateWithoutDepartmentHistoryInput, WorkflowApprovalUncheckedUpdateWithoutDepartmentHistoryInput>
    create: XOR<WorkflowApprovalCreateWithoutDepartmentHistoryInput, WorkflowApprovalUncheckedCreateWithoutDepartmentHistoryInput>
  }

  export type WorkflowApprovalUpdateWithWhereUniqueWithoutDepartmentHistoryInput = {
    where: WorkflowApprovalWhereUniqueInput
    data: XOR<WorkflowApprovalUpdateWithoutDepartmentHistoryInput, WorkflowApprovalUncheckedUpdateWithoutDepartmentHistoryInput>
  }

  export type WorkflowApprovalUpdateManyWithWhereWithoutDepartmentHistoryInput = {
    where: WorkflowApprovalScalarWhereInput
    data: XOR<WorkflowApprovalUpdateManyMutationInput, WorkflowApprovalUncheckedUpdateManyWithoutDepartmentHistoryInput>
  }

  export type UserCreateWithoutAssignedCorrectionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutAssignedCorrectionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutAssignedCorrectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignedCorrectionsInput, UserUncheckedCreateWithoutAssignedCorrectionsInput>
  }

  export type ProjectDepartmentHistoryCreateWithoutCorrectionsInput = {
    id?: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    updatedAt?: Date | string
    movedBy: UserCreateNestedOneWithoutDepartmentTransitionsInput
    permissionGrantedBy?: UserCreateNestedOneWithoutDepartmentPermissionsInput
    project: ProjectCreateNestedOneWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryUncheckedCreateWithoutCorrectionsInput = {
    id?: string
    projectId: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    permissionGrantedById?: string | null
    updatedAt?: Date | string
    qaRounds?: QATestingRoundUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalUncheckedCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryCreateOrConnectWithoutCorrectionsInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    create: XOR<ProjectDepartmentHistoryCreateWithoutCorrectionsInput, ProjectDepartmentHistoryUncheckedCreateWithoutCorrectionsInput>
  }

  export type UserCreateWithoutRequestedCorrectionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutRequestedCorrectionsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutRequestedCorrectionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRequestedCorrectionsInput, UserUncheckedCreateWithoutRequestedCorrectionsInput>
  }

  export type UserUpsertWithoutAssignedCorrectionsInput = {
    update: XOR<UserUpdateWithoutAssignedCorrectionsInput, UserUncheckedUpdateWithoutAssignedCorrectionsInput>
    create: XOR<UserCreateWithoutAssignedCorrectionsInput, UserUncheckedCreateWithoutAssignedCorrectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignedCorrectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignedCorrectionsInput, UserUncheckedUpdateWithoutAssignedCorrectionsInput>
  }

  export type UserUpdateWithoutAssignedCorrectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignedCorrectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type ProjectDepartmentHistoryUpsertWithoutCorrectionsInput = {
    update: XOR<ProjectDepartmentHistoryUpdateWithoutCorrectionsInput, ProjectDepartmentHistoryUncheckedUpdateWithoutCorrectionsInput>
    create: XOR<ProjectDepartmentHistoryCreateWithoutCorrectionsInput, ProjectDepartmentHistoryUncheckedCreateWithoutCorrectionsInput>
    where?: ProjectDepartmentHistoryWhereInput
  }

  export type ProjectDepartmentHistoryUpdateToOneWithWhereWithoutCorrectionsInput = {
    where?: ProjectDepartmentHistoryWhereInput
    data: XOR<ProjectDepartmentHistoryUpdateWithoutCorrectionsInput, ProjectDepartmentHistoryUncheckedUpdateWithoutCorrectionsInput>
  }

  export type ProjectDepartmentHistoryUpdateWithoutCorrectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    movedBy?: UserUpdateOneRequiredWithoutDepartmentTransitionsNestedInput
    permissionGrantedBy?: UserUpdateOneWithoutDepartmentPermissionsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateWithoutCorrectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    movedById?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    permissionGrantedById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    qaRounds?: QATestingRoundUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type UserUpsertWithoutRequestedCorrectionsInput = {
    update: XOR<UserUpdateWithoutRequestedCorrectionsInput, UserUncheckedUpdateWithoutRequestedCorrectionsInput>
    create: XOR<UserCreateWithoutRequestedCorrectionsInput, UserUncheckedCreateWithoutRequestedCorrectionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutRequestedCorrectionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutRequestedCorrectionsInput, UserUncheckedUpdateWithoutRequestedCorrectionsInput>
  }

  export type UserUpdateWithoutRequestedCorrectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRequestedCorrectionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type ProjectDepartmentHistoryCreateWithoutApprovalsInput = {
    id?: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionCreateNestedManyWithoutDepartmentHistoryInput
    movedBy: UserCreateNestedOneWithoutDepartmentTransitionsInput
    permissionGrantedBy?: UserCreateNestedOneWithoutDepartmentPermissionsInput
    project: ProjectCreateNestedOneWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryUncheckedCreateWithoutApprovalsInput = {
    id?: string
    projectId: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    permissionGrantedById?: string | null
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    qaRounds?: QATestingRoundUncheckedCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryCreateOrConnectWithoutApprovalsInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    create: XOR<ProjectDepartmentHistoryCreateWithoutApprovalsInput, ProjectDepartmentHistoryUncheckedCreateWithoutApprovalsInput>
  }

  export type UserCreateWithoutApprovalRequestsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutApprovalRequestsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutApprovalRequestsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovalRequestsInput, UserUncheckedCreateWithoutApprovalRequestsInput>
  }

  export type UserCreateWithoutApprovalReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutApprovalReviewsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutApprovalReviewsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutApprovalReviewsInput, UserUncheckedCreateWithoutApprovalReviewsInput>
  }

  export type ProjectDepartmentHistoryUpsertWithoutApprovalsInput = {
    update: XOR<ProjectDepartmentHistoryUpdateWithoutApprovalsInput, ProjectDepartmentHistoryUncheckedUpdateWithoutApprovalsInput>
    create: XOR<ProjectDepartmentHistoryCreateWithoutApprovalsInput, ProjectDepartmentHistoryUncheckedCreateWithoutApprovalsInput>
    where?: ProjectDepartmentHistoryWhereInput
  }

  export type ProjectDepartmentHistoryUpdateToOneWithWhereWithoutApprovalsInput = {
    where?: ProjectDepartmentHistoryWhereInput
    data: XOR<ProjectDepartmentHistoryUpdateWithoutApprovalsInput, ProjectDepartmentHistoryUncheckedUpdateWithoutApprovalsInput>
  }

  export type ProjectDepartmentHistoryUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUpdateManyWithoutDepartmentHistoryNestedInput
    movedBy?: UserUpdateOneRequiredWithoutDepartmentTransitionsNestedInput
    permissionGrantedBy?: UserUpdateOneWithoutDepartmentPermissionsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateWithoutApprovalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    movedById?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    permissionGrantedById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type UserUpsertWithoutApprovalRequestsInput = {
    update: XOR<UserUpdateWithoutApprovalRequestsInput, UserUncheckedUpdateWithoutApprovalRequestsInput>
    create: XOR<UserCreateWithoutApprovalRequestsInput, UserUncheckedCreateWithoutApprovalRequestsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovalRequestsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovalRequestsInput, UserUncheckedUpdateWithoutApprovalRequestsInput>
  }

  export type UserUpdateWithoutApprovalRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovalRequestsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUpsertWithoutApprovalReviewsInput = {
    update: XOR<UserUpdateWithoutApprovalReviewsInput, UserUncheckedUpdateWithoutApprovalReviewsInput>
    create: XOR<UserCreateWithoutApprovalReviewsInput, UserUncheckedCreateWithoutApprovalReviewsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutApprovalReviewsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutApprovalReviewsInput, UserUncheckedUpdateWithoutApprovalReviewsInput>
  }

  export type UserUpdateWithoutApprovalReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutApprovalReviewsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type QABugCreateWithoutQaRoundInput = {
    id?: string
    title: string
    description: string
    severity?: $Enums.BugSeverity
    status?: $Enums.BugStatus
    foundAt?: Date | string
    fixedAt?: Date | string | null
    screenshot?: string | null
    steps?: string | null
    assignedTo?: UserCreateNestedOneWithoutBugAssignmentsInput
  }

  export type QABugUncheckedCreateWithoutQaRoundInput = {
    id?: string
    title: string
    description: string
    severity?: $Enums.BugSeverity
    status?: $Enums.BugStatus
    foundAt?: Date | string
    fixedAt?: Date | string | null
    assignedToId?: string | null
    screenshot?: string | null
    steps?: string | null
  }

  export type QABugCreateOrConnectWithoutQaRoundInput = {
    where: QABugWhereUniqueInput
    create: XOR<QABugCreateWithoutQaRoundInput, QABugUncheckedCreateWithoutQaRoundInput>
  }

  export type QABugCreateManyQaRoundInputEnvelope = {
    data: QABugCreateManyQaRoundInput | QABugCreateManyQaRoundInput[]
    skipDuplicates?: boolean
  }

  export type ProjectDepartmentHistoryCreateWithoutQaRoundsInput = {
    id?: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionCreateNestedManyWithoutDepartmentHistoryInput
    movedBy: UserCreateNestedOneWithoutDepartmentTransitionsInput
    permissionGrantedBy?: UserCreateNestedOneWithoutDepartmentPermissionsInput
    project: ProjectCreateNestedOneWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryUncheckedCreateWithoutQaRoundsInput = {
    id?: string
    projectId: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    permissionGrantedById?: string | null
    updatedAt?: Date | string
    corrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutDepartmentHistoryInput
    approvals?: WorkflowApprovalUncheckedCreateNestedManyWithoutDepartmentHistoryInput
  }

  export type ProjectDepartmentHistoryCreateOrConnectWithoutQaRoundsInput = {
    where: ProjectDepartmentHistoryWhereUniqueInput
    create: XOR<ProjectDepartmentHistoryCreateWithoutQaRoundsInput, ProjectDepartmentHistoryUncheckedCreateWithoutQaRoundsInput>
  }

  export type UserCreateWithoutQaTestingRoundsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutQaTestingRoundsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutQaTestingRoundsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQaTestingRoundsInput, UserUncheckedCreateWithoutQaTestingRoundsInput>
  }

  export type QABugUpsertWithWhereUniqueWithoutQaRoundInput = {
    where: QABugWhereUniqueInput
    update: XOR<QABugUpdateWithoutQaRoundInput, QABugUncheckedUpdateWithoutQaRoundInput>
    create: XOR<QABugCreateWithoutQaRoundInput, QABugUncheckedCreateWithoutQaRoundInput>
  }

  export type QABugUpdateWithWhereUniqueWithoutQaRoundInput = {
    where: QABugWhereUniqueInput
    data: XOR<QABugUpdateWithoutQaRoundInput, QABugUncheckedUpdateWithoutQaRoundInput>
  }

  export type QABugUpdateManyWithWhereWithoutQaRoundInput = {
    where: QABugScalarWhereInput
    data: XOR<QABugUpdateManyMutationInput, QABugUncheckedUpdateManyWithoutQaRoundInput>
  }

  export type ProjectDepartmentHistoryUpsertWithoutQaRoundsInput = {
    update: XOR<ProjectDepartmentHistoryUpdateWithoutQaRoundsInput, ProjectDepartmentHistoryUncheckedUpdateWithoutQaRoundsInput>
    create: XOR<ProjectDepartmentHistoryCreateWithoutQaRoundsInput, ProjectDepartmentHistoryUncheckedCreateWithoutQaRoundsInput>
    where?: ProjectDepartmentHistoryWhereInput
  }

  export type ProjectDepartmentHistoryUpdateToOneWithWhereWithoutQaRoundsInput = {
    where?: ProjectDepartmentHistoryWhereInput
    data: XOR<ProjectDepartmentHistoryUpdateWithoutQaRoundsInput, ProjectDepartmentHistoryUncheckedUpdateWithoutQaRoundsInput>
  }

  export type ProjectDepartmentHistoryUpdateWithoutQaRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUpdateManyWithoutDepartmentHistoryNestedInput
    movedBy?: UserUpdateOneRequiredWithoutDepartmentTransitionsNestedInput
    permissionGrantedBy?: UserUpdateOneWithoutDepartmentPermissionsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateWithoutQaRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    movedById?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    permissionGrantedById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type UserUpsertWithoutQaTestingRoundsInput = {
    update: XOR<UserUpdateWithoutQaTestingRoundsInput, UserUncheckedUpdateWithoutQaTestingRoundsInput>
    create: XOR<UserCreateWithoutQaTestingRoundsInput, UserUncheckedCreateWithoutQaTestingRoundsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQaTestingRoundsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQaTestingRoundsInput, UserUncheckedUpdateWithoutQaTestingRoundsInput>
  }

  export type UserUpdateWithoutQaTestingRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutQaTestingRoundsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type UserCreateWithoutBugAssignmentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutBugAssignmentsInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutBugAssignmentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBugAssignmentsInput, UserUncheckedCreateWithoutBugAssignmentsInput>
  }

  export type QATestingRoundCreateWithoutBugsInput = {
    id?: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
    departmentHistory: ProjectDepartmentHistoryCreateNestedOneWithoutQaRoundsInput
    testedBy: UserCreateNestedOneWithoutQaTestingRoundsInput
  }

  export type QATestingRoundUncheckedCreateWithoutBugsInput = {
    id?: string
    historyId: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    testedById: string
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
  }

  export type QATestingRoundCreateOrConnectWithoutBugsInput = {
    where: QATestingRoundWhereUniqueInput
    create: XOR<QATestingRoundCreateWithoutBugsInput, QATestingRoundUncheckedCreateWithoutBugsInput>
  }

  export type UserUpsertWithoutBugAssignmentsInput = {
    update: XOR<UserUpdateWithoutBugAssignmentsInput, UserUncheckedUpdateWithoutBugAssignmentsInput>
    create: XOR<UserCreateWithoutBugAssignmentsInput, UserUncheckedCreateWithoutBugAssignmentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBugAssignmentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBugAssignmentsInput, UserUncheckedUpdateWithoutBugAssignmentsInput>
  }

  export type UserUpdateWithoutBugAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutBugAssignmentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type QATestingRoundUpsertWithoutBugsInput = {
    update: XOR<QATestingRoundUpdateWithoutBugsInput, QATestingRoundUncheckedUpdateWithoutBugsInput>
    create: XOR<QATestingRoundCreateWithoutBugsInput, QATestingRoundUncheckedCreateWithoutBugsInput>
    where?: QATestingRoundWhereInput
  }

  export type QATestingRoundUpdateToOneWithWhereWithoutBugsInput = {
    where?: QATestingRoundWhereInput
    data: XOR<QATestingRoundUpdateWithoutBugsInput, QATestingRoundUncheckedUpdateWithoutBugsInput>
  }

  export type QATestingRoundUpdateWithoutBugsInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    departmentHistory?: ProjectDepartmentHistoryUpdateOneRequiredWithoutQaRoundsNestedInput
    testedBy?: UserUpdateOneRequiredWithoutQaTestingRoundsNestedInput
  }

  export type QATestingRoundUncheckedUpdateWithoutBugsInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    testedById?: StringFieldUpdateOperationsInput | string
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentMasterCreateWithoutChildrenInput = {
    id?: string
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: DepartmentMasterCreateNestedOneWithoutChildrenInput
    roles?: RoleMasterCreateNestedManyWithoutDepartmentInput
    users?: UserCreateNestedManyWithoutDepartmentMasterInput
  }

  export type DepartmentMasterUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    roles?: RoleMasterUncheckedCreateNestedManyWithoutDepartmentInput
    users?: UserUncheckedCreateNestedManyWithoutDepartmentMasterInput
  }

  export type DepartmentMasterCreateOrConnectWithoutChildrenInput = {
    where: DepartmentMasterWhereUniqueInput
    create: XOR<DepartmentMasterCreateWithoutChildrenInput, DepartmentMasterUncheckedCreateWithoutChildrenInput>
  }

  export type DepartmentMasterCreateWithoutParentInput = {
    id?: string
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: DepartmentMasterCreateNestedManyWithoutParentInput
    roles?: RoleMasterCreateNestedManyWithoutDepartmentInput
    users?: UserCreateNestedManyWithoutDepartmentMasterInput
  }

  export type DepartmentMasterUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: DepartmentMasterUncheckedCreateNestedManyWithoutParentInput
    roles?: RoleMasterUncheckedCreateNestedManyWithoutDepartmentInput
    users?: UserUncheckedCreateNestedManyWithoutDepartmentMasterInput
  }

  export type DepartmentMasterCreateOrConnectWithoutParentInput = {
    where: DepartmentMasterWhereUniqueInput
    create: XOR<DepartmentMasterCreateWithoutParentInput, DepartmentMasterUncheckedCreateWithoutParentInput>
  }

  export type DepartmentMasterCreateManyParentInputEnvelope = {
    data: DepartmentMasterCreateManyParentInput | DepartmentMasterCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type RoleMasterCreateWithoutDepartmentInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutRoleMasterInput
  }

  export type RoleMasterUncheckedCreateWithoutDepartmentInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutRoleMasterInput
  }

  export type RoleMasterCreateOrConnectWithoutDepartmentInput = {
    where: RoleMasterWhereUniqueInput
    create: XOR<RoleMasterCreateWithoutDepartmentInput, RoleMasterUncheckedCreateWithoutDepartmentInput>
  }

  export type RoleMasterCreateManyDepartmentInputEnvelope = {
    data: RoleMasterCreateManyDepartmentInput | RoleMasterCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutDepartmentMasterInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutDepartmentMasterInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutDepartmentMasterInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentMasterInput, UserUncheckedCreateWithoutDepartmentMasterInput>
  }

  export type UserCreateManyDepartmentMasterInputEnvelope = {
    data: UserCreateManyDepartmentMasterInput | UserCreateManyDepartmentMasterInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentMasterUpsertWithoutChildrenInput = {
    update: XOR<DepartmentMasterUpdateWithoutChildrenInput, DepartmentMasterUncheckedUpdateWithoutChildrenInput>
    create: XOR<DepartmentMasterCreateWithoutChildrenInput, DepartmentMasterUncheckedCreateWithoutChildrenInput>
    where?: DepartmentMasterWhereInput
  }

  export type DepartmentMasterUpdateToOneWithWhereWithoutChildrenInput = {
    where?: DepartmentMasterWhereInput
    data: XOR<DepartmentMasterUpdateWithoutChildrenInput, DepartmentMasterUncheckedUpdateWithoutChildrenInput>
  }

  export type DepartmentMasterUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: DepartmentMasterUpdateOneWithoutChildrenNestedInput
    roles?: RoleMasterUpdateManyWithoutDepartmentNestedInput
    users?: UserUpdateManyWithoutDepartmentMasterNestedInput
  }

  export type DepartmentMasterUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    roles?: RoleMasterUncheckedUpdateManyWithoutDepartmentNestedInput
    users?: UserUncheckedUpdateManyWithoutDepartmentMasterNestedInput
  }

  export type DepartmentMasterUpsertWithWhereUniqueWithoutParentInput = {
    where: DepartmentMasterWhereUniqueInput
    update: XOR<DepartmentMasterUpdateWithoutParentInput, DepartmentMasterUncheckedUpdateWithoutParentInput>
    create: XOR<DepartmentMasterCreateWithoutParentInput, DepartmentMasterUncheckedCreateWithoutParentInput>
  }

  export type DepartmentMasterUpdateWithWhereUniqueWithoutParentInput = {
    where: DepartmentMasterWhereUniqueInput
    data: XOR<DepartmentMasterUpdateWithoutParentInput, DepartmentMasterUncheckedUpdateWithoutParentInput>
  }

  export type DepartmentMasterUpdateManyWithWhereWithoutParentInput = {
    where: DepartmentMasterScalarWhereInput
    data: XOR<DepartmentMasterUpdateManyMutationInput, DepartmentMasterUncheckedUpdateManyWithoutParentInput>
  }

  export type DepartmentMasterScalarWhereInput = {
    AND?: DepartmentMasterScalarWhereInput | DepartmentMasterScalarWhereInput[]
    OR?: DepartmentMasterScalarWhereInput[]
    NOT?: DepartmentMasterScalarWhereInput | DepartmentMasterScalarWhereInput[]
    id?: StringFilter<"DepartmentMaster"> | string
    name?: StringFilter<"DepartmentMaster"> | string
    code?: StringFilter<"DepartmentMaster"> | string
    parentId?: StringNullableFilter<"DepartmentMaster"> | string | null
    isActive?: BoolFilter<"DepartmentMaster"> | boolean
    createdAt?: DateTimeFilter<"DepartmentMaster"> | Date | string
    updatedAt?: DateTimeFilter<"DepartmentMaster"> | Date | string
  }

  export type RoleMasterUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: RoleMasterWhereUniqueInput
    update: XOR<RoleMasterUpdateWithoutDepartmentInput, RoleMasterUncheckedUpdateWithoutDepartmentInput>
    create: XOR<RoleMasterCreateWithoutDepartmentInput, RoleMasterUncheckedCreateWithoutDepartmentInput>
  }

  export type RoleMasterUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: RoleMasterWhereUniqueInput
    data: XOR<RoleMasterUpdateWithoutDepartmentInput, RoleMasterUncheckedUpdateWithoutDepartmentInput>
  }

  export type RoleMasterUpdateManyWithWhereWithoutDepartmentInput = {
    where: RoleMasterScalarWhereInput
    data: XOR<RoleMasterUpdateManyMutationInput, RoleMasterUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type RoleMasterScalarWhereInput = {
    AND?: RoleMasterScalarWhereInput | RoleMasterScalarWhereInput[]
    OR?: RoleMasterScalarWhereInput[]
    NOT?: RoleMasterScalarWhereInput | RoleMasterScalarWhereInput[]
    id?: StringFilter<"RoleMaster"> | string
    name?: StringFilter<"RoleMaster"> | string
    code?: StringFilter<"RoleMaster"> | string
    description?: StringNullableFilter<"RoleMaster"> | string | null
    departmentId?: StringFilter<"RoleMaster"> | string
    isActive?: BoolFilter<"RoleMaster"> | boolean
    createdAt?: DateTimeFilter<"RoleMaster"> | Date | string
    updatedAt?: DateTimeFilter<"RoleMaster"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentMasterInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentMasterInput, UserUncheckedUpdateWithoutDepartmentMasterInput>
    create: XOR<UserCreateWithoutDepartmentMasterInput, UserUncheckedCreateWithoutDepartmentMasterInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentMasterInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentMasterInput, UserUncheckedUpdateWithoutDepartmentMasterInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentMasterInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentMasterInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    avatar?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    department?: EnumDepartmentNullableFilter<"User"> | $Enums.Department | null
    roleId?: StringNullableFilter<"User"> | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
  }

  export type DepartmentMasterCreateWithoutRolesInput = {
    id?: string
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: DepartmentMasterCreateNestedOneWithoutChildrenInput
    children?: DepartmentMasterCreateNestedManyWithoutParentInput
    users?: UserCreateNestedManyWithoutDepartmentMasterInput
  }

  export type DepartmentMasterUncheckedCreateWithoutRolesInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: DepartmentMasterUncheckedCreateNestedManyWithoutParentInput
    users?: UserUncheckedCreateNestedManyWithoutDepartmentMasterInput
  }

  export type DepartmentMasterCreateOrConnectWithoutRolesInput = {
    where: DepartmentMasterWhereUniqueInput
    create: XOR<DepartmentMasterCreateWithoutRolesInput, DepartmentMasterUncheckedCreateWithoutRolesInput>
  }

  export type UserCreateWithoutRoleMasterInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutRoleMasterInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutRoleMasterInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleMasterInput, UserUncheckedCreateWithoutRoleMasterInput>
  }

  export type UserCreateManyRoleMasterInputEnvelope = {
    data: UserCreateManyRoleMasterInput | UserCreateManyRoleMasterInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentMasterUpsertWithoutRolesInput = {
    update: XOR<DepartmentMasterUpdateWithoutRolesInput, DepartmentMasterUncheckedUpdateWithoutRolesInput>
    create: XOR<DepartmentMasterCreateWithoutRolesInput, DepartmentMasterUncheckedCreateWithoutRolesInput>
    where?: DepartmentMasterWhereInput
  }

  export type DepartmentMasterUpdateToOneWithWhereWithoutRolesInput = {
    where?: DepartmentMasterWhereInput
    data: XOR<DepartmentMasterUpdateWithoutRolesInput, DepartmentMasterUncheckedUpdateWithoutRolesInput>
  }

  export type DepartmentMasterUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: DepartmentMasterUpdateOneWithoutChildrenNestedInput
    children?: DepartmentMasterUpdateManyWithoutParentNestedInput
    users?: UserUpdateManyWithoutDepartmentMasterNestedInput
  }

  export type DepartmentMasterUncheckedUpdateWithoutRolesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: DepartmentMasterUncheckedUpdateManyWithoutParentNestedInput
    users?: UserUncheckedUpdateManyWithoutDepartmentMasterNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutRoleMasterInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleMasterInput, UserUncheckedUpdateWithoutRoleMasterInput>
    create: XOR<UserCreateWithoutRoleMasterInput, UserUncheckedCreateWithoutRoleMasterInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleMasterInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleMasterInput, UserUncheckedUpdateWithoutRoleMasterInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleMasterInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleMasterInput>
  }

  export type ProjectCreateWithoutAssignmentHistoryInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    comments?: CommentCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryCreateNestedManyWithoutProjectInput
    owner: UserCreateNestedOneWithoutOwnedProjectsInput
    projectCoordinator?: UserCreateNestedOneWithoutCoordinatedProjectsInput
    pcTeamLead?: UserCreateNestedOneWithoutPcTeamLeadProjectsInput
    tasks?: TaskCreateNestedManyWithoutProjectInput
  }

  export type ProjectUncheckedCreateWithoutAssignmentHistoryInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    pcTeamLeadId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutProjectInput
    customFields?: CustomFieldUncheckedCreateNestedManyWithoutProjectInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutProjectInput
    tasks?: TaskUncheckedCreateNestedManyWithoutProjectInput
  }

  export type ProjectCreateOrConnectWithoutAssignmentHistoryInput = {
    where: ProjectWhereUniqueInput
    create: XOR<ProjectCreateWithoutAssignmentHistoryInput, ProjectUncheckedCreateWithoutAssignmentHistoryInput>
  }

  export type UserCreateWithoutAssignmentHistoryInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentsMade?: ProjectAssignmentHistoryCreateNestedManyWithoutAssignedByInput
  }

  export type UserUncheckedCreateWithoutAssignmentHistoryInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutAssignedByInput
  }

  export type UserCreateOrConnectWithoutAssignmentHistoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentHistoryInput, UserUncheckedCreateWithoutAssignmentHistoryInput>
  }

  export type UserCreateWithoutAssignmentsMadeInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleMaster?: RoleMasterCreateNestedOneWithoutUsersInput
    departmentMaster?: DepartmentMasterCreateNestedOneWithoutUsersInput
    comments?: CommentCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryCreateNestedManyWithoutPreviousUserInput
  }

  export type UserUncheckedCreateWithoutAssignmentsMadeInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
    departmentId?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutAuthorInput
    assignedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutAssignedToInput
    requestedCorrections?: DepartmentCorrectionUncheckedCreateNestedManyWithoutRequestedByInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutMovedByInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedCreateNestedManyWithoutPermissionGrantedByInput
    ownedProjects?: ProjectUncheckedCreateNestedManyWithoutOwnerInput
    coordinatedProjects?: ProjectUncheckedCreateNestedManyWithoutProjectCoordinatorInput
    pcTeamLeadProjects?: ProjectUncheckedCreateNestedManyWithoutPcTeamLeadInput
    bugAssignments?: QABugUncheckedCreateNestedManyWithoutAssignedToInput
    qaTestingRounds?: QATestingRoundUncheckedCreateNestedManyWithoutTestedByInput
    assignedTasks?: TaskUncheckedCreateNestedManyWithoutAssigneeInput
    approvalRequests?: WorkflowApprovalUncheckedCreateNestedManyWithoutRequestedByInput
    approvalReviews?: WorkflowApprovalUncheckedCreateNestedManyWithoutReviewedByInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedCreateNestedManyWithoutPreviousUserInput
  }

  export type UserCreateOrConnectWithoutAssignmentsMadeInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAssignmentsMadeInput, UserUncheckedCreateWithoutAssignmentsMadeInput>
  }

  export type ProjectUpsertWithoutAssignmentHistoryInput = {
    update: XOR<ProjectUpdateWithoutAssignmentHistoryInput, ProjectUncheckedUpdateWithoutAssignmentHistoryInput>
    create: XOR<ProjectCreateWithoutAssignmentHistoryInput, ProjectUncheckedCreateWithoutAssignmentHistoryInput>
    where?: ProjectWhereInput
  }

  export type ProjectUpdateToOneWithWhereWithoutAssignmentHistoryInput = {
    where?: ProjectWhereInput
    data: XOR<ProjectUpdateWithoutAssignmentHistoryInput, ProjectUncheckedUpdateWithoutAssignmentHistoryInput>
  }

  export type ProjectUpdateWithoutAssignmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    comments?: CommentUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateManyWithoutProjectNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedProjectsNestedInput
    projectCoordinator?: UserUpdateOneWithoutCoordinatedProjectsNestedInput
    pcTeamLead?: UserUpdateOneWithoutPcTeamLeadProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutAssignmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUncheckedUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type UserUpsertWithoutAssignmentHistoryInput = {
    update: XOR<UserUpdateWithoutAssignmentHistoryInput, UserUncheckedUpdateWithoutAssignmentHistoryInput>
    create: XOR<UserCreateWithoutAssignmentHistoryInput, UserUncheckedCreateWithoutAssignmentHistoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignmentHistoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignmentHistoryInput, UserUncheckedUpdateWithoutAssignmentHistoryInput>
  }

  export type UserUpdateWithoutAssignmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUpsertWithoutAssignmentsMadeInput = {
    update: XOR<UserUpdateWithoutAssignmentsMadeInput, UserUncheckedUpdateWithoutAssignmentsMadeInput>
    create: XOR<UserCreateWithoutAssignmentsMadeInput, UserUncheckedCreateWithoutAssignmentsMadeInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAssignmentsMadeInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAssignmentsMadeInput, UserUncheckedUpdateWithoutAssignmentsMadeInput>
  }

  export type UserUpdateWithoutAssignmentsMadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAssignmentsMadeInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
  }

  export type CommentCreateManyAuthorInput = {
    id?: string
    content: string
    projectId?: string | null
    taskId?: string | null
    createdAt?: Date | string
  }

  export type DepartmentCorrectionCreateManyAssignedToInput = {
    id?: string
    historyId: string
    correctionType: string
    description: string
    requestedById: string
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
  }

  export type DepartmentCorrectionCreateManyRequestedByInput = {
    id?: string
    historyId: string
    correctionType: string
    description: string
    assignedToId?: string | null
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
  }

  export type ProjectDepartmentHistoryCreateManyMovedByInput = {
    id?: string
    projectId: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    permissionGrantedById?: string | null
    updatedAt?: Date | string
  }

  export type ProjectDepartmentHistoryCreateManyPermissionGrantedByInput = {
    id?: string
    projectId: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    updatedAt?: Date | string
  }

  export type ProjectCreateManyOwnerInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
    pcTeamLeadId?: string | null
  }

  export type ProjectCreateManyProjectCoordinatorInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    pcTeamLeadId?: string | null
  }

  export type ProjectCreateManyPcTeamLeadInput = {
    id?: string
    name: string
    office: string
    category: $Enums.ProjectCategory
    pagesCount?: number | null
    targetDate: Date | string
    status?: $Enums.ProjectStatus
    ownerId: string
    clientName?: string | null
    observations?: string | null
    monthsPassed?: number
    startDate?: Date | string
    deviationReason?: string | null
    dependency?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    currentDepartment?: $Enums.Department
    nextDepartment?: $Enums.Department | null
    projectCode?: string
    projectCoordinatorId?: string | null
  }

  export type QABugCreateManyAssignedToInput = {
    id?: string
    qaRoundId: string
    title: string
    description: string
    severity?: $Enums.BugSeverity
    status?: $Enums.BugStatus
    foundAt?: Date | string
    fixedAt?: Date | string | null
    screenshot?: string | null
    steps?: string | null
  }

  export type QATestingRoundCreateManyTestedByInput = {
    id?: string
    historyId: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
  }

  export type TaskCreateManyAssigneeInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    projectId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WorkflowApprovalCreateManyRequestedByInput = {
    id?: string
    historyId: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    reviewedById?: string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
  }

  export type WorkflowApprovalCreateManyReviewedByInput = {
    id?: string
    historyId: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedById: string
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
  }

  export type ProjectAssignmentHistoryCreateManyPreviousUserInput = {
    id?: string
    projectId: string
    assignmentType: $Enums.ProjectAssignmentType
    newUserId?: string | null
    assignedById: string
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
  }

  export type ProjectAssignmentHistoryCreateManyAssignedByInput = {
    id?: string
    projectId: string
    assignmentType: $Enums.ProjectAssignmentType
    previousUserId?: string | null
    newUserId?: string | null
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
  }

  export type CommentUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    project?: ProjectUpdateOneWithoutCommentsNestedInput
    task?: TaskUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutAuthorInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCorrectionUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
    departmentHistory?: ProjectDepartmentHistoryUpdateOneRequiredWithoutCorrectionsNestedInput
    requestedBy?: UserUpdateOneRequiredWithoutRequestedCorrectionsNestedInput
  }

  export type DepartmentCorrectionUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DepartmentCorrectionUpdateWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
    assignedTo?: UserUpdateOneWithoutAssignedCorrectionsNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateOneRequiredWithoutCorrectionsNestedInput
  }

  export type DepartmentCorrectionUncheckedUpdateWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProjectDepartmentHistoryUpdateWithoutMovedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUpdateManyWithoutDepartmentHistoryNestedInput
    permissionGrantedBy?: UserUpdateOneWithoutDepartmentPermissionsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateWithoutMovedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    permissionGrantedById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    permissionGrantedById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectDepartmentHistoryUpdateWithoutPermissionGrantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUpdateManyWithoutDepartmentHistoryNestedInput
    movedBy?: UserUpdateOneRequiredWithoutDepartmentTransitionsNestedInput
    project?: ProjectUpdateOneRequiredWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateWithoutPermissionGrantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    movedById?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    movedById?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    comments?: CommentUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateManyWithoutProjectNestedInput
    projectCoordinator?: UserUpdateOneWithoutCoordinatedProjectsNestedInput
    pcTeamLead?: UserUpdateOneWithoutPcTeamLeadProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUncheckedUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutOwnerInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUpdateWithoutProjectCoordinatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    comments?: CommentUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateManyWithoutProjectNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedProjectsNestedInput
    pcTeamLead?: UserUpdateOneWithoutPcTeamLeadProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutProjectCoordinatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUncheckedUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutProjectCoordinatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    pcTeamLeadId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectUpdateWithoutPcTeamLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    comments?: CommentUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateManyWithoutProjectNestedInput
    owner?: UserUpdateOneRequiredWithoutOwnedProjectsNestedInput
    projectCoordinator?: UserUpdateOneWithoutCoordinatedProjectsNestedInput
    tasks?: TaskUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateWithoutPcTeamLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutProjectNestedInput
    customFields?: CustomFieldUncheckedUpdateManyWithoutProjectNestedInput
    departmentHistory?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
    tasks?: TaskUncheckedUpdateManyWithoutProjectNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectNestedInput
  }

  export type ProjectUncheckedUpdateManyWithoutPcTeamLeadInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    office?: StringFieldUpdateOperationsInput | string
    category?: EnumProjectCategoryFieldUpdateOperationsInput | $Enums.ProjectCategory
    pagesCount?: NullableIntFieldUpdateOperationsInput | number | null
    targetDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumProjectStatusFieldUpdateOperationsInput | $Enums.ProjectStatus
    ownerId?: StringFieldUpdateOperationsInput | string
    clientName?: NullableStringFieldUpdateOperationsInput | string | null
    observations?: NullableStringFieldUpdateOperationsInput | string | null
    monthsPassed?: IntFieldUpdateOperationsInput | number
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    deviationReason?: NullableStringFieldUpdateOperationsInput | string | null
    dependency?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    currentDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    nextDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    projectCode?: StringFieldUpdateOperationsInput | string
    projectCoordinatorId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QABugUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    qaRound?: QATestingRoundUpdateOneRequiredWithoutBugsNestedInput
  }

  export type QABugUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    qaRoundId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QABugUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    qaRoundId?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QATestingRoundUpdateWithoutTestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    bugs?: QABugUpdateManyWithoutQaRoundNestedInput
    departmentHistory?: ProjectDepartmentHistoryUpdateOneRequiredWithoutQaRoundsNestedInput
  }

  export type QATestingRoundUncheckedUpdateWithoutTestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    bugs?: QABugUncheckedUpdateManyWithoutQaRoundNestedInput
  }

  export type QATestingRoundUncheckedUpdateManyWithoutTestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TaskUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutTaskNestedInput
    project?: ProjectUpdateOneRequiredWithoutTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutAssigneeInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    projectId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WorkflowApprovalUpdateWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
    departmentHistory?: ProjectDepartmentHistoryUpdateOneRequiredWithoutApprovalsNestedInput
    reviewedBy?: UserUpdateOneWithoutApprovalReviewsNestedInput
  }

  export type WorkflowApprovalUncheckedUpdateWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
  }

  export type WorkflowApprovalUncheckedUpdateManyWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
  }

  export type WorkflowApprovalUpdateWithoutReviewedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
    departmentHistory?: ProjectDepartmentHistoryUpdateOneRequiredWithoutApprovalsNestedInput
    requestedBy?: UserUpdateOneRequiredWithoutApprovalRequestsNestedInput
  }

  export type WorkflowApprovalUncheckedUpdateWithoutReviewedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedById?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
  }

  export type WorkflowApprovalUncheckedUpdateManyWithoutReviewedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    historyId?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedById?: StringFieldUpdateOperationsInput | string
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
  }

  export type ProjectAssignmentHistoryUpdateWithoutPreviousUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutAssignmentHistoryNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignmentsMadeNestedInput
  }

  export type ProjectAssignmentHistoryUncheckedUpdateWithoutPreviousUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectAssignmentHistoryUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    project?: ProjectUpdateOneRequiredWithoutAssignmentHistoryNestedInput
    previousUser?: UserUpdateOneWithoutAssignmentHistoryNestedInput
  }

  export type ProjectAssignmentHistoryUncheckedUpdateWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    previousUserId?: NullableStringFieldUpdateOperationsInput | string | null
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    projectId?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    previousUserId?: NullableStringFieldUpdateOperationsInput | string | null
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyProjectInput = {
    id?: string
    content: string
    authorId: string
    taskId?: string | null
    createdAt?: Date | string
  }

  export type CustomFieldCreateManyProjectInput = {
    id?: string
    fieldName: string
    fieldValue: string
  }

  export type ProjectDepartmentHistoryCreateManyProjectInput = {
    id?: string
    fromDepartment?: $Enums.Department | null
    toDepartment: $Enums.Department
    movedById: string
    notes?: string | null
    createdAt?: Date | string
    workStatus?: $Enums.DepartmentWorkStatus
    workStartDate?: Date | string | null
    workEndDate?: Date | string | null
    estimatedDays?: number | null
    actualDays?: number | null
    correctionCount?: number
    permissionGrantedById?: string | null
    updatedAt?: Date | string
  }

  export type TaskCreateManyProjectInput = {
    id?: string
    title: string
    description?: string | null
    status?: $Enums.TaskStatus
    priority?: $Enums.Priority
    dueDate?: Date | string | null
    assigneeId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProjectAssignmentHistoryCreateManyProjectInput = {
    id?: string
    assignmentType: $Enums.ProjectAssignmentType
    previousUserId?: string | null
    newUserId?: string | null
    assignedById: string
    assignedAt?: Date | string
    reason?: string | null
    notes?: string | null
  }

  export type CommentUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    task?: TaskUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    taskId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomFieldUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type CustomFieldUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type CustomFieldUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    fieldName?: StringFieldUpdateOperationsInput | string
    fieldValue?: StringFieldUpdateOperationsInput | string
  }

  export type ProjectDepartmentHistoryUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUpdateManyWithoutDepartmentHistoryNestedInput
    movedBy?: UserUpdateOneRequiredWithoutDepartmentTransitionsNestedInput
    permissionGrantedBy?: UserUpdateOneWithoutDepartmentPermissionsNestedInput
    qaRounds?: QATestingRoundUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    movedById?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    permissionGrantedById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    corrections?: DepartmentCorrectionUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    qaRounds?: QATestingRoundUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
    approvals?: WorkflowApprovalUncheckedUpdateManyWithoutDepartmentHistoryNestedInput
  }

  export type ProjectDepartmentHistoryUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    fromDepartment?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    toDepartment?: EnumDepartmentFieldUpdateOperationsInput | $Enums.Department
    movedById?: StringFieldUpdateOperationsInput | string
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    workStatus?: EnumDepartmentWorkStatusFieldUpdateOperationsInput | $Enums.DepartmentWorkStatus
    workStartDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    workEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    estimatedDays?: NullableIntFieldUpdateOperationsInput | number | null
    actualDays?: NullableIntFieldUpdateOperationsInput | number | null
    correctionCount?: IntFieldUpdateOperationsInput | number
    permissionGrantedById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TaskUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUpdateManyWithoutTaskNestedInput
    assignee?: UserUpdateOneWithoutAssignedTasksNestedInput
  }

  export type TaskUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    comments?: CommentUncheckedUpdateManyWithoutTaskNestedInput
  }

  export type TaskUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumTaskStatusFieldUpdateOperationsInput | $Enums.TaskStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assigneeId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProjectAssignmentHistoryUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    previousUser?: UserUpdateOneWithoutAssignmentHistoryNestedInput
    assignedBy?: UserUpdateOneRequiredWithoutAssignmentsMadeNestedInput
  }

  export type ProjectAssignmentHistoryUncheckedUpdateWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    previousUserId?: NullableStringFieldUpdateOperationsInput | string | null
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProjectAssignmentHistoryUncheckedUpdateManyWithoutProjectInput = {
    id?: StringFieldUpdateOperationsInput | string
    assignmentType?: EnumProjectAssignmentTypeFieldUpdateOperationsInput | $Enums.ProjectAssignmentType
    previousUserId?: NullableStringFieldUpdateOperationsInput | string | null
    newUserId?: NullableStringFieldUpdateOperationsInput | string | null
    assignedById?: StringFieldUpdateOperationsInput | string
    assignedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentCreateManyTaskInput = {
    id?: string
    content: string
    authorId: string
    projectId?: string | null
    createdAt?: Date | string
  }

  export type CommentUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    author?: UserUpdateOneRequiredWithoutCommentsNestedInput
    project?: ProjectUpdateOneWithoutCommentsNestedInput
  }

  export type CommentUncheckedUpdateWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CommentUncheckedUpdateManyWithoutTaskInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    authorId?: StringFieldUpdateOperationsInput | string
    projectId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentCorrectionCreateManyDepartmentHistoryInput = {
    id?: string
    correctionType: string
    description: string
    requestedById: string
    assignedToId?: string | null
    status?: $Enums.CorrectionStatus
    priority?: $Enums.Priority
    requestedAt?: Date | string
    resolvedAt?: Date | string | null
    resolutionNotes?: string | null
    estimatedHours?: number | null
    actualHours?: number | null
  }

  export type QATestingRoundCreateManyDepartmentHistoryInput = {
    id?: string
    roundNumber: number
    qaType: $Enums.QAType
    status?: $Enums.QAStatus
    startedAt?: Date | string
    completedAt?: Date | string | null
    testedById: string
    bugsFound?: number
    criticalBugs?: number
    testResults?: string | null
    rejectionReason?: string | null
  }

  export type WorkflowApprovalCreateManyDepartmentHistoryInput = {
    id?: string
    approvalType: $Enums.ApprovalType
    status?: $Enums.ApprovalStatus
    requestedById: string
    reviewedById?: string | null
    requestedAt?: Date | string
    reviewedAt?: Date | string | null
    comments?: string | null
    rejectionReason?: string | null
    attachments?: WorkflowApprovalCreateattachmentsInput | string[]
  }

  export type DepartmentCorrectionUpdateWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
    assignedTo?: UserUpdateOneWithoutAssignedCorrectionsNestedInput
    requestedBy?: UserUpdateOneRequiredWithoutRequestedCorrectionsNestedInput
  }

  export type DepartmentCorrectionUncheckedUpdateWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type DepartmentCorrectionUncheckedUpdateManyWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    correctionType?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumCorrectionStatusFieldUpdateOperationsInput | $Enums.CorrectionStatus
    priority?: EnumPriorityFieldUpdateOperationsInput | $Enums.Priority
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    resolvedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    resolutionNotes?: NullableStringFieldUpdateOperationsInput | string | null
    estimatedHours?: NullableIntFieldUpdateOperationsInput | number | null
    actualHours?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type QATestingRoundUpdateWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    bugs?: QABugUpdateManyWithoutQaRoundNestedInput
    testedBy?: UserUpdateOneRequiredWithoutQaTestingRoundsNestedInput
  }

  export type QATestingRoundUncheckedUpdateWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    testedById?: StringFieldUpdateOperationsInput | string
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    bugs?: QABugUncheckedUpdateManyWithoutQaRoundNestedInput
  }

  export type QATestingRoundUncheckedUpdateManyWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    roundNumber?: IntFieldUpdateOperationsInput | number
    qaType?: EnumQATypeFieldUpdateOperationsInput | $Enums.QAType
    status?: EnumQAStatusFieldUpdateOperationsInput | $Enums.QAStatus
    startedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    testedById?: StringFieldUpdateOperationsInput | string
    bugsFound?: IntFieldUpdateOperationsInput | number
    criticalBugs?: IntFieldUpdateOperationsInput | number
    testResults?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WorkflowApprovalUpdateWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
    requestedBy?: UserUpdateOneRequiredWithoutApprovalRequestsNestedInput
    reviewedBy?: UserUpdateOneWithoutApprovalReviewsNestedInput
  }

  export type WorkflowApprovalUncheckedUpdateWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedById?: StringFieldUpdateOperationsInput | string
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
  }

  export type WorkflowApprovalUncheckedUpdateManyWithoutDepartmentHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    approvalType?: EnumApprovalTypeFieldUpdateOperationsInput | $Enums.ApprovalType
    status?: EnumApprovalStatusFieldUpdateOperationsInput | $Enums.ApprovalStatus
    requestedById?: StringFieldUpdateOperationsInput | string
    reviewedById?: NullableStringFieldUpdateOperationsInput | string | null
    requestedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reviewedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    comments?: NullableStringFieldUpdateOperationsInput | string | null
    rejectionReason?: NullableStringFieldUpdateOperationsInput | string | null
    attachments?: WorkflowApprovalUpdateattachmentsInput | string[]
  }

  export type QABugCreateManyQaRoundInput = {
    id?: string
    title: string
    description: string
    severity?: $Enums.BugSeverity
    status?: $Enums.BugStatus
    foundAt?: Date | string
    fixedAt?: Date | string | null
    assignedToId?: string | null
    screenshot?: string | null
    steps?: string | null
  }

  export type QABugUpdateWithoutQaRoundInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
    assignedTo?: UserUpdateOneWithoutBugAssignmentsNestedInput
  }

  export type QABugUncheckedUpdateWithoutQaRoundInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type QABugUncheckedUpdateManyWithoutQaRoundInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    severity?: EnumBugSeverityFieldUpdateOperationsInput | $Enums.BugSeverity
    status?: EnumBugStatusFieldUpdateOperationsInput | $Enums.BugStatus
    foundAt?: DateTimeFieldUpdateOperationsInput | Date | string
    fixedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    screenshot?: NullableStringFieldUpdateOperationsInput | string | null
    steps?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentMasterCreateManyParentInput = {
    id?: string
    name: string
    code: string
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type RoleMasterCreateManyDepartmentInput = {
    id?: string
    name: string
    code: string
    description?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateManyDepartmentMasterInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    roleId?: string | null
  }

  export type DepartmentMasterUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: DepartmentMasterUpdateManyWithoutParentNestedInput
    roles?: RoleMasterUpdateManyWithoutDepartmentNestedInput
    users?: UserUpdateManyWithoutDepartmentMasterNestedInput
  }

  export type DepartmentMasterUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: DepartmentMasterUncheckedUpdateManyWithoutParentNestedInput
    roles?: RoleMasterUncheckedUpdateManyWithoutDepartmentNestedInput
    users?: UserUncheckedUpdateManyWithoutDepartmentMasterNestedInput
  }

  export type DepartmentMasterUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type RoleMasterUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutRoleMasterNestedInput
  }

  export type RoleMasterUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutRoleMasterNestedInput
  }

  export type RoleMasterUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutDepartmentMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleMaster?: RoleMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyRoleMasterInput = {
    id?: string
    email: string
    name: string
    password: string
    role?: $Enums.Role
    avatar?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    department?: $Enums.Department | null
    departmentId?: string | null
  }

  export type UserUpdateWithoutRoleMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    departmentMaster?: DepartmentMasterUpdateOneWithoutUsersNestedInput
    comments?: CommentUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutAuthorNestedInput
    assignedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutAssignedToNestedInput
    requestedCorrections?: DepartmentCorrectionUncheckedUpdateManyWithoutRequestedByNestedInput
    departmentTransitions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutMovedByNestedInput
    departmentPermissions?: ProjectDepartmentHistoryUncheckedUpdateManyWithoutPermissionGrantedByNestedInput
    ownedProjects?: ProjectUncheckedUpdateManyWithoutOwnerNestedInput
    coordinatedProjects?: ProjectUncheckedUpdateManyWithoutProjectCoordinatorNestedInput
    pcTeamLeadProjects?: ProjectUncheckedUpdateManyWithoutPcTeamLeadNestedInput
    bugAssignments?: QABugUncheckedUpdateManyWithoutAssignedToNestedInput
    qaTestingRounds?: QATestingRoundUncheckedUpdateManyWithoutTestedByNestedInput
    assignedTasks?: TaskUncheckedUpdateManyWithoutAssigneeNestedInput
    approvalRequests?: WorkflowApprovalUncheckedUpdateManyWithoutRequestedByNestedInput
    approvalReviews?: WorkflowApprovalUncheckedUpdateManyWithoutReviewedByNestedInput
    assignmentHistory?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutPreviousUserNestedInput
    assignmentsMade?: ProjectAssignmentHistoryUncheckedUpdateManyWithoutAssignedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleMasterInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    department?: NullableEnumDepartmentFieldUpdateOperationsInput | $Enums.Department | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectCountOutputTypeDefaultArgs instead
     */
    export type ProjectCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskCountOutputTypeDefaultArgs instead
     */
    export type TaskCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDepartmentHistoryCountOutputTypeDefaultArgs instead
     */
    export type ProjectDepartmentHistoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDepartmentHistoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QATestingRoundCountOutputTypeDefaultArgs instead
     */
    export type QATestingRoundCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QATestingRoundCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentMasterCountOutputTypeDefaultArgs instead
     */
    export type DepartmentMasterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentMasterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleMasterCountOutputTypeDefaultArgs instead
     */
    export type RoleMasterCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleMasterCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDefaultArgs instead
     */
    export type ProjectArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TaskDefaultArgs instead
     */
    export type TaskArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TaskDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CustomFieldDefaultArgs instead
     */
    export type CustomFieldArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomFieldDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectDepartmentHistoryDefaultArgs instead
     */
    export type ProjectDepartmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectDepartmentHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentCorrectionDefaultArgs instead
     */
    export type DepartmentCorrectionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentCorrectionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use WorkflowApprovalDefaultArgs instead
     */
    export type WorkflowApprovalArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = WorkflowApprovalDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QATestingRoundDefaultArgs instead
     */
    export type QATestingRoundArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QATestingRoundDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QABugDefaultArgs instead
     */
    export type QABugArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QABugDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DepartmentMasterDefaultArgs instead
     */
    export type DepartmentMasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DepartmentMasterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use RoleMasterDefaultArgs instead
     */
    export type RoleMasterArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = RoleMasterDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProjectAssignmentHistoryDefaultArgs instead
     */
    export type ProjectAssignmentHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProjectAssignmentHistoryDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}