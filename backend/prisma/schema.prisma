generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                     @id @default(cuid())
  email                 String                     @unique
  name                  String
  password              String
  role                  Role                       @default(DEVELOPER)
  avatar                String?
  createdAt             DateTime                   @default(now())
  updatedAt             DateTime                   @updatedAt
  department            Department?
  roleId                String?
  departmentId          String?
  roleMaster            RoleMaster?                @relation(fields: [roleId], references: [id])
  departmentMaster      DepartmentMaster?          @relation(fields: [departmentId], references: [id])
  comments              Comment[]
  assignedCorrections   DepartmentCorrection[]     @relation("CorrectionAssignments")
  requestedCorrections  DepartmentCorrection[]     @relation("CorrectionRequests")
  departmentTransitions ProjectDepartmentHistory[] @relation("DepartmentTransitions")
  departmentPermissions ProjectDepartmentHistory[] @relation("DepartmentPermissions")
  ownedProjects         Project[]                  @relation("ProjectOwner")
  coordinatedProjects   Project[]                  @relation("ProjectCoordinator")
  pcTeamLeadProjects    Project[]                  @relation("PCTeamLead")
  disabledProjects      Project[]                  @relation("ProjectDisabledBy")
  bugAssignments        QABug[]                    @relation("BugAssignments")
  qaTestingRounds       QATestingRound[]           @relation("QATesters")
  assignedTasks         Task[]
  approvalRequests      WorkflowApproval[]         @relation("ApprovalRequests")
  approvalReviews       WorkflowApproval[]         @relation("ApprovalReviews")
  assignmentHistory     ProjectAssignmentHistory[] @relation("AssignmentUser")
  assignmentsMade       ProjectAssignmentHistory[] @relation("AssignmentAssigner")
  checklistItemsCompleted ProjectChecklistItem[]   @relation("ChecklistCompletedBy")
  checklistItemsUpdated ProjectChecklistItem[]     @relation("ChecklistLastUpdatedBy")
  checklistLinksAdded   ChecklistItemLink[]        @relation("ChecklistLinkAddedBy")
  checklistUpdateHistory ChecklistItemUpdate[]    @relation("ChecklistUpdateHistory")

  @@map("users")
}

model Project {
  id                   String                     @id @default(cuid())
  name                 String
  office               String
  category             ProjectCategory
  pagesCount           Int?
  targetDate           DateTime
  status               ProjectStatus              @default(ACTIVE)
  ownerId              String
  clientName           String?
  observations         String?
  monthsPassed         Int                        @default(0)
  startDate            DateTime                   @default(now())
  deviationReason      String?
  dependency           Boolean                    @default(false)
  disabled             Boolean                    @default(false)
  disabledAt           DateTime?
  disabledBy           String?
  createdAt            DateTime                   @default(now())
  updatedAt            DateTime                   @updatedAt
  currentDepartment    Department                 @default(PMO)
  nextDepartment       Department?
  projectCode          String                     @default("")
  projectCoordinatorId String?
  pcTeamLeadId         String?
  comments             Comment[]
  customFields         CustomField[]
  departmentHistory    ProjectDepartmentHistory[]
  owner                User                       @relation("ProjectOwner", fields: [ownerId], references: [id])
  projectCoordinator   User?                      @relation("ProjectCoordinator", fields: [projectCoordinatorId], references: [id])
  pcTeamLead           User?                      @relation("PCTeamLead", fields: [pcTeamLeadId], references: [id])
  disabledByUser       User?                      @relation("ProjectDisabledBy", fields: [disabledBy], references: [id])
  tasks                Task[]
  assignmentHistory    ProjectAssignmentHistory[]
  checklistItems       ProjectChecklistItem[]

  @@map("projects")
}

model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    Priority   @default(MEDIUM)
  dueDate     DateTime?
  assigneeId  String?
  projectId   String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  comments    Comment[]
  assignee    User?      @relation(fields: [assigneeId], references: [id])
  project     Project    @relation(fields: [projectId], references: [id])

  @@map("tasks")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  authorId  String
  projectId String?
  taskId    String?
  createdAt DateTime @default(now())
  author    User     @relation(fields: [authorId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id])
  task      Task?    @relation(fields: [taskId], references: [id])

  @@map("comments")
}

model CustomField {
  id         String  @id @default(cuid())
  fieldName  String
  fieldValue String
  projectId  String
  project    Project @relation(fields: [projectId], references: [id])

  @@map("custom_fields")
}

model ProjectDepartmentHistory {
  id                    String                 @id @default(cuid())
  projectId             String
  fromDepartment        Department?
  toDepartment          Department
  movedById             String
  notes                 String?
  createdAt             DateTime               @default(now())
  workStatus            DepartmentWorkStatus   @default(NOT_STARTED)
  workStartDate         DateTime?
  workEndDate           DateTime?
  estimatedDays         Int?
  actualDays            Int?
  correctionCount       Int                    @default(0)
  permissionGrantedById String?
  updatedAt             DateTime               @updatedAt
  corrections           DepartmentCorrection[]
  movedBy               User                   @relation("DepartmentTransitions", fields: [movedById], references: [id])
  permissionGrantedBy   User?                  @relation("DepartmentPermissions", fields: [permissionGrantedById], references: [id])
  project               Project                @relation(fields: [projectId], references: [id])
  qaRounds              QATestingRound[]
  approvals             WorkflowApproval[]

  @@map("project_department_history")
}

model DepartmentCorrection {
  id                String                   @id @default(cuid())
  historyId         String
  correctionType    String
  description       String
  requestedById     String
  assignedToId      String?
  status            CorrectionStatus         @default(OPEN)
  priority          Priority                 @default(MEDIUM)
  requestedAt       DateTime                 @default(now())
  resolvedAt        DateTime?
  resolutionNotes   String?
  estimatedHours    Int?
  actualHours       Int?
  assignedTo        User?                    @relation("CorrectionAssignments", fields: [assignedToId], references: [id])
  departmentHistory ProjectDepartmentHistory @relation(fields: [historyId], references: [id])
  requestedBy       User                     @relation("CorrectionRequests", fields: [requestedById], references: [id])

  @@map("department_corrections")
}

model WorkflowApproval {
  id                String                   @id @default(cuid())
  historyId         String
  approvalType      ApprovalType
  status            ApprovalStatus           @default(PENDING)
  requestedById     String
  reviewedById      String?
  requestedAt       DateTime                 @default(now())
  reviewedAt        DateTime?
  comments          String?
  rejectionReason   String?
  attachments       String[]                 @default([])
  departmentHistory ProjectDepartmentHistory @relation(fields: [historyId], references: [id])
  requestedBy       User                     @relation("ApprovalRequests", fields: [requestedById], references: [id])
  reviewedBy        User?                    @relation("ApprovalReviews", fields: [reviewedById], references: [id])

  @@map("workflow_approvals")
}

model QATestingRound {
  id                String                   @id @default(cuid())
  historyId         String
  roundNumber       Int
  qaType            QAType
  status            QAStatus                 @default(IN_PROGRESS)
  startedAt         DateTime                 @default(now())
  completedAt       DateTime?
  testedById        String
  bugsFound         Int                      @default(0)
  criticalBugs      Int                      @default(0)
  testResults       String?
  rejectionReason   String?
  bugs              QABug[]
  departmentHistory ProjectDepartmentHistory @relation(fields: [historyId], references: [id])
  testedBy          User                     @relation("QATesters", fields: [testedById], references: [id])

  @@map("qa_testing_rounds")
}

model QABug {
  id           String         @id @default(cuid())
  qaRoundId    String
  title        String
  description  String
  severity     BugSeverity    @default(MEDIUM)
  status       BugStatus      @default(OPEN)
  foundAt      DateTime       @default(now())
  fixedAt      DateTime?
  assignedToId String?
  screenshot   String?
  steps        String?
  assignedTo   User?          @relation("BugAssignments", fields: [assignedToId], references: [id])
  qaRound      QATestingRound @relation(fields: [qaRoundId], references: [id])

  @@map("qa_bugs")
}

model DepartmentMaster {
  id               String              @id @default(cuid())
  name             String              @unique
  code             String              @unique
  parentId         String?
  order            Int                 @default(0)
  isActive         Boolean             @default(true)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  parent           DepartmentMaster?   @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children         DepartmentMaster[]  @relation("DepartmentHierarchy")
  roles            RoleMaster[]
  users            User[]

  @@map("department_master")
}

model RoleMaster {
  id               String           @id @default(cuid())
  name             String           @unique
  code             String           @unique
  description      String?
  departmentId     String
  isActive         Boolean          @default(true)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  department       DepartmentMaster @relation(fields: [departmentId], references: [id])
  users            User[]

  @@map("role_master")
}

model ProjectAssignmentHistory {
  id              String                   @id @default(cuid())
  projectId       String
  assignmentType  ProjectAssignmentType
  previousUserId  String?
  newUserId       String?
  assignedById    String
  assignedAt      DateTime                 @default(now())
  reason          String?
  notes           String?
  project         Project                  @relation(fields: [projectId], references: [id])
  previousUser    User?                    @relation("AssignmentUser", fields: [previousUserId], references: [id])
  assignedBy      User                     @relation("AssignmentAssigner", fields: [assignedById], references: [id])

  @@map("project_assignment_history")
}

enum ApprovalType {
  CLIENT_APPROVAL
  QA_APPROVAL
  BEFORE_LIVE_QA
  MANAGER_REVIEW
}

enum ApprovalStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum QAType {
  HTML_QA
  DEV_QA
  BEFORE_LIVE_QA
}

enum QAStatus {
  IN_PROGRESS
  PASSED
  FAILED
  CANCELLED
}

enum BugSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum BugStatus {
  OPEN
  IN_PROGRESS
  FIXED
  VERIFIED
  CLOSED
}

enum CorrectionStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum Role {
  ADMIN
  PROJECT_MANAGER
  PROJECT_COORDINATOR
  DEVELOPER
  DESIGNER
  HTML_DEVELOPER
  QA_TESTER
  CLIENT
  PC
  TESTER
  PHP_TL1
  PHP_TL2
  REACT_TL
  HTML_TL
  PC_TL1
  PC_TL2
  DESIGN_TL
}

enum ProjectCategory {
  MOBILE_APP
  REACT_NODEJS
  ADVANCED_PHP
  CUSTOM_PHP
  CUSTOM_WP
  NEXT_JS
  ECOMMERCE
  NORMAL_WEB_APP
  BUSINESS_COLLATERAL
  WOOCOMMERCE
}

enum ProjectStatus {
  ACTIVE
  HOLD
  COMPLETED
  CANCELLED
  ARCHIVED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum Department {
  PMO
  DESIGN
  HTML
  PHP
  REACT
  WORDPRESS
  QA
  DELIVERY
  MANAGER
}

enum DepartmentWorkStatus {
  NOT_STARTED
  IN_PROGRESS
  CORRECTIONS_NEEDED
  COMPLETED
  ON_HOLD
  PENDING_CLIENT_APPROVAL
  CLIENT_REJECTED
  QA_TESTING
  QA_REJECTED
  BUGFIX_IN_PROGRESS
  BEFORE_LIVE_QA
  READY_FOR_DELIVERY
}

enum ProjectAssignmentType {
  PROJECT_COORDINATOR
  PC_TEAM_LEAD
}

model ChecklistTemplate {
  id           String                  @id @default(cuid())
  department   String
  title        String
  description  String?
  isRequired   Boolean                 @default(true)
  order        Int                     @default(0)
  isActive     Boolean                 @default(true)
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt
  items        ProjectChecklistItem[]

  @@map("checklist_templates")
}

model ProjectChecklistItem {
  id              String                      @id @default(cuid())
  projectId       String
  templateId      String
  department      Department
  title           String
  description     String?
  isCompleted     Boolean                     @default(false)
  completedById   String?
  completedAt     DateTime?
  completedDate   DateTime?
  notes           String?
  isRequired      Boolean                     @default(true)
  order           Int                         @default(0)
  lastUpdatedAt   DateTime?
  lastUpdatedById String?
  createdAt       DateTime                    @default(now())
  updatedAt       DateTime                    @updatedAt
  project         Project                     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  template        ChecklistTemplate           @relation(fields: [templateId], references: [id])
  completedBy     User?                       @relation("ChecklistCompletedBy", fields: [completedById], references: [id])
  lastUpdatedBy   User?                       @relation("ChecklistLastUpdatedBy", fields: [lastUpdatedById], references: [id])
  links           ChecklistItemLink[]
  updateHistory   ChecklistItemUpdate[]

  @@map("project_checklist_items")
}

model ChecklistItemLink {
  id        String               @id @default(cuid())
  itemId    String
  url       String
  title     String
  type      String               // 'document' | 'link' | 'reference'
  addedAt   DateTime             @default(now())
  addedById String?
  item      ProjectChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  addedBy   User?                @relation("ChecklistLinkAddedBy", fields: [addedById], references: [id])

  @@map("checklist_item_links")
}

model ChecklistItemUpdate {
  id          String               @id @default(cuid())
  itemId      String
  date        DateTime
  notes       String
  updatedById String
  updatedAt   DateTime             @default(now())
  item        ProjectChecklistItem @relation(fields: [itemId], references: [id], onDelete: Cascade)
  updatedBy   User                 @relation("ChecklistUpdateHistory", fields: [updatedById], references: [id])

  @@map("checklist_item_updates")
}
